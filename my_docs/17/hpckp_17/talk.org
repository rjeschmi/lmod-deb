Here are some notes on a talk for HPCKP.

I am thinking about a putting together a talk that is less about
features, but rather about solving problems.

I could also start to cover features and point out these features are
to solve problems.

More than one version -> Software has bugs, lacks feature, 
                         New Software has features, new bugs



spider cache -> speeds up avail, spider.  slow parallel file systems (Parallel file systems are
                great for reading/writing a lot of data.  Not so good
                for walking a directory or reading a bunch of files)

Tracing option -> (1) report why different users in the same group with
                      similar ~/.bashrc 
                  (2) Understanding load storms
                  (3) Pablo's issue with LMOD_DISABLE_SAME_NAME_AUTOSWAP

Hierarchy -> Dealing with Compiler Libraries (boost) or MPI/Compiler
             dependant libraries and apps like PETSc

ml spider -> Can't see all modules with "module avail"


One name rule -> prevents users from loading two different versions of
                 gcc

Family -> Can only load one compiler or mpi stack at a time. (Can't
          load both openmpi and mpich at the same time.)

conflicts -> are fragile: what happens if you add a new compiler or
             mpi stack


Module Usage Tracking -> What is getting used or NOT!

Deprecating packages -> Nag message 
                        hiding modules


Site configurable -> Lmod can be configured in different ways
                     depending on site needs.  ./configure --with-...

Configurable (part deux) -> SitePackage.lua and hooks.  This way sites
                            can run code to track modules without
                            modifying a single modulefile. A new hook
                            is isVisibleHook so that sites can control
                            which modulefiles are visible or hidden.



Problem w/ /usr/local/bin -> What happens when /usr/local/bin is in
                             the original PATH.  Then a module foo adds
                             /usr/local/bin to the path.  Finally ml
                             -foo. Where is /usr/local/bin?


---------------------------------------------
How can Lmod help with user experience:

* Cut down on tickets
* More importantly we want to protect novice users w/o getting in the way.
** Lmod supports the software hierarchy.
** Note Lmod supports many different layouts: Flat, Hierarchy
* 
