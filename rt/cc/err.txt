===========================
step 1
lua ProjectDIR/src/lmod.in.lua bash --regression_testing --version
===========================
Modules based on Lua: Version 7.8.16  2019-01-31 14:12 -06:00
    by Robert McLay mclay@tacc.utexas.edu
===========================
step 2
lua ProjectDIR/src/lmod.in.lua bash --regression_testing avail
===========================
ProjectDIR/rt/cc/cc_mf/modules
   StdEnv/2016.4 (D)    arch/avx2          nixpkgs/16.09
   StdEnv/2018.3        arch/avx512 (D)
  Where:
   D:  Default Module
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 3
lua ProjectDIR/src/lmod.in.lua bash --regression_testing load StdEnv
===========================
===========================
step 4
lua ProjectDIR/src/lmod.in.lua bash --regression_testing list
===========================
Currently Loaded Modules:
  1) nixpkgs/16.09         4) ifort/.2016.4.258 (H)   7) openmpi/2.1.1
  2) gcccore/.5.4.0  (H)   5) imkl/11.3.4.258         8) StdEnv/2016.4
  3) icc/.2016.4.258 (H)   6) intel/2016.4
  Where:
   H:  Hidden Module
===========================
step 5
lua ProjectDIR/src/lmod.in.lua bash --regression_testing -DT load arch/avx512
===========================
Description                      Value
Allow TCL modulefiles            yes
Auto swapping                    yes
Case Independent Sorting         no
Colorize Lmod                    yes
Disable Same Name AutoSwap       no
Using dotfiles                   yes
Allow duplicate paths            no
Require Exact Match/no defaults  no
Export the module command        yes
Use italic instead of dim        no
Language used for err/msg/warn   en
Site message file                <empty>
LUA_CPATH                        @sys_lua_cpath@
LUA_PATH                         @sys_lua_path@
System lua-term                  no
avail: Include modulepath dir    no
MODULEPATH_INIT                  @PKG@/init/.modulespath -> <empty>
MODULEPATH_ROOT                  ProjectDIR/rt/cc/cc_mf
number of cache dirs             0
Pager                            less
Pager Options                    -XqMREF
Path to HashSum                  PATH_to_HASHSUM
Path to Lua                      lua
Pin Versions in restore          no
Pkg Class name                   Pkg
Lmod prefix                      @PREFIX@
Site controlled prefix           no
Prepend order                    normal
Redirect to stdout               no
Supporting Full Settarg Use      no
User shell                       bash
Site Name                        <empty>
Site Pkg location                standard
Ignore Cache                     no
Cached loads                     no
System Name                      <empty>
SYSHOST (cluster name)           <empty>
User cache valid time(sec)       86400
Write cache after (sec)          2
Threshold (sec)                  1
Tmod find first rule             no
Tmod prepend PATH Rule           no
Tracing                          yes
uname -a
LMOD_TRACING     no       yes
MODULEPATH_ROOT           ProjectDIR/rt/cc/cc_mf
Active RC file(s):
ProjectDIR/src/../init/lmodrc.lua
 Lmod Property Table:
propT = {
  arch = {
    displayT = {
      gpu = {
        ["color"] = "red",
        ["doc"] = "built for GPU",
        ["full_color"] = false,
        ["long"] = "(g)",
        ["short"] = "(g)",
      },
      ["gpu:mic"]  = {
        ["color"] = "red",
        ["doc"] = "built natively for MIC and GPU",
        ["full_color"] = false,
        ["long"] = "(g,m)",
        ["short"] = "(gm)",
      },
      ["gpu:mic:offload"]  = {
        ["color"] = "red",
        ["doc"] = "built natively for MIC and GPU and offload to the MIC",
        ["full_color"] = false,
        ["long"] = "(g,m,o)",
        ["short"] = "(@)",
      },
      mic = {
        ["color"] = "blue",
        ["doc"] = "built for host and native MIC",
        ["full_color"] = false,
        ["long"] = "(m)",
        ["short"] = "(m)",
      },
      ["mic:offload"]  = {
        ["color"] = "blue",
        ["doc"] = "built for host, native MIC and offload to the MIC",
        ["full_color"] = false,
        ["long"] = "(m,o)",
        ["short"] = "(*)",
      },
      offload = {
        ["color"] = "blue",
        ["doc"] = "built for offload to the MIC only",
        ["full_color"] = false,
        ["long"] = "(o)",
        ["short"] = "(o)",
      },
    },
    validT = {
      ["gpu"] = 1,
      ["mic"] = 1,
      ["offload"] = 1,
    },
  },
  lmod = {
    displayT = {
      sticky = {
        ["color"] = "red",
        ["doc"] = "Module is Sticky, requires --force to unload or purge",
        ["long"] = "(S)",
        ["short"] = "(S)",
      },
    },
    validT = {
      ["sticky"] = 1,
    },
  },
  state = {
    displayT = {
      experimental = {
        ["color"] = "blue",
        ["doc"] = "Experimental",
        ["long"] = "(E)",
        ["short"] = "(E)",
      },
      obsolete = {
        ["color"] = "red",
        ["doc"] = "Obsolete",
        ["long"] = "(O)",
        ["short"] = "(O)",
      },
      testing = {
        ["color"] = "green",
        ["doc"] = "Testing",
        ["long"] = "(T)",
        ["short"] = "(T)",
      },
    },
    validT = {
      ["experimental"] = 1,
      ["obsolete"] = 1,
      ["testing"] = 1,
    },
  },
  status = {
    displayT = {
      active = {
        ["color"] = "yellow",
        ["doc"] = "Module is loaded",
        ["long"] = "(L)",
        ["short"] = "(L)",
      },
    },
    validT = {
      ["active"] = 1,
    },
  },
}
lmod(--regression_testing -DT load arch/avx512){
  Date: Thu Feb  7 16:15:25 2019
  Hostname: rios
  System: Linux 4.15.0-45-generic
  Version: #48-Ubuntu SMP Tue Jan 29 16:28:13 UTC 2019
  Lua Version: 5.3
  Lmod Version: 7.8.16  2019-01-31 14:12 -06:00
  package.path: /?.lua;/?/init.lua;ProjectDIR/src/?.lua;ProjectDIR/src/../tools/?.lua;ProjectDIR/src/../tools/?/init.lua;ProjectDIR/src/../shells/?.lua;ProjectDIR/src/?/init.lua;/opt/apps/luarocks/luarocks/share/lua/5.3/?.lua;/opt/apps/luarocks/luarocks/share/lua/5.3/?/init.lua;/opt/apps/luatools/5.3.2/share/lua/5.3/?.lua;/opt/apps/lua/5.3.5.0-rtm/share/lua/5.3/?.lua;/opt/apps/lua/5.3.5.0-rtm/share/lua/5.3/?/init.lua;/opt/apps/lua/5.3.5.0-rtm/lib/lua/5.3/?.lua;/opt/apps/lua/5.3.5.0-rtm/lib/lua/5.3/?/init.lua;./?.lua;./?/init.lua;
  package.cpath: /../lib/?.so;ProjectDIR/src/../lib/?.so;/opt/apps/luarocks/luarocks/lib/lua/5.3/?.so;/opt/apps/luatools/5.3.2/lib/lua/5.3/?.so;/opt/apps/lua/5.3.5.0-rtm/lib/lua/5.3/?.so;/opt/apps/lua/5.3.5.0-rtm/lib/lua/5.3/loadall.so;./?.so;
  lmodPath: ''
  shellNm: bash, Shell:name(): bash
running: module --regression_testing -DT load arch/avx512
  Calling Master:singleton(checkMPATH) w checkMPATH: true
  Master:singleton(safe: true){
    s_master: table: 0x115ce70, safe: true
  } Master:singleton
  cmd name: load
  FrameStk:new(){
    MT:singleton(){
      getMT s: _ModuleTable_={["MTversion"]=3,["c_rebuildTime"]=false,["c_shortTime"]=false,depthT={},family={["compiler"]="intel",["mpi"]="openmpi",},mT={StdEnv={["fn"]="ProjectDIR/rt/cc/cc_mf/modules/StdEnv/2016.4.lua",["fullName"]="StdEnv/2016.4",["loadOrder"]=8,propT={},["stackDepth"]=0,["status"]="active",["userName"]="StdEnv",},gcccore={["fn"]="ProjectDIR/rt/cc/cc_mf/Core/gcccore/.5.4.0.lua",["fullName"]="gcccore/.5.4.0",["loadOrder"]=2,propT={},["stackDepth"]=3,["status"]="active",["userName"]="gcccore/.5.4.0",},icc={["fn"]="ProjectDIR/rt/cc/cc_mf/Core/icc/.2016.4.258.lua",["fullName"]="icc/.2016.4.258",["loadOrder"]=3,propT={},["stackDepth"]=2,["status"]="active",["userName"]="icc/.2016.4.258",},ifort={["fn"]="ProjectDIR/rt/cc/cc_mf/Core/ifort/.2016.4.258.lua",["fullName"]="ifort/.2016.4.258",["loadOrder"]=4,propT={},["stackDepth"]=2,["status"]="active",["userName"]="ifort/.2016.4.258",},imkl={["fn"]="ProjectDIR/rt/cc/cc_mf/Core/imkl/11.3.4.258.lua",["fullName"]="imkl/11.3.4.258",["loadOrder"]=5,propT={},["stackDepth"]=2,["status"]="active",["userName"]="imkl/11.3.4.258",},intel={["fn"]="ProjectDIR/rt/cc/cc_mf/Core/intel/2016.4.lua",["fullName"]="intel/2016.4",["loadOrder"]=6,propT={},["stackDepth"]=1,["status"]="active",["userName"]="intel/2016.4",},nixpkgs={["fn"]="ProjectDIR/rt/cc/cc_mf/modules/nixpkgs/16.09.lua",["fullName"]="nixpkgs/16.09",["loadOrder"]=1,propT={},["stackDepth"]=1,["status"]="active",["userName"]="nixpkgs/16.09",},openmpi={["fn"]="ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua",["fullName"]="openmpi/2.1.1",["loadOrder"]=7,propT={},["stackDepth"]=1,["status"]="active",["userName"]="openmpi/2.1.1",},},mpathA={"ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1","ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4","ProjectDIR/rt/cc/cc_mf/Core","ProjectDIR/rt/cc/cc_mf/modules",},["systemBaseMPATH"]="ProjectDIR/rt/cc/cc_mf/modules",}
      MT new(s,restoreFn:nil){
        currentMPATH: ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1:ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4:ProjectDIR/rt/cc/cc_mf/Core:ProjectDIR/rt/cc/cc_mf/modules
      } MT new
    } MT:singleton
  } FrameStk:new
  __LMOD_REF_COUNT_MODULEPATH: ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1:1;ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4:1;ProjectDIR/rt/cc/cc_mf/Core:1;ProjectDIR/rt/cc/cc_mf/modules:1
  Load_Usr(arch/avx512){
    Setting mcp to MC_Load
    MasterControl:load_usr(mA={arch/avx512}){
      registerUserLoads(mA){
        userName: arch/avx512
      } registerUserLoads
      MasterControl:load(mA={arch/avx512}){
        Master:singleton(safe: nil){
          s_master: table: 0x115ce70, safe: true
        } Master:singleton
        Master:load(mA={arch/avx512}){
          Master:load i: 1, userName: arch/avx512
          Mname:sn(){
            ModuleA:__new(){
              calling DirTree:new()
              MRC l_build(self,fnA){
              } MRC l_build
              RC_File(ProjectDIR/rt/cc/cc_mf/Core/intel/.modulerc.lua){
                if os.getenv("RSNT_ARCH") == "avx512" then
                	module_version("intel/2018.3","default")
                else
                	module_version("intel/2016.4","default")
                end
              } RC_File
              In versionFile
              MRC:parseModA_for_moduleA(intel, modA){
                entry.kind: module_version
                resolve(fullName): intel/2018.3
                (2) fullName: intel/2018.3
                j: 1, version: default
                Setting default: intel/2018.3
              } MRC:parseModA_for_moduleA
              Back in versionFile
              RC_File(ProjectDIR/rt/cc/cc_mf/modules/StdEnv/.modulerc.lua){
                module_version("StdEnv/2016.4", "default")
              } RC_File
              In versionFile
              MRC:parseModA_for_moduleA(StdEnv, modA){
                entry.kind: module_version
                resolve(fullName): StdEnv/2016.4
                (2) fullName: StdEnv/2016.4
                j: 1, version: default
                Setting default: StdEnv/2016.4
              } MRC:parseModA_for_moduleA
              Back in versionFile
              ModuleA build(){
                #dirA: 3
                mpath: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4
                mpath: ProjectDIR/rt/cc/cc_mf/Core
                mpath: ProjectDIR/rt/cc/cc_mf/modules
              } ModuleA build
              ["moduleA:"]  = {
                {
                  T = {
                    openmpi = {
                      defaultT = {},
                      dirT = {},
                      fileT = {
                        ["openmpi/2.1.1"]  = {
                          ["canonical"] = "2.1.1",
                          ["fn"] = "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua",
                          ["luaExt"] = 6,
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4",
                          ["pV"] = "000000002.000000001.000000001.*zfinal",
                          ["wV"] = "000000002.000000001.000000001.*zfinal",
                        },
                      },
                    },
                  },
                  ["mpath"] = "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4",
                },
                {
                  T = {
                    gcc = {
                      defaultT = {},
                      dirT = {},
                      fileT = {
                        ["gcc/5.4.0"]  = {
                          ["canonical"] = "5.4.0",
                          ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core/gcc/5.4.0.lua",
                          ["luaExt"] = 6,
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core",
                          ["pV"] = "000000005.000000004.*zfinal",
                          ["wV"] = "000000005.000000004.*zfinal",
                        },
                        ["gcc/7.3.0"]  = {
                          ["canonical"] = "7.3.0",
                          ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core/gcc/7.3.0.lua",
                          ["luaExt"] = 6,
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core",
                          ["pV"] = "000000007.000000003.*zfinal",
                          ["wV"] = "000000007.000000003.*zfinal",
                        },
                      },
                    },
                    gcccore = {
                      defaultT = {},
                      dirT = {},
                      fileT = {
                        ["gcccore/.5.4.0"]  = {
                          ["canonical"] = ".5.4.0",
                          ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core/gcccore/.5.4.0.lua",
                          ["luaExt"] = 7,
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core",
                          ["pV"] = "000000000.000000005.000000004.*zfinal",
                          ["wV"] = "000000000.000000005.000000004.*zfinal",
                        },
                        ["gcccore/.7.3.0"]  = {
                          ["canonical"] = ".7.3.0",
                          ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core/gcccore/.7.3.0.lua",
                          ["luaExt"] = 7,
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core",
                          ["pV"] = "000000000.000000007.000000003.*zfinal",
                          ["wV"] = "000000000.000000007.000000003.*zfinal",
                        },
                      },
                    },
                    icc = {
                      defaultT = {},
                      dirT = {},
                      fileT = {
                        ["icc/.2016.4.258"]  = {
                          ["canonical"] = ".2016.4.258",
                          ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core/icc/.2016.4.258.lua",
                          ["luaExt"] = 12,
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core",
                          ["pV"] = "000000000.000002016.000000004.000000258.*zfinal",
                          ["wV"] = "000000000.000002016.000000004.000000258.*zfinal",
                        },
                        ["icc/.2018.3.222"]  = {
                          ["canonical"] = ".2018.3.222",
                          ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core/icc/.2018.3.222.lua",
                          ["luaExt"] = 12,
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core",
                          ["pV"] = "000000000.000002018.000000003.000000222.*zfinal",
                          ["wV"] = "000000000.000002018.000000003.000000222.*zfinal",
                        },
                      },
                    },
                    ifort = {
                      defaultT = {},
                      dirT = {},
                      fileT = {
                        ["ifort/.2016.4.258"]  = {
                          ["canonical"] = ".2016.4.258",
                          ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core/ifort/.2016.4.258.lua",
                          ["luaExt"] = 12,
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core",
                          ["pV"] = "000000000.000002016.000000004.000000258.*zfinal",
                          ["wV"] = "000000000.000002016.000000004.000000258.*zfinal",
                        },
                        ["ifort/.2018.3.222"]  = {
                          ["canonical"] = ".2018.3.222",
                          ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core/ifort/.2018.3.222.lua",
                          ["luaExt"] = 12,
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core",
                          ["pV"] = "000000000.000002018.000000003.000000222.*zfinal",
                          ["wV"] = "000000000.000002018.000000003.000000222.*zfinal",
                        },
                      },
                    },
                    imkl = {
                      defaultT = {},
                      dirT = {},
                      fileT = {
                        ["imkl/11.3.4.258"]  = {
                          ["canonical"] = "11.3.4.258",
                          ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core/imkl/11.3.4.258.lua",
                          ["luaExt"] = 11,
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core",
                          ["pV"] = "000000011.000000003.000000004.000000258.*zfinal",
                          ["wV"] = "000000011.000000003.000000004.000000258.*zfinal",
                        },
                        ["imkl/2018.3.222"]  = {
                          ["canonical"] = "2018.3.222",
                          ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core/imkl/2018.3.222.lua",
                          ["luaExt"] = 11,
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core",
                          ["pV"] = "000002018.000000003.000000222.*zfinal",
                          ["wV"] = "000002018.000000003.000000222.*zfinal",
                        },
                      },
                    },
                    intel = {
                      defaultT = {
                        ["barefn"] = ".modulerc.lua",
                        ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core/intel/.modulerc.lua",
                        ["fullName"] = "intel/.modulerc",
                        ["luaExt"] = 10,
                        ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core",
                        ["value"] = "intel/2018.3",
                      },
                      dirT = {},
                      fileT = {
                        ["intel/2016.4"]  = {
                          ["canonical"] = "2016.4",
                          ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core/intel/2016.4.lua",
                          ["luaExt"] = 7,
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core",
                          ["pV"] = "000002016.000000004.*zfinal",
                          ["wV"] = "000002016.000000004.*zfinal",
                        },
                        ["intel/2018.3"]  = {
                          ["canonical"] = "2018.3",
                          ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core/intel/2018.3.lua",
                          ["luaExt"] = 7,
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core",
                          ["pV"] = "000002018.000000003.*zfinal",
                          ["wV"] = "^00002018.000000003.*zfinal",
                        },
                      },
                    },
                  },
                  ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core",
                },
                {
                  T = {
                    StdEnv = {
                      defaultT = {
                        ["barefn"] = ".modulerc.lua",
                        ["fn"] = "ProjectDIR/rt/cc/cc_mf/modules/StdEnv/.modulerc.lua",
                        ["fullName"] = "StdEnv/.modulerc",
                        ["luaExt"] = 10,
                        ["mpath"] = "ProjectDIR/rt/cc/cc_mf/modules",
                        ["value"] = "StdEnv/2016.4",
                      },
                      dirT = {},
                      fileT = {
                        ["StdEnv/2016.4"]  = {
                          ["canonical"] = "2016.4",
                          ["fn"] = "ProjectDIR/rt/cc/cc_mf/modules/StdEnv/2016.4.lua",
                          ["luaExt"] = 7,
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/modules",
                          ["pV"] = "000002016.000000004.*zfinal",
                          ["wV"] = "^00002016.000000004.*zfinal",
                        },
                        ["StdEnv/2018.3"]  = {
                          ["canonical"] = "2018.3",
                          ["fn"] = "ProjectDIR/rt/cc/cc_mf/modules/StdEnv/2018.3.lua",
                          ["luaExt"] = 7,
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/modules",
                          ["pV"] = "000002018.000000003.*zfinal",
                          ["wV"] = "000002018.000000003.*zfinal",
                        },
                      },
                    },
                    arch = {
                      defaultT = {},
                      dirT = {},
                      fileT = {
                        ["arch/avx2"]  = {
                          ["canonical"] = "avx2",
                          ["fn"] = "ProjectDIR/rt/cc/cc_mf/modules/arch/avx2.lua",
                          ["luaExt"] = 5,
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/modules",
                          ["pV"] = "*avx.000000002.*zfinal",
                          ["wV"] = "*avx.000000002.*zfinal",
                        },
                        ["arch/avx512"]  = {
                          ["canonical"] = "avx512",
                          ["fn"] = "ProjectDIR/rt/cc/cc_mf/modules/arch/avx512.lua",
                          ["luaExt"] = 7,
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/modules",
                          ["pV"] = "*avx.000000512.*zfinal",
                          ["wV"] = "*avx.000000512.*zfinal",
                        },
                      },
                    },
                    nixpkgs = {
                      defaultT = {},
                      dirT = {},
                      fileT = {
                        ["nixpkgs/16.09"]  = {
                          ["canonical"] = "16.09",
                          ["fn"] = "ProjectDIR/rt/cc/cc_mf/modules/nixpkgs/16.09.lua",
                          ["luaExt"] = 6,
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/modules",
                          ["pV"] = "000000016.000000009.*zfinal",
                          ["wV"] = "000000016.000000009.*zfinal",
                        },
                      },
                    },
                  },
                  ["mpath"] = "ProjectDIR/rt/cc/cc_mf/modules",
                },
              }
              isNVV: false
            } ModuleA:__new
            LocationT:new(moduleA){
              LocationT build(moduleA){
              } LocationT build
            } LocationT:new
          } Mname:sn
  (1)(0)Loading: arch/avx512 (fn: ProjectDIR/rt/cc/cc_mf/modules/arch/avx512.lua, using Find-Best)
          Master:load i: 1 sn: arch fn: ProjectDIR/rt/cc/cc_mf/modules/arch/avx512.lua
          Master:loading: "arch/avx512" from file: "ProjectDIR/rt/cc/cc_mf/modules/arch/avx512.lua"
          loadModuleFile(ProjectDIR/rt/cc/cc_mf/modules/arch/avx512.lua){
            ModuleFile{
              if (mode() ~= "spider") then
                 local mroot = os.getenv("MODULEPATH_ROOT")
                 prepend_path("MODULEPATH",  pathJoin(mroot, "modules-avx512"))
              end
            } ModuleFile
            prepend_path(MODULEPATH, ProjectDIR/rt/cc/cc_mf/modules-avx512){
              MasterControl:prepend_path(t){
                name:"MODULEPATH", value: "ProjectDIR/rt/cc/cc_mf/modules-avx512", delim=":", nodups="true", priority=0
    Prepending: ProjectDIR/rt/cc/cc_mf/modules-avx512 to MODULEPATH
                chkMP("MODULEPATH", value: ProjectDIR/rt/cc/cc_mf/modules-avx512:ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1:ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4:ProjectDIR/rt/cc/cc_mf/Core:ProjectDIR/rt/cc/cc_mf/modules, adding:true){
                  MT:set_MPATH_change_flag(self)
                  ModuleA:update(spider_cache=false){
                    building mpath: ProjectDIR/rt/cc/cc_mf/modules-avx512
                    ModuleA:__new(){
                      calling DirTree:new()
                      RC_File(ProjectDIR/rt/cc/cc_mf/modules-avx512/StdEnv/.modulerc.lua){
                        module_version("StdEnv/2018.3", "default")
                      } RC_File
                      In versionFile
                      MRC:parseModA_for_moduleA(StdEnv, modA){
                        entry.kind: module_version
                        resolve(fullName): StdEnv/2018.3
                        (2) fullName: StdEnv/2018.3
                        j: 1, version: default
                        Setting default: StdEnv/2018.3
                      } MRC:parseModA_for_moduleA
                      Back in versionFile
                      ModuleA build(){
                        #dirA: 1
                        mpath: ProjectDIR/rt/cc/cc_mf/modules-avx512
                      } ModuleA build
                      ["moduleA:"]  = {
                        {
                          T = {
                            StdEnv = {
                              defaultT = {
                                ["barefn"] = ".modulerc.lua",
                                ["fn"] = "ProjectDIR/rt/cc/cc_mf/modules-avx512/StdEnv/.modulerc.lua",
                                ["fullName"] = "StdEnv/.modulerc",
                                ["luaExt"] = 10,
                                ["mpath"] = "ProjectDIR/rt/cc/cc_mf/modules-avx512",
                                ["value"] = "StdEnv/2018.3",
                              },
                              dirT = {},
                              fileT = {
                                ["StdEnv/2016.4"]  = {
                                  ["canonical"] = "2016.4",
                                  ["fn"] = "ProjectDIR/rt/cc/cc_mf/modules-avx512/StdEnv/2016.4.lua",
                                  ["luaExt"] = 7,
                                  ["mpath"] = "ProjectDIR/rt/cc/cc_mf/modules-avx512",
                                  ["pV"] = "000002016.000000004.*zfinal",
                                  ["wV"] = "000002016.000000004.*zfinal",
                                },
                                ["StdEnv/2018.3"]  = {
                                  ["canonical"] = "2018.3",
                                  ["fn"] = "ProjectDIR/rt/cc/cc_mf/modules-avx512/StdEnv/2018.3.lua",
                                  ["luaExt"] = 7,
                                  ["mpath"] = "ProjectDIR/rt/cc/cc_mf/modules-avx512",
                                  ["pV"] = "000002018.000000003.*zfinal",
                                  ["wV"] = "^00002018.000000003.*zfinal",
                                },
                              },
                            },
                            nixpkgs = {
                              defaultT = {},
                              dirT = {},
                              fileT = {
                                ["nixpkgs/16.09"]  = {
                                  ["canonical"] = "16.09",
                                  ["fn"] = "ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua",
                                  ["luaExt"] = 6,
                                  ["mpath"] = "ProjectDIR/rt/cc/cc_mf/modules-avx512",
                                  ["pV"] = "000000016.000000009.*zfinal",
                                  ["wV"] = "000000016.000000009.*zfinal",
                                },
                              },
                            },
                          },
                          ["mpath"] = "ProjectDIR/rt/cc/cc_mf/modules-avx512",
                        },
                      }
                      isNVV: false
                    } ModuleA:__new
                    Reusing mpath: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4
                    Reusing mpath: ProjectDIR/rt/cc/cc_mf/Core
                    Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules
                  } ModuleA:update
                } chkMP
              } MasterControl:prepend_path
            } prepend_path
          } loadModuleFile
          Marking arch/avx512 as active and loaded
          safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): true
          Master:load calling reloadAll()
          Master:reloadAll(count: 1){
            Setting mcp to MC_Load
  reloadAll(1)(nixpkgs/16.09, gcccore/.5.4.0, icc/.2016.4.258, ifort/.2016.4.258, imkl/11.3.4.258, intel/2016.4, openmpi/2.1.1, StdEnv, arch/avx512)
            Mname:sn(){
            } Mname:sn
            a[i].userName(1): nixpkgs/16.09
            adding sn: nixpkgs to mA
            module sn: nixpkgs is active
            userName(2):  nixpkgs/16.09
            Mname:fn(){
              LocationT:new(moduleA){
                LocationT build(moduleA){
                } LocationT build
              } LocationT:new
            } Mname:fn
            Master:reloadAll fn_new: "ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua" mt:fileName(sn): "ProjectDIR/rt/cc/cc_mf/modules/nixpkgs/16.09.lua" mt:userName(sn): "nixpkgs/16.09" a[i].userName: "nixpkgs/16.09"
            Master:reloadAll(1): Unloading module: "nixpkgs"
            Master:singleton(safe: nil){
              s_master: table: 0x115ce70, safe: true
            } Master:singleton
            MasterControl:unload(mA={nixpkgs/16.09}){
              unRegisterUserLoads(mA){
                userName: nixpkgs/16.09
              } unRegisterUserLoads
              Master:unload(mA={nixpkgs/16.09}){
                MasterControl:_setMode("unload"){
                } MasterControl:_setMode
                Setting mcp to MC_Unload
                Setting mcp to MC_Unload
  (2)(1)Unloading: nixpkgs/16.09 (status: active) (fn: ProjectDIR/rt/cc/cc_mf/modules/nixpkgs/16.09.lua)
                Trying to unload: nixpkgs/16.09 sn: nixpkgs
                Master:unload: "nixpkgs/16.09" from file: "ProjectDIR/rt/cc/cc_mf/modules/nixpkgs/16.09.lua"
                loadModuleFile(ProjectDIR/rt/cc/cc_mf/modules/nixpkgs/16.09.lua){
                  ModuleFile{
                    local cc_cluster = os.getenv("CC_CLUSTER") or "computecanada"
                    local arch = os.getenv("RSNT_ARCH") or ""
                    local interconnect = os.getenv("RSNT_INTERCONNECT") or ""
                    if not arch or arch == "" then
                    	if cc_cluster == "cedar" or cc_cluster == "graham" or cc_cluster == "computecanada" then
                    		arch = "avx2"
                    	elseif cc_cluster == "beluga" then
                    		arch = "avx512"
                    	end
                    end
                    if not interconnect or interconnect == "" then
                    	if cc_cluster == "cedar" then
                    		interconnect = "omnipath"
                    	else
                    		interconnect = "infiniband"
                    	end
                    end
                    local generic_nixpkgs = true
                    local mroot = os.getenv("MODULEPATH_ROOT")
                    assert(loadfile(pathJoin(mroot,"modules/nixpkgs/16.09.lua.core")))(arch, interconnect, generic_nixpkgs)
                  } ModuleFile
                  help(...){
                  } help
                  whatis(Description: Nixpkgs is a collection of packages for the Nix package manager - Homepage: https://github.com/NixOS/nixpkgs){
                  } whatis
                  setenv(NIXUSER_PROFILE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09){
                    MasterControl:unsetenv("NIXUSER_PROFILE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09"){
                    } MasterControl:unsetenv
                  } setenv
                  prepend_path(PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/sbin){
                    MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/sbin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                    } MasterControl:remove_path
                  } prepend_path
                  prepend_path(PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin){
                    MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                    } MasterControl:remove_path
                  } prepend_path
                  prepend_path(PATH, /cvmfs/soft.computecanada.ca/custom/bin){
                    MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/custom/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                    } MasterControl:remove_path
                  } prepend_path
                  prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib){
                    MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib", delim=":", nodups="true", priority=0, where=first, force=nil}{
                    } MasterControl:remove_path
                  } prepend_path
                  prepend_path(C_INCLUDE_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include){
                    MasterControl:remove_path{"C_INCLUDE_PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include", delim=":", nodups="true", priority=0, where=first, force=nil}{
                    } MasterControl:remove_path
                  } prepend_path
                  prepend_path(CPLUS_INCLUDE_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include){
                    MasterControl:remove_path{"CPLUS_INCLUDE_PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include", delim=":", nodups="true", priority=0, where=first, force=nil}{
                    } MasterControl:remove_path
                  } prepend_path
                  prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/man){
                    MasterControl:remove_path{"MANPATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/man", delim=":", nodups="true", priority=0, where=first, force=nil}{
                    } MasterControl:remove_path
                  } prepend_path
                  prepend_path(ACLOCAL_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/aclocal){
                    MasterControl:remove_path{"ACLOCAL_PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/aclocal", delim=":", nodups="true", priority=0, where=first, force=nil}{
                    } MasterControl:remove_path
                  } prepend_path
                  prepend_path(PKG_CONFIG_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/pkgconfig){
                    MasterControl:remove_path{"PKG_CONFIG_PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/pkgconfig", delim=":", nodups="true", priority=0, where=first, force=nil}{
                    } MasterControl:remove_path
                  } prepend_path
                  setenv(FONTCONFIG_FILE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/etc/fonts/fonts.conf){
                    MasterControl:unsetenv("FONTCONFIG_FILE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/etc/fonts/fonts.conf"){
                    } MasterControl:unsetenv
                  } setenv
                  prepend_path(PYTHONPATH, /cvmfs/soft.computecanada.ca/custom/python/site-packages){
                    MasterControl:remove_path{"PYTHONPATH", "/cvmfs/soft.computecanada.ca/custom/python/site-packages", delim=":", nodups="true", priority=0, where=first, force=nil}{
                    } MasterControl:remove_path
                  } prepend_path
                  setenv(PERL5OPT, -I/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5 -I/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5/site_perl){
                    MasterControl:unsetenv("PERL5OPT", "-I/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5 -I/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5/site_perl"){
                    } MasterControl:unsetenv
                  } setenv
                  prepend_path(PERL5LIB, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5/site_perl){
                    MasterControl:remove_path{"PERL5LIB", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5/site_perl", delim=":", nodups="true", priority=0, where=first, force=nil}{
                    } MasterControl:remove_path
                  } prepend_path
                  prepend_path(PERL5LIB, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5){
                    MasterControl:remove_path{"PERL5LIB", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5", delim=":", nodups="true", priority=0, where=first, force=nil}{
                    } MasterControl:remove_path
                  } prepend_path
                  setenv(TZDIR, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/zoneinfo){
                    MasterControl:unsetenv("TZDIR", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/zoneinfo"){
                    } MasterControl:unsetenv
                  } setenv
                  setenv(SSL_CERT_FILE, /etc/pki/tls/certs/ca-bundle.crt){
                    MasterControl:unsetenv("SSL_CERT_FILE", "/etc/pki/tls/certs/ca-bundle.crt"){
                    } MasterControl:unsetenv
                  } setenv
                  setenv(CURL_CA_BUNDLE, /etc/pki/tls/certs/ca-bundle.crt){
                    MasterControl:unsetenv("CURL_CA_BUNDLE", "/etc/pki/tls/certs/ca-bundle.crt"){
                    } MasterControl:unsetenv
                  } setenv
                  setenv(PAGER, less -R){
                    MasterControl:unsetenv("PAGER", "less -R"){
                    } MasterControl:unsetenv
                  } setenv
                  setenv(LESSOPEN, |/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/lesspipe.sh %s){
                    MasterControl:unsetenv("LESSOPEN", "|/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/lesspipe.sh %s"){
                    } MasterControl:unsetenv
                  } setenv
                  setenv(LOCALE_ARCHIVE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/locale/locale-archive){
                    MasterControl:unsetenv("LOCALE_ARCHIVE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/locale/locale-archive"){
                    } MasterControl:unsetenv
                  } setenv
                  setenv(MXM_LOG_LEVEL, error){
                    MasterControl:unsetenv("MXM_LOG_LEVEL", "error"){
                    } MasterControl:unsetenv
                  } setenv
                  setenv(PIP_CONFIG_FILE, /cvmfs/soft.computecanada.ca/config/python/pip-avx512.conf){
                    MasterControl:unsetenv("PIP_CONFIG_FILE", "/cvmfs/soft.computecanada.ca/config/python/pip-avx512.conf"){
                    } MasterControl:unsetenv
                  } setenv
                  prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/bin){
                    MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                    } MasterControl:remove_path
                  } prepend_path
                  setenv(EASYBUILD_CONFIGFILES, /cvmfs/soft.computecanada.ca/easybuild/config.cfg){
                    MasterControl:unsetenv("EASYBUILD_CONFIGFILES", "/cvmfs/soft.computecanada.ca/easybuild/config.cfg"){
                    } MasterControl:unsetenv
                  } setenv
                  setenv(EASYBUILD_BUILDPATH, /dev/shm/mclay){
                    MasterControl:unsetenv("EASYBUILD_BUILDPATH", "/dev/shm/mclay"){
                    } MasterControl:unsetenv
                  } setenv
                  setenv(EBROOTNIXPKGS, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09){
                    MasterControl:unsetenv("EBROOTNIXPKGS", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09"){
                    } MasterControl:unsetenv
                  } setenv
                  setenv(EBVERSIONNIXPKGS, 16.09){
                    MasterControl:unsetenv("EBVERSIONNIXPKGS", "16.09"){
                    } MasterControl:unsetenv
                  } setenv
                  prepend_path(MODULEPATH, ProjectDIR/rt/cc/cc_mf/Core){
                    MasterControl:remove_path{"MODULEPATH", "ProjectDIR/rt/cc/cc_mf/Core", delim=":", nodups="true", priority=0, where=first, force=nil}{
    Removing: ProjectDIR/rt/cc/cc_mf/Core from MODULEPATH
                      chkMP("MODULEPATH", value: ProjectDIR/rt/cc/cc_mf/modules-avx512:ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1:ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4:ProjectDIR/rt/cc/cc_mf/modules, adding:false){
                        MT:set_MPATH_change_flag(self)
                        ModuleA:update(spider_cache=false){
                          Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules-avx512
                          Reusing mpath: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4
                          Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules
                        } ModuleA:update
                      } chkMP
                    } MasterControl:remove_path
                  } prepend_path
                  setenv(PROJECT, OutputDIR/project){
                    MasterControl:unsetenv("PROJECT", "OutputDIR/project"){
                    } MasterControl:unsetenv
                  } setenv
                  setenv(CC_PROJECT, OutputDIR/project){
                    MasterControl:unsetenv("CC_PROJECT", "OutputDIR/project"){
                    } MasterControl:unsetenv
                  } setenv
                  set_alias(quota, diskusage_report){
                    MasterControl:unset_alias("quota", "diskusage_report"){
                    } MasterControl:unset_alias
                  } set_alias
                } loadModuleFile
                safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): true
                Master:load calling reloadAll()
                Master:reloadAll(count: 2){
                  Setting mcp to MC_Load
  reloadAll(2)(gcccore/.5.4.0, icc/.2016.4.258, ifort/.2016.4.258, imkl/11.3.4.258, intel/2016.4, openmpi/2.1.1, StdEnv, arch/avx512)
                  Mname:sn(){
                  } Mname:sn
                  a[i].userName(1): gcccore/.5.4.0
                  adding sn: gcccore to mA
                  module sn: gcccore is active
                  userName(2):  gcccore/.5.4.0
                  Mname:fn(){
                    LocationT:new(moduleA){
                      LocationT build(moduleA){
                      } LocationT build
                    } LocationT:new
                  } Mname:fn
                  Mname:fullName(){
                  } Mname:fullName
                  Master:reloadAll fn_new: "false" mt:fileName(sn): "ProjectDIR/rt/cc/cc_mf/Core/gcccore/.5.4.0.lua" mt:userName(sn): "gcccore/.5.4.0" a[i].userName: "gcccore/.5.4.0"
                  Master:reloadAll(2): Unloading module: "gcccore"
                  Master:singleton(safe: nil){
                    s_master: table: 0x115ce70, safe: true
                  } Master:singleton
                  MasterControl:unload(mA={gcccore/.5.4.0}){
                    unRegisterUserLoads(mA){
                      userName: gcccore/.5.4.0
                    } unRegisterUserLoads
                    Master:unload(mA={gcccore/.5.4.0}){
                      MasterControl:_setMode("unload"){
                      } MasterControl:_setMode
                      Setting mcp to MC_Unload
                      Setting mcp to MC_Unload
  (3)(2)Unloading: gcccore/.5.4.0 (status: active) (fn: ProjectDIR/rt/cc/cc_mf/Core/gcccore/.5.4.0.lua)
                      Trying to unload: gcccore/.5.4.0 sn: gcccore
                      Master:unload: "gcccore/.5.4.0" from file: "ProjectDIR/rt/cc/cc_mf/Core/gcccore/.5.4.0.lua"
                      loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core/gcccore/.5.4.0.lua){
                        ModuleFile{
                          help([[
                          Description
                          ===========
                          The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,
                           as well as libraries for these languages (libstdc++, libgcj,...).
                          More information
                          ================
                           - Homepage: http://gcc.gnu.org/
                          ]])
                          whatis([[Description: The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,
                           as well as libraries for these languages (libstdc++, libgcj,...).]])
                          whatis([[Homepage: http://gcc.gnu.org/]])
                          local root = "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0"
                          conflict("gcccore")
                          prepend_path("CPATH", pathJoin(root, "include"))
                          prepend_path("LIBRARY_PATH", pathJoin(root, "lib"))
                          prepend_path("LIBRARY_PATH", pathJoin(root, "lib64"))
                          prepend_path("MANPATH", pathJoin(root, "share/man"))
                          prepend_path("PATH", pathJoin(root, "bin"))
                          setenv("EBROOTGCCCORE", root)
                          setenv("EBVERSIONGCCCORE", "5.4.0")
                          setenv("EBDEVELGCCCORE", pathJoin(root, "easybuild/Core-gcccore-.5.4.0-easybuild-devel"))
                          -- Built with EasyBuild version 3.3.0-re50b70af25207aec9b965a5c4aaa47ba992c9aa6
                        } ModuleFile
                        help(...){
                        } help
                        whatis(Description: The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,
 as well as libraries for these languages (libstdc++, libgcj,...).){
                        } whatis
                        whatis(Homepage: http://gcc.gnu.org/){
                        } whatis
                        conflict(gcccore){
                        }
                        prepend_path(CPATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/include){
                          MasterControl:remove_path{"CPATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/include", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/lib){
                          MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/lib", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/lib64){
                          MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/lib64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/share/man){
                          MasterControl:remove_path{"MANPATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/share/man", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        prepend_path(PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/bin){
                          MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        setenv(EBROOTGCCCORE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0){
                          MasterControl:unsetenv("EBROOTGCCCORE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0"){
                          } MasterControl:unsetenv
                        } setenv
                        setenv(EBVERSIONGCCCORE, 5.4.0){
                          MasterControl:unsetenv("EBVERSIONGCCCORE", "5.4.0"){
                          } MasterControl:unsetenv
                        } setenv
                        setenv(EBDEVELGCCCORE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/easybuild/Core-gcccore-.5.4.0-easybuild-devel){
                          MasterControl:unsetenv("EBDEVELGCCCORE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/easybuild/Core-gcccore-.5.4.0-easybuild-devel"){
                          } MasterControl:unsetenv
                        } setenv
                      } loadModuleFile
                      safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): true
                      Setting mcp to MC_Load
                    } Master:unload
                  } MasterControl:unload
                  Master:reloadAll(2): mt:userName(sn): "gcccore/.5.4.0"
                  Mname:sn(){
                  } Mname:sn
                  a[i].userName(1): icc/.2016.4.258
                  adding sn: icc to mA
                  module sn: icc is active
                  userName(2):  icc/.2016.4.258
                  Mname:fn(){
                  } Mname:fn
                  Mname:fullName(){
                  } Mname:fullName
                  Master:reloadAll fn_new: "false" mt:fileName(sn): "ProjectDIR/rt/cc/cc_mf/Core/icc/.2016.4.258.lua" mt:userName(sn): "icc/.2016.4.258" a[i].userName: "icc/.2016.4.258"
                  Master:reloadAll(2): Unloading module: "icc"
                  Master:singleton(safe: nil){
                    s_master: table: 0x115ce70, safe: true
                  } Master:singleton
                  MasterControl:unload(mA={icc/.2016.4.258}){
                    unRegisterUserLoads(mA){
                      userName: icc/.2016.4.258
                    } unRegisterUserLoads
                    Master:unload(mA={icc/.2016.4.258}){
                      MasterControl:_setMode("unload"){
                      } MasterControl:_setMode
                      Setting mcp to MC_Unload
                      Setting mcp to MC_Unload
  (4)(2)Unloading: icc/.2016.4.258 (status: active) (fn: ProjectDIR/rt/cc/cc_mf/Core/icc/.2016.4.258.lua)
                      Trying to unload: icc/.2016.4.258 sn: icc
                      Master:unload: "icc/.2016.4.258" from file: "ProjectDIR/rt/cc/cc_mf/Core/icc/.2016.4.258.lua"
                      loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core/icc/.2016.4.258.lua){
                        ModuleFile{
                          help([==[
                          Description
                          ===========
                          C and C++ compiler from Intel
                          More information
                          ================
                           - Homepage: http://software.intel.com/en-us/intel-compilers/
                          ]==])
                          whatis([==[Description: C and C++ compiler from Intel]==])
                          whatis([==[Homepage: http://software.intel.com/en-us/intel-compilers/]==])
                          local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258"
                          conflict("icc")
                          if not isloaded("gcccore/.5.4.0") or mode() == "unload" then
                              load("gcccore/.5.4.0")
                          end
                          prepend_path("LIBRARY_PATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64"))
                          prepend_path("MANPATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/man/common"))
                          prepend_path("PATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/bin/intel64"))
                          setenv("EBROOTICC", root)
                          setenv("EBVERSIONICC", "2016.4.258")
                          setenv("EBDEVELICC", pathJoin(root, "easybuild/Core-icc-.2016.4.258-easybuild-devel"))
                          prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                          -- Built with EasyBuild version 3.5.0-r9c88db64dba51c4ffd22799c06090d57aaf17e38
                        } ModuleFile
                        help(...){
                        } help
                        whatis(Description: C and C++ compiler from Intel){
                        } whatis
                        whatis(Homepage: http://software.intel.com/en-us/intel-compilers/){
                        } whatis
                        conflict(icc){
                        }
                        isloaded(gcccore/.5.4.0){
                        } isloaded
                        MName:isloaded(){
                          Mname:sn(){
                          } Mname:sn
                        } MName:isloaded
                        load_module(gcccore/.5.4.0){
                          cmd: load argA.n: 1
                          mcp:name(): MC_Unload
                          Master:singleton(safe: nil){
                            s_master: table: 0x115ce70, safe: true
                          } Master:singleton
                          MasterControl:unload(mA={gcccore/.5.4.0}){
                            unRegisterUserLoads(mA){
                              userName: gcccore/.5.4.0
                            } unRegisterUserLoads
                            Master:unload(mA={gcccore/.5.4.0}){
                              MasterControl:_setMode("unload"){
                              } MasterControl:_setMode
                              Setting mcp to MC_Unload
                              Setting mcp to MC_Unload
                              Mname:fullName(){
                              } Mname:fullName
                              Mname:sn(){
                              } Mname:sn
                              Mname:fn(){
                              } Mname:fn
    (5)(2)Unloading: gcccore/.5.4.0 (status: ) (fn: nil)
                              Trying to unload: gcccore/.5.4.0 sn: false
                              safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                              Setting mcp to MC_Unload
                            } Master:unload
                          } MasterControl:unload
                        } load_module
                        prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64){
                          MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/man/common){
                          MasterControl:remove_path{"MANPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/man/common", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64){
                          MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        setenv(EBROOTICC, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258){
                          MasterControl:unsetenv("EBROOTICC", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258"){
                          } MasterControl:unsetenv
                        } setenv
                        setenv(EBVERSIONICC, 2016.4.258){
                          MasterControl:unsetenv("EBVERSIONICC", "2016.4.258"){
                          } MasterControl:unsetenv
                        } setenv
                        setenv(EBDEVELICC, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/easybuild/Core-icc-.2016.4.258-easybuild-devel){
                          MasterControl:unsetenv("EBDEVELICC", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/easybuild/Core-icc-.2016.4.258-easybuild-devel"){
                          } MasterControl:unsetenv
                        } setenv
                        prepend_path(NLSPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/idb/intel64/locale/%l_%t/%N){
                          MasterControl:remove_path{"NLSPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                      } loadModuleFile
                      safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): true
                      Setting mcp to MC_Load
                    } Master:unload
                  } MasterControl:unload
                  Master:reloadAll(2): mt:userName(sn): "icc/.2016.4.258"
                  Mname:sn(){
                  } Mname:sn
                  a[i].userName(1): ifort/.2016.4.258
                  adding sn: ifort to mA
                  module sn: ifort is active
                  userName(2):  ifort/.2016.4.258
                  Mname:fn(){
                  } Mname:fn
                  Mname:fullName(){
                  } Mname:fullName
                  Master:reloadAll fn_new: "false" mt:fileName(sn): "ProjectDIR/rt/cc/cc_mf/Core/ifort/.2016.4.258.lua" mt:userName(sn): "ifort/.2016.4.258" a[i].userName: "ifort/.2016.4.258"
                  Master:reloadAll(2): Unloading module: "ifort"
                  Master:singleton(safe: nil){
                    s_master: table: 0x115ce70, safe: true
                  } Master:singleton
                  MasterControl:unload(mA={ifort/.2016.4.258}){
                    unRegisterUserLoads(mA){
                      userName: ifort/.2016.4.258
                    } unRegisterUserLoads
                    Master:unload(mA={ifort/.2016.4.258}){
                      MasterControl:_setMode("unload"){
                      } MasterControl:_setMode
                      Setting mcp to MC_Unload
                      Setting mcp to MC_Unload
  (6)(2)Unloading: ifort/.2016.4.258 (status: active) (fn: ProjectDIR/rt/cc/cc_mf/Core/ifort/.2016.4.258.lua)
                      Trying to unload: ifort/.2016.4.258 sn: ifort
                      Master:unload: "ifort/.2016.4.258" from file: "ProjectDIR/rt/cc/cc_mf/Core/ifort/.2016.4.258.lua"
                      loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core/ifort/.2016.4.258.lua){
                        ModuleFile{
                          help([==[
                          Description
                          ===========
                          Fortran compiler from Intel
                          More information
                          ================
                           - Homepage: http://software.intel.com/en-us/intel-compilers/
                          ]==])
                          whatis([==[Description: Fortran compiler from Intel]==])
                          whatis([==[Homepage: http://software.intel.com/en-us/intel-compilers/]==])
                          local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258"
                          conflict("ifort")
                          if not isloaded("gcccore/.5.4.0") or mode() == "unload" then
                              load("gcccore/.5.4.0")
                          end
                          prepend_path("LIBRARY_PATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64"))
                          prepend_path("MANPATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/man/common"))
                          prepend_path("PATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/bin/intel64"))
                          setenv("EBROOTIFORT", root)
                          setenv("EBVERSIONIFORT", "2016.4.258")
                          setenv("EBDEVELIFORT", pathJoin(root, "easybuild/Core-ifort-.2016.4.258-easybuild-devel"))
                          prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                          -- Built with EasyBuild version 3.5.0-r9c88db64dba51c4ffd22799c06090d57aaf17e38
                        } ModuleFile
                        help(...){
                        } help
                        whatis(Description: Fortran compiler from Intel){
                        } whatis
                        whatis(Homepage: http://software.intel.com/en-us/intel-compilers/){
                        } whatis
                        conflict(ifort){
                        }
                        isloaded(gcccore/.5.4.0){
                        } isloaded
                        MName:isloaded(){
                          Mname:sn(){
                          } Mname:sn
                        } MName:isloaded
                        load_module(gcccore/.5.4.0){
                          cmd: load argA.n: 1
                          mcp:name(): MC_Unload
                          Master:singleton(safe: nil){
                            s_master: table: 0x115ce70, safe: true
                          } Master:singleton
                          MasterControl:unload(mA={gcccore/.5.4.0}){
                            unRegisterUserLoads(mA){
                              userName: gcccore/.5.4.0
                            } unRegisterUserLoads
                            Master:unload(mA={gcccore/.5.4.0}){
                              MasterControl:_setMode("unload"){
                              } MasterControl:_setMode
                              Setting mcp to MC_Unload
                              Setting mcp to MC_Unload
                              Mname:fullName(){
                              } Mname:fullName
                              Mname:sn(){
                              } Mname:sn
                              Mname:fn(){
                              } Mname:fn
    (7)(2)Unloading: gcccore/.5.4.0 (status: ) (fn: nil)
                              Trying to unload: gcccore/.5.4.0 sn: false
                              safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                              Setting mcp to MC_Unload
                            } Master:unload
                          } MasterControl:unload
                        } load_module
                        prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64){
                          MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/man/common){
                          MasterControl:remove_path{"MANPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/man/common", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64){
                          MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        setenv(EBROOTIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258){
                          MasterControl:unsetenv("EBROOTIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258"){
                          } MasterControl:unsetenv
                        } setenv
                        setenv(EBVERSIONIFORT, 2016.4.258){
                          MasterControl:unsetenv("EBVERSIONIFORT", "2016.4.258"){
                          } MasterControl:unsetenv
                        } setenv
                        setenv(EBDEVELIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/easybuild/Core-ifort-.2016.4.258-easybuild-devel){
                          MasterControl:unsetenv("EBDEVELIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/easybuild/Core-ifort-.2016.4.258-easybuild-devel"){
                          } MasterControl:unsetenv
                        } setenv
                        prepend_path(NLSPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/idb/intel64/locale/%l_%t/%N){
                          MasterControl:remove_path{"NLSPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                      } loadModuleFile
                      safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): true
                      Setting mcp to MC_Load
                    } Master:unload
                  } MasterControl:unload
                  Master:reloadAll(2): mt:userName(sn): "ifort/.2016.4.258"
                  Mname:sn(){
                  } Mname:sn
                  a[i].userName(1): imkl/11.3.4.258
                  adding sn: imkl to mA
                  module sn: imkl is active
                  userName(2):  imkl/11.3.4.258
                  Mname:fn(){
                  } Mname:fn
                  Mname:fullName(){
                  } Mname:fullName
                  Master:reloadAll fn_new: "false" mt:fileName(sn): "ProjectDIR/rt/cc/cc_mf/Core/imkl/11.3.4.258.lua" mt:userName(sn): "imkl/11.3.4.258" a[i].userName: "imkl/11.3.4.258"
                  Master:reloadAll(2): Unloading module: "imkl"
                  Master:singleton(safe: nil){
                    s_master: table: 0x115ce70, safe: true
                  } Master:singleton
                  MasterControl:unload(mA={imkl/11.3.4.258}){
                    unRegisterUserLoads(mA){
                      userName: imkl/11.3.4.258
                    } unRegisterUserLoads
                    Master:unload(mA={imkl/11.3.4.258}){
                      MasterControl:_setMode("unload"){
                      } MasterControl:_setMode
                      Setting mcp to MC_Unload
                      Setting mcp to MC_Unload
  (8)(2)Unloading: imkl/11.3.4.258 (status: active) (fn: ProjectDIR/rt/cc/cc_mf/Core/imkl/11.3.4.258.lua)
                      Trying to unload: imkl/11.3.4.258 sn: imkl
                      Master:unload: "imkl/11.3.4.258" from file: "ProjectDIR/rt/cc/cc_mf/Core/imkl/11.3.4.258.lua"
                      loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core/imkl/11.3.4.258.lua){
                        ModuleFile{
                          help([==[
                          Description
                          ===========
                          Intel Math Kernel Library is a library of highly optimized,
                           extensively threaded math routines for science, engineering, and financial
                           applications that require maximum performance. Core math functions include
                           BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.
                          More information
                          ================
                           - Homepage: http://software.intel.com/en-us/intel-mkl/
                          ]==])
                          whatis([==[Description: Intel Math Kernel Library is a library of highly optimized,
                           extensively threaded math routines for science, engineering, and financial
                           applications that require maximum performance. Core math functions include
                           BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.]==])
                          whatis([==[Homepage: http://software.intel.com/en-us/intel-mkl/]==])
                          local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258"
                          conflict("imkl")
                          prepend_path("CPATH", pathJoin(root, "mkl/include"))
                          prepend_path("CPATH", pathJoin(root, "mkl/include/fftw"))
                          prepend_path("LIBRARY_PATH", pathJoin(root, "lib/intel64"))
                          prepend_path("LIBRARY_PATH", pathJoin(root, "mkl/lib/intel64"))
                          prepend_path("MIC_LD_LIBRARY_PATH", pathJoin(root, "lib/intel64_lin_mic"))
                          prepend_path("MIC_LD_LIBRARY_PATH", pathJoin(root, "mkl/lib/mic"))
                          prepend_path("PATH", pathJoin(root, "bin"))
                          prepend_path("PATH", pathJoin(root, "mkl/bin"))
                          setenv("EBROOTIMKL", root)
                          setenv("EBVERSIONIMKL", "11.3.4.258")
                          setenv("EBDEVELIMKL", pathJoin(root, "easybuild/Core-imkl-11.3.4.258-easybuild-devel"))
                          setenv("MKL_ENABLE_INSTRUCTIONS", "AVX512")
                          setenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/")
                          prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                          setenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl")
                          -- Built with EasyBuild version 3.6.2-r7ac096157987d9f8fad6490e41038c31790fa6ee
                        } ModuleFile
                        help(...){
                        } help
                        whatis(Description: Intel Math Kernel Library is a library of highly optimized,
 extensively threaded math routines for science, engineering, and financial
 applications that require maximum performance. Core math functions include
 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.){
                        } whatis
                        whatis(Homepage: http://software.intel.com/en-us/intel-mkl/){
                        } whatis
                        conflict(imkl){
                        }
                        prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include){
                          MasterControl:remove_path{"CPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include/fftw){
                          MasterControl:remove_path{"CPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include/fftw", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64){
                          MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/intel64){
                          MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        prepend_path(MIC_LD_LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64_lin_mic){
                          MasterControl:remove_path{"MIC_LD_LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64_lin_mic", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        prepend_path(MIC_LD_LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/mic){
                          MasterControl:remove_path{"MIC_LD_LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/mic", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/bin){
                          MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/bin){
                          MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        setenv(EBROOTIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258){
                          MasterControl:unsetenv("EBROOTIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258"){
                          } MasterControl:unsetenv
                        } setenv
                        setenv(EBVERSIONIMKL, 11.3.4.258){
                          MasterControl:unsetenv("EBVERSIONIMKL", "11.3.4.258"){
                          } MasterControl:unsetenv
                        } setenv
                        setenv(EBDEVELIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/easybuild/Core-imkl-11.3.4.258-easybuild-devel){
                          MasterControl:unsetenv("EBDEVELIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/easybuild/Core-imkl-11.3.4.258-easybuild-devel"){
                          } MasterControl:unsetenv
                        } setenv
                        setenv(MKL_ENABLE_INSTRUCTIONS, AVX512){
                          MasterControl:unsetenv("MKL_ENABLE_INSTRUCTIONS", "AVX512"){
                          } MasterControl:unsetenv
                        } setenv
                        setenv(MKL_EXAMPLES, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/){
                          MasterControl:unsetenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/"){
                          } MasterControl:unsetenv
                        } setenv
                        prepend_path(NLSPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/idb/intel64/locale/%l_%t/%N){
                          MasterControl:remove_path{"NLSPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        setenv(MKLROOT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl){
                          MasterControl:unsetenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl"){
                          } MasterControl:unsetenv
                        } setenv
                      } loadModuleFile
                      safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): true
                      Setting mcp to MC_Load
                    } Master:unload
                  } MasterControl:unload
                  Master:reloadAll(2): mt:userName(sn): "imkl/11.3.4.258"
                  Mname:sn(){
                  } Mname:sn
                  a[i].userName(1): intel/2016.4
                  adding sn: intel to mA
                  module sn: intel is active
                  userName(2):  intel/2016.4
                  Mname:fn(){
                  } Mname:fn
                  Mname:fullName(){
                  } Mname:fullName
                  Master:reloadAll fn_new: "false" mt:fileName(sn): "ProjectDIR/rt/cc/cc_mf/Core/intel/2016.4.lua" mt:userName(sn): "intel/2016.4" a[i].userName: "intel/2016.4"
                  Master:reloadAll(2): Unloading module: "intel"
                  Master:singleton(safe: nil){
                    s_master: table: 0x115ce70, safe: true
                  } Master:singleton
                  MasterControl:unload(mA={intel/2016.4}){
                    unRegisterUserLoads(mA){
                      userName: intel/2016.4
                    } unRegisterUserLoads
                    Master:unload(mA={intel/2016.4}){
                      MasterControl:_setMode("unload"){
                      } MasterControl:_setMode
                      Setting mcp to MC_Unload
                      Setting mcp to MC_Unload
  (9)(2)Unloading: intel/2016.4 (status: active) (fn: ProjectDIR/rt/cc/cc_mf/Core/intel/2016.4.lua)
                      Trying to unload: intel/2016.4 sn: intel
                      Master:unload: "intel/2016.4" from file: "ProjectDIR/rt/cc/cc_mf/Core/intel/2016.4.lua"
                      loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core/intel/2016.4.lua){
                        ModuleFile{
                          help([==[
                          Description
                          ===========
                          Intel Cluster Toolkit Compiler Edition provides Intel C,C++ and fortran compilers, Intel MPI and Intel MKL
                          More information
                          ================
                           - Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/
                          ]==])
                          whatis([==[Description: Intel Cluster Toolkit Compiler Edition provides Intel C,C++ and fortran compilers, Intel MPI and Intel MKL]==])
                          whatis([==[Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/]==])
                          local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4"
                          conflict("intel")
                          if not isloaded("icc/.2016.4.258") or mode() == "unload" then
                              load("icc/.2016.4.258")
                          end
                          if not isloaded("ifort/.2016.4.258") or mode() == "unload" then
                              load("ifort/.2016.4.258")
                          end
                          setenv("EBROOTICCIFORT", root)
                          setenv("EBVERSIONICCIFORT", "2016.4")
                          setenv("EBDEVELICCIFORT", pathJoin(root, "easybuild/Core-intel-2016.4-easybuild-devel"))
                          if isloaded("imkl") then
                              always_load("imkl/11.3.4.258")
                          end
                          prepend_path("INTEL_LICENSE_FILE", pathJoin("/cvmfs/soft.computecanada.ca/config/licenses/intel", os.getenv("CC_CLUSTER") .. ".lic"))
                          local mroot = os.getenv("MODULEPATH_ROOT")
                          prepend_path("MODULEPATH", pathJoin(pathJoin(mroot, os.getenv("RSNT_ARCH"), "Compiler/intel2016.4")))
                          family("compiler")
                          -- Built with EasyBuild version 3.5.0-r9c88db64dba51c4ffd22799c06090d57aaf17e38
                        } ModuleFile
                        help(...){
                        } help
                        whatis(Description: Intel Cluster Toolkit Compiler Edition provides Intel C,C++ and fortran compilers, Intel MPI and Intel MKL){
                        } whatis
                        whatis(Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/){
                        } whatis
                        conflict(intel){
                        }
                        isloaded(icc/.2016.4.258){
                        } isloaded
                        MName:isloaded(){
                          Mname:sn(){
                          } Mname:sn
                        } MName:isloaded
                        load_module(icc/.2016.4.258){
                          cmd: load argA.n: 1
                          mcp:name(): MC_Unload
                          Master:singleton(safe: nil){
                            s_master: table: 0x115ce70, safe: true
                          } Master:singleton
                          MasterControl:unload(mA={icc/.2016.4.258}){
                            unRegisterUserLoads(mA){
                              userName: icc/.2016.4.258
                            } unRegisterUserLoads
                            Master:unload(mA={icc/.2016.4.258}){
                              MasterControl:_setMode("unload"){
                              } MasterControl:_setMode
                              Setting mcp to MC_Unload
                              Setting mcp to MC_Unload
                              Mname:fullName(){
                              } Mname:fullName
                              Mname:sn(){
                              } Mname:sn
                              Mname:fn(){
                              } Mname:fn
    (10)(2)Unloading: icc/.2016.4.258 (status: ) (fn: nil)
                              Trying to unload: icc/.2016.4.258 sn: false
                              safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                              Setting mcp to MC_Unload
                            } Master:unload
                          } MasterControl:unload
                        } load_module
                        isloaded(ifort/.2016.4.258){
                        } isloaded
                        MName:isloaded(){
                          Mname:sn(){
                          } Mname:sn
                        } MName:isloaded
                        load_module(ifort/.2016.4.258){
                          cmd: load argA.n: 1
                          mcp:name(): MC_Unload
                          Master:singleton(safe: nil){
                            s_master: table: 0x115ce70, safe: true
                          } Master:singleton
                          MasterControl:unload(mA={ifort/.2016.4.258}){
                            unRegisterUserLoads(mA){
                              userName: ifort/.2016.4.258
                            } unRegisterUserLoads
                            Master:unload(mA={ifort/.2016.4.258}){
                              MasterControl:_setMode("unload"){
                              } MasterControl:_setMode
                              Setting mcp to MC_Unload
                              Setting mcp to MC_Unload
                              Mname:fullName(){
                              } Mname:fullName
                              Mname:sn(){
                              } Mname:sn
                              Mname:fn(){
                              } Mname:fn
    (11)(2)Unloading: ifort/.2016.4.258 (status: ) (fn: nil)
                              Trying to unload: ifort/.2016.4.258 sn: false
                              safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                              Setting mcp to MC_Unload
                            } Master:unload
                          } MasterControl:unload
                        } load_module
                        setenv(EBROOTICCIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4){
                          MasterControl:unsetenv("EBROOTICCIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4"){
                          } MasterControl:unsetenv
                        } setenv
                        setenv(EBVERSIONICCIFORT, 2016.4){
                          MasterControl:unsetenv("EBVERSIONICCIFORT", "2016.4"){
                          } MasterControl:unsetenv
                        } setenv
                        setenv(EBDEVELICCIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4/easybuild/Core-intel-2016.4-easybuild-devel){
                          MasterControl:unsetenv("EBDEVELICCIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4/easybuild/Core-intel-2016.4-easybuild-devel"){
                          } MasterControl:unsetenv
                        } setenv
                        isloaded(imkl){
                        } isloaded
                        MName:isloaded(){
                          Mname:sn(){
                          } Mname:sn
                        } MName:isloaded
                        prepend_path(INTEL_LICENSE_FILE, /cvmfs/soft.computecanada.ca/config/licenses/intel/computecanada.lic){
                          MasterControl:remove_path{"INTEL_LICENSE_FILE", "/cvmfs/soft.computecanada.ca/config/licenses/intel/computecanada.lic", delim=":", nodups="true", priority=0, where=first, force=nil}{
                          } MasterControl:remove_path
                        } prepend_path
                        prepend_path(MODULEPATH, ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4){
                          MasterControl:remove_path{"MODULEPATH", "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4", delim=":", nodups="true", priority=0, where=first, force=nil}{
    Removing: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4 from MODULEPATH
                            chkMP("MODULEPATH", value: ProjectDIR/rt/cc/cc_mf/modules-avx512:ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1:ProjectDIR/rt/cc/cc_mf/modules, adding:false){
                              MT:set_MPATH_change_flag(self)
                              ModuleA:update(spider_cache=false){
                                Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules-avx512
                                Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules
                              } ModuleA:update
                            } chkMP
                          } MasterControl:remove_path
                        } prepend_path
                        family(compiler){
                          MasterControl:unset_family(compiler){
                            MasterControl:unsetenv("LMOD_FAMILY_COMPILER", ""){
                            } MasterControl:unsetenv
                            MasterControl:unsetenv("LMOD_FAMILY_COMPILER_VERSION", ""){
                            } MasterControl:unsetenv
                            MasterControl:unsetenv("LMOD_FAMILY_COMPILER", ""){
                            } MasterControl:unsetenv
                            MasterControl:unsetenv("LMOD_FAMILY_COMPILER_VERSION", ""){
                            } MasterControl:unsetenv
                          } MasterControl:unset_family
                        } family
                      } loadModuleFile
                      safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): true
                      Master:load calling reloadAll()
                      Master:reloadAll(count: 3){
                        Setting mcp to MC_Load
  reloadAll(3)(openmpi/2.1.1, StdEnv, arch/avx512)
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): openmpi/2.1.1
                        adding sn: openmpi to mA
                        module sn: openmpi is active
                        userName(2):  openmpi/2.1.1
                        Mname:fn(){
                          LocationT:new(moduleA){
                            LocationT build(moduleA){
                            } LocationT build
                          } LocationT:new
                        } Mname:fn
                        Mname:fullName(){
                        } Mname:fullName
                        Master:reloadAll fn_new: "false" mt:fileName(sn): "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua" mt:userName(sn): "openmpi/2.1.1" a[i].userName: "openmpi/2.1.1"
                        Master:reloadAll(3): Unloading module: "openmpi"
                        Master:singleton(safe: nil){
                          s_master: table: 0x115ce70, safe: true
                        } Master:singleton
                        MasterControl:unload(mA={openmpi/2.1.1}){
                          unRegisterUserLoads(mA){
                            userName: openmpi/2.1.1
                          } unRegisterUserLoads
                          Master:unload(mA={openmpi/2.1.1}){
                            MasterControl:_setMode("unload"){
                            } MasterControl:_setMode
                            Setting mcp to MC_Unload
                            Setting mcp to MC_Unload
  (12)(3)Unloading: openmpi/2.1.1 (status: active) (fn: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua)
                            Trying to unload: openmpi/2.1.1 sn: openmpi
                            Master:unload: "openmpi/2.1.1" from file: "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua"
                            loadModuleFile(ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua){
                              ModuleFile{
                                help([==[
                                Description
                                ===========
                                The Open MPI Project is an open source MPI-2 implementation.
                                More information
                                ================
                                 - Homepage: http://www.open-mpi.org/
                                ]==])
                                whatis([==[Description: The Open MPI Project is an open source MPI-2 implementation.]==])
                                whatis([==[Homepage: http://www.open-mpi.org/]==])
                                local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1"
                                conflict("openmpi")
                                local mroot = os.getenv("MODULEPATH_ROOT")
                                prepend_path("MODULEPATH", pathJoin(mroot,"avx512/MPI/intel2016.4/openmpi2.1"))
                                prepend_path("CPATH", pathJoin(root, "include"))
                                prepend_path("LIBRARY_PATH", pathJoin(root, "lib"))
                                prepend_path("MANPATH", pathJoin(root, "share/man"))
                                prepend_path("PATH", pathJoin(root, "bin"))
                                prepend_path("PKG_CONFIG_PATH", pathJoin(root, "lib/pkgconfig"))
                                setenv("EBROOTOPENMPI", root)
                                setenv("EBVERSIONOPENMPI", "2.1.1")
                                setenv("EBDEVELOPENMPI", pathJoin(root, "easybuild/avx512-Compiler-intel2016.4-openmpi-2.1.1-easybuild-devel"))
                                if os.getenv("RSNT_INTERCONNECT") == "omnipath" then
                                        setenv("OMPI_MCA_mtl", "^mxm")
                                        setenv("OMPI_MCA_pml", "^yalla")
                                end
                                family("mpi")
                                -- Built with EasyBuild version 3.6.0
                              } ModuleFile
                              help(...){
                              } help
                              whatis(Description: The Open MPI Project is an open source MPI-2 implementation.){
                              } whatis
                              whatis(Homepage: http://www.open-mpi.org/){
                              } whatis
                              conflict(openmpi){
                              }
                              prepend_path(MODULEPATH, ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1){
                                MasterControl:remove_path{"MODULEPATH", "ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1", delim=":", nodups="true", priority=0, where=first, force=nil}{
    Removing: ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1 from MODULEPATH
                                  chkMP("MODULEPATH", value: ProjectDIR/rt/cc/cc_mf/modules-avx512:ProjectDIR/rt/cc/cc_mf/modules, adding:false){
                                    MT:set_MPATH_change_flag(self)
                                    ModuleA:update(spider_cache=false){
                                      Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules-avx512
                                      Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules
                                    } ModuleA:update
                                  } chkMP
                                } MasterControl:remove_path
                              } prepend_path
                              prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/include){
                                MasterControl:remove_path{"CPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/include", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                } MasterControl:remove_path
                              } prepend_path
                              prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/lib){
                                MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/lib", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                } MasterControl:remove_path
                              } prepend_path
                              prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/share/man){
                                MasterControl:remove_path{"MANPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/share/man", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                } MasterControl:remove_path
                              } prepend_path
                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/bin){
                                MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                } MasterControl:remove_path
                              } prepend_path
                              prepend_path(PKG_CONFIG_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/lib/pkgconfig){
                                MasterControl:remove_path{"PKG_CONFIG_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/lib/pkgconfig", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                } MasterControl:remove_path
                              } prepend_path
                              setenv(EBROOTOPENMPI, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1){
                                MasterControl:unsetenv("EBROOTOPENMPI", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1"){
                                } MasterControl:unsetenv
                              } setenv
                              setenv(EBVERSIONOPENMPI, 2.1.1){
                                MasterControl:unsetenv("EBVERSIONOPENMPI", "2.1.1"){
                                } MasterControl:unsetenv
                              } setenv
                              setenv(EBDEVELOPENMPI, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/easybuild/avx512-Compiler-intel2016.4-openmpi-2.1.1-easybuild-devel){
                                MasterControl:unsetenv("EBDEVELOPENMPI", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/easybuild/avx512-Compiler-intel2016.4-openmpi-2.1.1-easybuild-devel"){
                                } MasterControl:unsetenv
                              } setenv
                              family(mpi){
                                MasterControl:unset_family(mpi){
                                  MasterControl:unsetenv("LMOD_FAMILY_MPI", ""){
                                  } MasterControl:unsetenv
                                  MasterControl:unsetenv("LMOD_FAMILY_MPI_VERSION", ""){
                                  } MasterControl:unsetenv
                                  MasterControl:unsetenv("LMOD_FAMILY_MPI", ""){
                                  } MasterControl:unsetenv
                                  MasterControl:unsetenv("LMOD_FAMILY_MPI_VERSION", ""){
                                  } MasterControl:unsetenv
                                } MasterControl:unset_family
                              } family
                            } loadModuleFile
                            safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): true
                            Master:load calling reloadAll()
                            Master:reloadAll(count: 4){
                              Setting mcp to MC_Load
  reloadAll(4)(StdEnv, arch/avx512)
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): StdEnv
                              adding sn: StdEnv to mA
                              module sn: StdEnv is active
                              userName(2):  StdEnv
                              Mname:fn(){
                                LocationT:new(moduleA){
                                  LocationT build(moduleA){
                                  } LocationT build
                                } LocationT:new
                              } Mname:fn
                              Master:reloadAll fn_new: "ProjectDIR/rt/cc/cc_mf/modules-avx512/StdEnv/2018.3.lua" mt:fileName(sn): "ProjectDIR/rt/cc/cc_mf/modules/StdEnv/2016.4.lua" mt:userName(sn): "StdEnv" a[i].userName: "StdEnv"
                              Master:reloadAll(4): Unloading module: "StdEnv"
                              Master:singleton(safe: nil){
                                s_master: table: 0x115ce70, safe: true
                              } Master:singleton
                              MasterControl:unload(mA={StdEnv}){
                                unRegisterUserLoads(mA){
                                  userName: StdEnv
                                } unRegisterUserLoads
                                Master:unload(mA={StdEnv}){
                                  MasterControl:_setMode("unload"){
                                  } MasterControl:_setMode
                                  Setting mcp to MC_Unload
                                  Setting mcp to MC_Unload
  (13)(4)Unloading: StdEnv (status: active) (fn: ProjectDIR/rt/cc/cc_mf/modules/StdEnv/2016.4.lua)
                                  Trying to unload: StdEnv sn: StdEnv
                                  Master:unload: "StdEnv" from file: "ProjectDIR/rt/cc/cc_mf/modules/StdEnv/2016.4.lua"
                                  loadModuleFile(ProjectDIR/rt/cc/cc_mf/modules/StdEnv/2016.4.lua){
                                    ModuleFile{
                                      --add_property(   "lmod", "sticky")
                                      local root = "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09"
                                      require("os")
                                      load("nixpkgs/16.09")
                                      load("imkl/11.3.4.258")
                                      load("intel/2016.4")
                                      load("openmpi/2.1.1")
                                    } ModuleFile
                                    load_module(nixpkgs/16.09){
                                      cmd: load argA.n: 1
                                      mcp:name(): MC_Unload
                                      Master:singleton(safe: nil){
                                        s_master: table: 0x115ce70, safe: true
                                      } Master:singleton
                                      MasterControl:unload(mA={nixpkgs/16.09}){
                                        unRegisterUserLoads(mA){
                                          userName: nixpkgs/16.09
                                        } unRegisterUserLoads
                                        Master:unload(mA={nixpkgs/16.09}){
                                          MasterControl:_setMode("unload"){
                                          } MasterControl:_setMode
                                          Setting mcp to MC_Unload
                                          Setting mcp to MC_Unload
                                          Mname:fullName(){
                                          } Mname:fullName
                                          Mname:sn(){
                                          } Mname:sn
                                          Mname:fn(){
                                          } Mname:fn
    (14)(4)Unloading: nixpkgs/16.09 (status: ) (fn: nil)
                                          Trying to unload: nixpkgs/16.09 sn: false
                                          safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                          Setting mcp to MC_Unload
                                        } Master:unload
                                      } MasterControl:unload
                                    } load_module
                                    load_module(imkl/11.3.4.258){
                                      cmd: load argA.n: 1
                                      mcp:name(): MC_Unload
                                      Master:singleton(safe: nil){
                                        s_master: table: 0x115ce70, safe: true
                                      } Master:singleton
                                      MasterControl:unload(mA={imkl/11.3.4.258}){
                                        unRegisterUserLoads(mA){
                                          userName: imkl/11.3.4.258
                                        } unRegisterUserLoads
                                        Master:unload(mA={imkl/11.3.4.258}){
                                          MasterControl:_setMode("unload"){
                                          } MasterControl:_setMode
                                          Setting mcp to MC_Unload
                                          Setting mcp to MC_Unload
                                          Mname:fullName(){
                                          } Mname:fullName
                                          Mname:sn(){
                                          } Mname:sn
                                          Mname:fn(){
                                          } Mname:fn
    (15)(4)Unloading: imkl/11.3.4.258 (status: ) (fn: nil)
                                          Trying to unload: imkl/11.3.4.258 sn: false
                                          safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                          Setting mcp to MC_Unload
                                        } Master:unload
                                      } MasterControl:unload
                                    } load_module
                                    load_module(intel/2016.4){
                                      cmd: load argA.n: 1
                                      mcp:name(): MC_Unload
                                      Master:singleton(safe: nil){
                                        s_master: table: 0x115ce70, safe: true
                                      } Master:singleton
                                      MasterControl:unload(mA={intel/2016.4}){
                                        unRegisterUserLoads(mA){
                                          userName: intel/2016.4
                                        } unRegisterUserLoads
                                        Master:unload(mA={intel/2016.4}){
                                          MasterControl:_setMode("unload"){
                                          } MasterControl:_setMode
                                          Setting mcp to MC_Unload
                                          Setting mcp to MC_Unload
                                          Mname:fullName(){
                                          } Mname:fullName
                                          Mname:sn(){
                                          } Mname:sn
                                          Mname:fn(){
                                          } Mname:fn
    (16)(4)Unloading: intel/2016.4 (status: ) (fn: nil)
                                          Trying to unload: intel/2016.4 sn: false
                                          safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                          Setting mcp to MC_Unload
                                        } Master:unload
                                      } MasterControl:unload
                                    } load_module
                                    load_module(openmpi/2.1.1){
                                      cmd: load argA.n: 1
                                      mcp:name(): MC_Unload
                                      Master:singleton(safe: nil){
                                        s_master: table: 0x115ce70, safe: true
                                      } Master:singleton
                                      MasterControl:unload(mA={openmpi/2.1.1}){
                                        unRegisterUserLoads(mA){
                                          userName: openmpi/2.1.1
                                        } unRegisterUserLoads
                                        Master:unload(mA={openmpi/2.1.1}){
                                          MasterControl:_setMode("unload"){
                                          } MasterControl:_setMode
                                          Setting mcp to MC_Unload
                                          Setting mcp to MC_Unload
                                          Mname:fullName(){
                                          } Mname:fullName
                                          Mname:sn(){
                                          } Mname:sn
                                          Mname:fn(){
                                          } Mname:fn
    (17)(4)Unloading: openmpi/2.1.1 (status: ) (fn: nil)
                                          Trying to unload: openmpi/2.1.1 sn: false
                                          safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                          Setting mcp to MC_Unload
                                        } Master:unload
                                      } MasterControl:unload
                                    } load_module
                                  } loadModuleFile
                                  safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): true
                                  Setting mcp to MC_Load
                                } Master:unload
                              } MasterControl:unload
                              Master:reloadAll(4): mt:userName(sn): "StdEnv"
                              Master:reloadAll(4): Loading module: "StdEnv"
                              MasterControl:load(mA={StdEnv}){
                                Master:singleton(safe: nil){
                                  s_master: table: 0x115ce70, safe: true
                                } Master:singleton
                                Master:load(mA={StdEnv}){
                                  Master:load i: 1, userName: StdEnv
  (18)(4)Loading: StdEnv (fn: ProjectDIR/rt/cc/cc_mf/modules-avx512/StdEnv/2018.3.lua, using Find-Best)
                                  Master:load i: 1 sn: StdEnv fn: ProjectDIR/rt/cc/cc_mf/modules-avx512/StdEnv/2018.3.lua
                                  Master:loading: "StdEnv" from file: "ProjectDIR/rt/cc/cc_mf/modules-avx512/StdEnv/2018.3.lua"
                                  loadModuleFile(ProjectDIR/rt/cc/cc_mf/modules-avx512/StdEnv/2018.3.lua){
                                    ModuleFile{
                                      --add_property(   "lmod", "sticky")
                                      local root = "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09"
                                      require("os")
                                      load("nixpkgs/16.09")
                                      load("imkl/2018.3.222")
                                      load("intel/2018.3")
                                      load("openmpi/3.1.2")
                                    } ModuleFile
                                    load_module(nixpkgs/16.09){
                                      cmd: load argA.n: 1
                                      mcp:name(): MC_Load
                                      MasterControl:load_usr(mA={nixpkgs/16.09}){
                                        registerUserLoads(mA){
                                          userName: nixpkgs/16.09
                                        } registerUserLoads
                                        MasterControl:load(mA={nixpkgs/16.09}){
                                          Master:singleton(safe: nil){
                                            s_master: table: 0x115ce70, safe: true
                                          } Master:singleton
                                          Master:load(mA={nixpkgs/16.09}){
                                            Master:load i: 1, userName: nixpkgs/16.09
                                            Mname:sn(){
                                            } Mname:sn
    (19)(4)Loading: nixpkgs/16.09 (fn: ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua, using Find-Best)
                                            Master:load i: 1 sn: nixpkgs fn: ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua
                                            Master:loading: "nixpkgs/16.09" from file: "ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua"
                                            loadModuleFile(ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua){
                                              ModuleFile{
                                                local cc_cluster = os.getenv("CC_CLUSTER") or "computecanada"
                                                local arch = "avx512"
                                                local interconnect = os.getenv("RSNT_INTERCONNECT") or ""
                                                if not interconnect or interconnect == "" then
                                                	if cc_cluster == "cedar" then
                                                		interconnect = "omnipath"
                                                	else
                                                		interconnect = "infiniband"
                                                	end
                                                end
                                                local generic_nixpkgs = false
                                                local mroot = os.getenv("MODULEPATH_ROOT")
                                                assert(loadfile(pathJoin(mroot,"modules/nixpkgs/16.09.lua.core")))(arch, interconnect, generic_nixpkgs)
                                              } ModuleFile
                                              help(...){
                                              } help
                                              whatis(Description: Nixpkgs is a collection of packages for the Nix package manager - Homepage: https://github.com/NixOS/nixpkgs){
                                              } whatis
                                              setenv(NIXUSER_PROFILE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09){
                                                MasterControl:setenv("NIXUSER_PROFILE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/sbin){
                                                MasterControl:prepend_path(t){
                                                  name:"PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/sbin", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin){
                                                MasterControl:prepend_path(t){
                                                  name:"PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/custom/bin){
                                                MasterControl:prepend_path(t){
                                                  name:"PATH", value: "/cvmfs/soft.computecanada.ca/custom/bin", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib){
                                                MasterControl:prepend_path(t){
                                                  name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(C_INCLUDE_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include){
                                                MasterControl:prepend_path(t){
                                                  name:"C_INCLUDE_PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(CPLUS_INCLUDE_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include){
                                                MasterControl:prepend_path(t){
                                                  name:"CPLUS_INCLUDE_PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/man){
                                                MasterControl:prepend_path(t){
                                                  name:"MANPATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/man", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(ACLOCAL_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/aclocal){
                                                MasterControl:prepend_path(t){
                                                  name:"ACLOCAL_PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/aclocal", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(PKG_CONFIG_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/pkgconfig){
                                                MasterControl:prepend_path(t){
                                                  name:"PKG_CONFIG_PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/pkgconfig", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              setenv(FONTCONFIG_FILE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/etc/fonts/fonts.conf){
                                                MasterControl:setenv("FONTCONFIG_FILE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/etc/fonts/fonts.conf", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              prepend_path(PYTHONPATH, /cvmfs/soft.computecanada.ca/custom/python/site-packages){
                                                MasterControl:prepend_path(t){
                                                  name:"PYTHONPATH", value: "/cvmfs/soft.computecanada.ca/custom/python/site-packages", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              setenv(PERL5OPT, -I/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5 -I/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5/site_perl){
                                                MasterControl:setenv("PERL5OPT", "-I/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5 -I/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5/site_perl", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              prepend_path(PERL5LIB, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5/site_perl){
                                                MasterControl:prepend_path(t){
                                                  name:"PERL5LIB", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5/site_perl", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(PERL5LIB, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5){
                                                MasterControl:prepend_path(t){
                                                  name:"PERL5LIB", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              setenv(TZDIR, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/zoneinfo){
                                                MasterControl:setenv("TZDIR", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/zoneinfo", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(SSL_CERT_FILE, /etc/pki/tls/certs/ca-bundle.crt){
                                                MasterControl:setenv("SSL_CERT_FILE", "/etc/pki/tls/certs/ca-bundle.crt", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(CURL_CA_BUNDLE, /etc/pki/tls/certs/ca-bundle.crt){
                                                MasterControl:setenv("CURL_CA_BUNDLE", "/etc/pki/tls/certs/ca-bundle.crt", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(PAGER, less -R){
                                                MasterControl:setenv("PAGER", "less -R", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(LESSOPEN, |/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/lesspipe.sh %s){
                                                MasterControl:setenv("LESSOPEN", "|/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/lesspipe.sh %s", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(LOCALE_ARCHIVE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/locale/locale-archive){
                                                MasterControl:setenv("LOCALE_ARCHIVE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/locale/locale-archive", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(MXM_LOG_LEVEL, error){
                                                MasterControl:setenv("MXM_LOG_LEVEL", "error", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(RSNT_ARCH, avx512){
                                                MasterControl:setenv("RSNT_ARCH", "avx512", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(RSNT_INTERCONNECT, infiniband){
                                                MasterControl:setenv("RSNT_INTERCONNECT", "infiniband", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(PIP_CONFIG_FILE, /cvmfs/soft.computecanada.ca/config/python/pip-avx512.conf){
                                                MasterControl:setenv("PIP_CONFIG_FILE", "/cvmfs/soft.computecanada.ca/config/python/pip-avx512.conf", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/bin){
                                                MasterControl:prepend_path(t){
                                                  name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/bin", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              setenv(EASYBUILD_CONFIGFILES, /cvmfs/soft.computecanada.ca/easybuild/config.cfg){
                                                MasterControl:setenv("EASYBUILD_CONFIGFILES", "/cvmfs/soft.computecanada.ca/easybuild/config.cfg", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(EASYBUILD_BUILDPATH, /dev/shm/mclay){
                                                MasterControl:setenv("EASYBUILD_BUILDPATH", "/dev/shm/mclay", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(EBROOTNIXPKGS, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09){
                                                MasterControl:setenv("EBROOTNIXPKGS", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(EBVERSIONNIXPKGS, 16.09){
                                                MasterControl:setenv("EBVERSIONNIXPKGS", "16.09", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              prepend_path(MODULEPATH, ProjectDIR/rt/cc/cc_mf/Core-avx512){
                                                MasterControl:prepend_path(t){
                                                  name:"MODULEPATH", value: "ProjectDIR/rt/cc/cc_mf/Core-avx512", delim=":", nodups="true", priority=0
      Prepending: ProjectDIR/rt/cc/cc_mf/Core-avx512 to MODULEPATH
                                                  chkMP("MODULEPATH", value: ProjectDIR/rt/cc/cc_mf/Core-avx512:ProjectDIR/rt/cc/cc_mf/modules-avx512:ProjectDIR/rt/cc/cc_mf/modules, adding:true){
                                                    MT:set_MPATH_change_flag(self)
                                                    ModuleA:update(spider_cache=false){
                                                      building mpath: ProjectDIR/rt/cc/cc_mf/Core-avx512
                                                      ModuleA:__new(){
                                                        calling DirTree:new()
                                                        RC_File(ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/.modulerc.lua){
                                                          if os.getenv("RSNT_ARCH") == "avx512" then
                                                          	module_version("intel/2018.3","default")
                                                          else
                                                          	module_version("intel/2016.4","default")
                                                          end
                                                        } RC_File
                                                        In versionFile
                                                        MRC:parseModA_for_moduleA(intel, modA){
                                                          entry.kind: module_version
                                                          resolve(fullName): intel/2018.3
                                                          (2) fullName: intel/2018.3
                                                          j: 1, version: default
                                                          Setting default: intel/2018.3
                                                        } MRC:parseModA_for_moduleA
                                                        Back in versionFile
                                                        ModuleA build(){
                                                          #dirA: 1
                                                          mpath: ProjectDIR/rt/cc/cc_mf/Core-avx512
                                                        } ModuleA build
                                                        ["moduleA:"]  = {
                                                          {
                                                            T = {
                                                              gcc = {
                                                                defaultT = {},
                                                                dirT = {},
                                                                fileT = {
                                                                  ["gcc/5.4.0"]  = {
                                                                    ["canonical"] = "5.4.0",
                                                                    ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/gcc/5.4.0.lua",
                                                                    ["luaExt"] = 6,
                                                                    ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                                                    ["pV"] = "000000005.000000004.*zfinal",
                                                                    ["wV"] = "000000005.000000004.*zfinal",
                                                                  },
                                                                  ["gcc/7.3.0"]  = {
                                                                    ["canonical"] = "7.3.0",
                                                                    ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/gcc/7.3.0.lua",
                                                                    ["luaExt"] = 6,
                                                                    ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                                                    ["pV"] = "000000007.000000003.*zfinal",
                                                                    ["wV"] = "000000007.000000003.*zfinal",
                                                                  },
                                                                },
                                                              },
                                                              gcccore = {
                                                                defaultT = {},
                                                                dirT = {},
                                                                fileT = {
                                                                  ["gcccore/.5.4.0"]  = {
                                                                    ["canonical"] = ".5.4.0",
                                                                    ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua",
                                                                    ["luaExt"] = 7,
                                                                    ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                                                    ["pV"] = "000000000.000000005.000000004.*zfinal",
                                                                    ["wV"] = "000000000.000000005.000000004.*zfinal",
                                                                  },
                                                                  ["gcccore/.7.3.0"]  = {
                                                                    ["canonical"] = ".7.3.0",
                                                                    ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.7.3.0.lua",
                                                                    ["luaExt"] = 7,
                                                                    ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                                                    ["pV"] = "000000000.000000007.000000003.*zfinal",
                                                                    ["wV"] = "000000000.000000007.000000003.*zfinal",
                                                                  },
                                                                },
                                                              },
                                                              icc = {
                                                                defaultT = {},
                                                                dirT = {},
                                                                fileT = {
                                                                  ["icc/.2016.4.258"]  = {
                                                                    ["canonical"] = ".2016.4.258",
                                                                    ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua",
                                                                    ["luaExt"] = 12,
                                                                    ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                                                    ["pV"] = "000000000.000002016.000000004.000000258.*zfinal",
                                                                    ["wV"] = "000000000.000002016.000000004.000000258.*zfinal",
                                                                  },
                                                                  ["icc/.2018.3.222"]  = {
                                                                    ["canonical"] = ".2018.3.222",
                                                                    ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2018.3.222.lua",
                                                                    ["luaExt"] = 12,
                                                                    ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                                                    ["pV"] = "000000000.000002018.000000003.000000222.*zfinal",
                                                                    ["wV"] = "000000000.000002018.000000003.000000222.*zfinal",
                                                                  },
                                                                },
                                                              },
                                                              ifort = {
                                                                defaultT = {},
                                                                dirT = {},
                                                                fileT = {
                                                                  ["ifort/.2016.4.258"]  = {
                                                                    ["canonical"] = ".2016.4.258",
                                                                    ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua",
                                                                    ["luaExt"] = 12,
                                                                    ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                                                    ["pV"] = "000000000.000002016.000000004.000000258.*zfinal",
                                                                    ["wV"] = "000000000.000002016.000000004.000000258.*zfinal",
                                                                  },
                                                                  ["ifort/.2018.3.222"]  = {
                                                                    ["canonical"] = ".2018.3.222",
                                                                    ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2018.3.222.lua",
                                                                    ["luaExt"] = 12,
                                                                    ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                                                    ["pV"] = "000000000.000002018.000000003.000000222.*zfinal",
                                                                    ["wV"] = "000000000.000002018.000000003.000000222.*zfinal",
                                                                  },
                                                                },
                                                              },
                                                              imkl = {
                                                                defaultT = {},
                                                                dirT = {},
                                                                fileT = {
                                                                  ["imkl/11.3.4.258"]  = {
                                                                    ["canonical"] = "11.3.4.258",
                                                                    ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua",
                                                                    ["luaExt"] = 11,
                                                                    ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                                                    ["pV"] = "000000011.000000003.000000004.000000258.*zfinal",
                                                                    ["wV"] = "000000011.000000003.000000004.000000258.*zfinal",
                                                                  },
                                                                  ["imkl/2018.3.222"]  = {
                                                                    ["canonical"] = "2018.3.222",
                                                                    ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/2018.3.222.lua",
                                                                    ["luaExt"] = 11,
                                                                    ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                                                    ["pV"] = "000002018.000000003.000000222.*zfinal",
                                                                    ["wV"] = "000002018.000000003.000000222.*zfinal",
                                                                  },
                                                                },
                                                              },
                                                              intel = {
                                                                defaultT = {
                                                                  ["barefn"] = ".modulerc.lua",
                                                                  ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/.modulerc.lua",
                                                                  ["fullName"] = "intel/.modulerc",
                                                                  ["luaExt"] = 10,
                                                                  ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                                                  ["value"] = "intel/2018.3",
                                                                },
                                                                dirT = {},
                                                                fileT = {
                                                                  ["intel/2016.4"]  = {
                                                                    ["canonical"] = "2016.4",
                                                                    ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua",
                                                                    ["luaExt"] = 7,
                                                                    ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                                                    ["pV"] = "000002016.000000004.*zfinal",
                                                                    ["wV"] = "000002016.000000004.*zfinal",
                                                                  },
                                                                  ["intel/2018.3"]  = {
                                                                    ["canonical"] = "2018.3",
                                                                    ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2018.3.lua",
                                                                    ["luaExt"] = 7,
                                                                    ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                                                    ["pV"] = "000002018.000000003.*zfinal",
                                                                    ["wV"] = "^00002018.000000003.*zfinal",
                                                                  },
                                                                },
                                                              },
                                                            },
                                                            ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                                          },
                                                        }
                                                        isNVV: false
                                                      } ModuleA:__new
                                                      Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules-avx512
                                                      Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules
                                                    } ModuleA:update
                                                  } chkMP
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              setenv(PROJECT, OutputDIR/project){
                                                MasterControl:setenv("PROJECT", "OutputDIR/project", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(CC_PROJECT, OutputDIR/project){
                                                MasterControl:setenv("CC_PROJECT", "OutputDIR/project", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              set_alias(quota, diskusage_report){
                                                MasterControl:set_alias("quota", "diskusage_report"){
                                                } MasterControl:set_alias
                                              } set_alias
                                            } loadModuleFile
                                            Marking nixpkgs/16.09 as active and loaded
                                            safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): false
                                          } Master:load
                                          MasterControl:registerAdminMsg(mA){
                                          } MasterControl:registerAdminMsg
                                        } MasterControl:load
                                      } MasterControl:load_usr
                                    } load_module
                                    load_module(imkl/2018.3.222){
                                      cmd: load argA.n: 1
                                      mcp:name(): MC_Load
                                      MasterControl:load_usr(mA={imkl/2018.3.222}){
                                        registerUserLoads(mA){
                                          userName: imkl/2018.3.222
                                        } registerUserLoads
                                        MasterControl:load(mA={imkl/2018.3.222}){
                                          Master:singleton(safe: nil){
                                            s_master: table: 0x115ce70, safe: true
                                          } Master:singleton
                                          Master:load(mA={imkl/2018.3.222}){
                                            Master:load i: 1, userName: imkl/2018.3.222
                                            Mname:sn(){
                                              LocationT:new(moduleA){
                                                LocationT build(moduleA){
                                                } LocationT build
                                              } LocationT:new
                                            } Mname:sn
    (20)(4)Loading: imkl/2018.3.222 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/2018.3.222.lua, using Find-Best)
                                            Master:load i: 1 sn: imkl fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/2018.3.222.lua
                                            Master:loading: "imkl/2018.3.222" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/2018.3.222.lua"
                                            loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/2018.3.222.lua){
                                              ModuleFile{
                                                help([==[
                                                Description
                                                ===========
                                                Intel Math Kernel Library is a library of highly optimized,
                                                 extensively threaded math routines for science, engineering, and financial
                                                 applications that require maximum performance. Core math functions include
                                                 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.
                                                More information
                                                ================
                                                 - Homepage: http://software.intel.com/en-us/intel-mkl/
                                                ]==])
                                                whatis([==[Description: Intel Math Kernel Library is a library of highly optimized,
                                                 extensively threaded math routines for science, engineering, and financial
                                                 applications that require maximum performance. Core math functions include
                                                 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.]==])
                                                whatis([==[Homepage: http://software.intel.com/en-us/intel-mkl/]==])
                                                local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222"
                                                conflict("imkl")
                                                prepend_path("CPATH", pathJoin(root, "mkl/include"))
                                                prepend_path("CPATH", pathJoin(root, "mkl/include/fftw"))
                                                prepend_path("LIBRARY_PATH", pathJoin(root, "lib/intel64"))
                                                prepend_path("LIBRARY_PATH", pathJoin(root, "mkl/lib/intel64"))
                                                prepend_path("PATH", pathJoin(root, "bin"))
                                                prepend_path("PATH", pathJoin(root, "mkl/bin"))
                                                setenv("EBROOTIMKL", root)
                                                setenv("EBVERSIONIMKL", "2018.3.222")
                                                setenv("EBDEVELIMKL", pathJoin(root, "easybuild/Core-imkl-2018.3.222-easybuild-devel"))
                                                setenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/examples/")
                                                prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                                                setenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl")
                                                -- Built with EasyBuild version 3.6.2-r1ed7dac97acd22d6301e534c78048f7fcedaa585
                                              } ModuleFile
                                              help(...){
                                              } help
                                              whatis(Description: Intel Math Kernel Library is a library of highly optimized,
 extensively threaded math routines for science, engineering, and financial
 applications that require maximum performance. Core math functions include
 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.){
                                              } whatis
                                              whatis(Homepage: http://software.intel.com/en-us/intel-mkl/){
                                              } whatis
                                              conflict(imkl){
                                                MasterControl:conflict(mA){
                                                  Mname:sn(){
                                                  } Mname:sn
                                                } MasterControl:conflict
                                              }
                                              prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/include){
                                                MasterControl:prepend_path(t){
                                                  name:"CPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/include", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/include/fftw){
                                                MasterControl:prepend_path(t){
                                                  name:"CPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/include/fftw", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/lib/intel64){
                                                MasterControl:prepend_path(t){
                                                  name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/lib/intel64", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/lib/intel64){
                                                MasterControl:prepend_path(t){
                                                  name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/lib/intel64", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/bin){
                                                MasterControl:prepend_path(t){
                                                  name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/bin", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/bin){
                                                MasterControl:prepend_path(t){
                                                  name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/bin", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              setenv(EBROOTIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222){
                                                MasterControl:setenv("EBROOTIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(EBVERSIONIMKL, 2018.3.222){
                                                MasterControl:setenv("EBVERSIONIMKL", "2018.3.222", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(EBDEVELIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/easybuild/Core-imkl-2018.3.222-easybuild-devel){
                                                MasterControl:setenv("EBDEVELIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/easybuild/Core-imkl-2018.3.222-easybuild-devel", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(MKL_EXAMPLES, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/examples/){
                                                MasterControl:setenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/examples/", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              prepend_path(NLSPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/idb/intel64/locale/%l_%t/%N){
                                                MasterControl:prepend_path(t){
                                                  name:"NLSPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              setenv(MKLROOT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl){
                                                MasterControl:setenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                            } loadModuleFile
                                            Marking imkl/2018.3.222 as active and loaded
                                            safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): false
                                          } Master:load
                                          MasterControl:registerAdminMsg(mA){
                                          } MasterControl:registerAdminMsg
                                        } MasterControl:load
                                      } MasterControl:load_usr
                                    } load_module
                                    load_module(intel/2018.3){
                                      cmd: load argA.n: 1
                                      mcp:name(): MC_Load
                                      MasterControl:load_usr(mA={intel/2018.3}){
                                        registerUserLoads(mA){
                                          userName: intel/2018.3
                                        } registerUserLoads
                                        MasterControl:load(mA={intel/2018.3}){
                                          Master:singleton(safe: nil){
                                            s_master: table: 0x115ce70, safe: true
                                          } Master:singleton
                                          Master:load(mA={intel/2018.3}){
                                            Master:load i: 1, userName: intel/2018.3
                                            Mname:sn(){
                                            } Mname:sn
    (21)(4)Loading: intel/2018.3 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2018.3.lua, using Find-Best)
                                            Master:load i: 1 sn: intel fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2018.3.lua
                                            Master:loading: "intel/2018.3" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2018.3.lua"
                                            loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2018.3.lua){
                                              ModuleFile{
                                                help([==[
                                                Description
                                                ===========
                                                Intel C, C++ & Fortran compilers
                                                More information
                                                ================
                                                 - Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/
                                                ]==])
                                                whatis([==[Description: Intel C, C++ & Fortran compilers]==])
                                                whatis([==[Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/]==])
                                                local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2018.3"
                                                conflict("intel")
                                                depends_on("icc/.2018.3.222")
                                                depends_on("ifort/.2018.3.222")
                                                setenv("EBROOTICCIFORT", root)
                                                setenv("EBVERSIONICCIFORT", "2018.3")
                                                setenv("EBDEVELICCIFORT", pathJoin(root, "easybuild/Core-intel-2018.3-easybuild-devel"))
                                                prepend_path("INTEL_LICENSE_FILE", pathJoin("/cvmfs/soft.computecanada.ca/config/licenses/intel", os.getenv("CC_CLUSTER") .. ".lic"))
                                                local mroot = os.getenv("MODULEPATH_ROOT")
                                                prepend_path("MODULEPATH", pathJoin(pathJoin(mroot, os.getenv("RSNT_ARCH"), "Compiler/intel2018.3")))
                                                if isloaded("imkl") then
                                                    always_load("imkl/2018.3.222")
                                                end
                                                family("compiler")
                                                -- Built with EasyBuild version 3.7.0-rc7b39e420d4f1af2b79028319dfd5ed90b504390
                                              } ModuleFile
                                              help(...){
                                              } help
                                              whatis(Description: Intel C, C++ & Fortran compilers){
                                              } whatis
                                              whatis(Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/){
                                              } whatis
                                              conflict(intel){
                                                MasterControl:conflict(mA){
                                                  Mname:sn(){
                                                  } Mname:sn
                                                } MasterControl:conflict
                                              }
                                              depends_on(icc/.2018.3.222){
                                                MasterControl:depends_on(mA={icc/.2018.3.222}){
                                                  MName:isloaded(){
                                                    Mname:sn(){
                                                    } Mname:sn
                                                  } MName:isloaded
                                                  registerUserLoads(mA){
                                                    userName: icc/.2018.3.222
                                                  } registerUserLoads
                                                  MasterControl:load(mA={icc/.2018.3.222}){
                                                    Master:singleton(safe: nil){
                                                      s_master: table: 0x115ce70, safe: true
                                                    } Master:singleton
                                                    Master:load(mA={icc/.2018.3.222}){
                                                      Master:load i: 1, userName: icc/.2018.3.222
      (22)(4)Loading: icc/.2018.3.222 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2018.3.222.lua, using Find-Best)
                                                      Master:load i: 1 sn: icc fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2018.3.222.lua
                                                      Master:loading: "icc/.2018.3.222" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2018.3.222.lua"
                                                      loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2018.3.222.lua){
                                                        ModuleFile{
                                                          help([==[
                                                          Description
                                                          ===========
                                                          Intel C and C++ compilers
                                                          More information
                                                          ================
                                                           - Homepage: http://software.intel.com/en-us/intel-compilers/
                                                          ]==])
                                                          whatis([==[Description: Intel C and C++ compilers]==])
                                                          whatis([==[Homepage: http://software.intel.com/en-us/intel-compilers/]==])
                                                          local root = "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222"
                                                          conflict("icc")
                                                          depends_on("gcccore/.7.3.0")
                                                          prepend_path("CPATH", pathJoin(root, "compilers_and_libraries_2018.3.222/linux/tbb/include"))
                                                          prepend_path("LIBRARY_PATH", pathJoin(root, "compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64"))
                                                          prepend_path("LIBRARY_PATH", pathJoin(root, "compilers_and_libraries_2018.3.222/linux/tbb/lib/intel64/gcc4.4"))
                                                          prepend_path("MANPATH", pathJoin(root, "compilers_and_libraries_2018.3.222/linux/man/common"))
                                                          prepend_path("PATH", pathJoin(root, "compilers_and_libraries_2018.3.222/linux/bin/intel64"))
                                                          prepend_path("TBBROOT", pathJoin(root, "compilers_and_libraries_2018.3.222/linux/tbb"))
                                                          setenv("EBROOTICC", root)
                                                          setenv("EBVERSIONICC", "2018.3.222")
                                                          setenv("EBDEVELICC", pathJoin(root, "easybuild/Core-icc-.2018.3.222-easybuild-devel"))
                                                          prepend_path("LIBRARY_PATH", pathJoin(root:gsub("/restricted.computecanada.ca/","/soft.computecanada.ca/"), "compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64"))
                                                          prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                                                          setenv("INTEL_PYTHONHOME", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/debugger_2018/python/intel64")
                                                          -- Built with EasyBuild version 3.6.2-r1ed7dac97acd22d6301e534c78048f7fcedaa585
                                                        } ModuleFile
                                                        help(...){
                                                        } help
                                                        whatis(Description: Intel C and C++ compilers){
                                                        } whatis
                                                        whatis(Homepage: http://software.intel.com/en-us/intel-compilers/){
                                                        } whatis
                                                        conflict(icc){
                                                          MasterControl:conflict(mA){
                                                            Mname:sn(){
                                                            } Mname:sn
                                                          } MasterControl:conflict
                                                        }
                                                        depends_on(gcccore/.7.3.0){
                                                          MasterControl:depends_on(mA={gcccore/.7.3.0}){
                                                            MName:isloaded(){
                                                              Mname:sn(){
                                                              } Mname:sn
                                                            } MName:isloaded
                                                            registerUserLoads(mA){
                                                              userName: gcccore/.7.3.0
                                                            } registerUserLoads
                                                            MasterControl:load(mA={gcccore/.7.3.0}){
                                                              Master:singleton(safe: nil){
                                                                s_master: table: 0x115ce70, safe: true
                                                              } Master:singleton
                                                              Master:load(mA={gcccore/.7.3.0}){
                                                                Master:load i: 1, userName: gcccore/.7.3.0
        (23)(4)Loading: gcccore/.7.3.0 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.7.3.0.lua, using Find-Best)
                                                                Master:load i: 1 sn: gcccore fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.7.3.0.lua
                                                                Master:loading: "gcccore/.7.3.0" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.7.3.0.lua"
                                                                loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.7.3.0.lua){
                                                                  ModuleFile{
                                                                    help([==[
                                                                    Description
                                                                    ===========
                                                                    The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,
                                                                     as well as libraries for these languages (libstdc++, libgcj,...).
                                                                    More information
                                                                    ================
                                                                     - Homepage: http://gcc.gnu.org/
                                                                    ]==])
                                                                    whatis([==[Description: The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,
                                                                     as well as libraries for these languages (libstdc++, libgcj,...).]==])
                                                                    whatis([==[Homepage: http://gcc.gnu.org/]==])
                                                                    local root = "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0"
                                                                    conflict("gcccore")
                                                                    prepend_path("CPATH", pathJoin(root, "include"))
                                                                    prepend_path("LIBRARY_PATH", pathJoin(root, "lib"))
                                                                    prepend_path("LIBRARY_PATH", pathJoin(root, "lib64"))
                                                                    prepend_path("MANPATH", pathJoin(root, "share/man"))
                                                                    prepend_path("PATH", pathJoin(root, "bin"))
                                                                    setenv("EBROOTGCCCORE", root)
                                                                    setenv("EBVERSIONGCCCORE", "7.3.0")
                                                                    setenv("EBDEVELGCCCORE", pathJoin(root, "easybuild/Core-gcccore-.7.3.0-easybuild-devel"))
                                                                    prepend_path("CPLUS_INCLUDE_PATH", pathJoin(root, "include/c++/7.3.0"))
                                                                    -- Built with EasyBuild version 3.5.1-rc1513f470261f1a4fa90a8ef6bd472f15ba085ed
                                                                  } ModuleFile
                                                                  help(...){
                                                                  } help
                                                                  whatis(Description: The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,
 as well as libraries for these languages (libstdc++, libgcj,...).){
                                                                  } whatis
                                                                  whatis(Homepage: http://gcc.gnu.org/){
                                                                  } whatis
                                                                  conflict(gcccore){
                                                                    MasterControl:conflict(mA){
                                                                      Mname:sn(){
                                                                      } Mname:sn
                                                                    } MasterControl:conflict
                                                                  }
                                                                  prepend_path(CPATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/include){
                                                                    MasterControl:prepend_path(t){
                                                                      name:"CPATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/include", delim=":", nodups="true", priority=0
                                                                    } MasterControl:prepend_path
                                                                  } prepend_path
                                                                  prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/lib){
                                                                    MasterControl:prepend_path(t){
                                                                      name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/lib", delim=":", nodups="true", priority=0
                                                                    } MasterControl:prepend_path
                                                                  } prepend_path
                                                                  prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/lib64){
                                                                    MasterControl:prepend_path(t){
                                                                      name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/lib64", delim=":", nodups="true", priority=0
                                                                    } MasterControl:prepend_path
                                                                  } prepend_path
                                                                  prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/share/man){
                                                                    MasterControl:prepend_path(t){
                                                                      name:"MANPATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/share/man", delim=":", nodups="true", priority=0
                                                                    } MasterControl:prepend_path
                                                                  } prepend_path
                                                                  prepend_path(PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/bin){
                                                                    MasterControl:prepend_path(t){
                                                                      name:"PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/bin", delim=":", nodups="true", priority=0
                                                                    } MasterControl:prepend_path
                                                                  } prepend_path
                                                                  setenv(EBROOTGCCCORE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0){
                                                                    MasterControl:setenv("EBROOTGCCCORE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0", "nil"){
                                                                    } MasterControl:setenv
                                                                  } setenv
                                                                  setenv(EBVERSIONGCCCORE, 7.3.0){
                                                                    MasterControl:setenv("EBVERSIONGCCCORE", "7.3.0", "nil"){
                                                                    } MasterControl:setenv
                                                                  } setenv
                                                                  setenv(EBDEVELGCCCORE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/easybuild/Core-gcccore-.7.3.0-easybuild-devel){
                                                                    MasterControl:setenv("EBDEVELGCCCORE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/easybuild/Core-gcccore-.7.3.0-easybuild-devel", "nil"){
                                                                    } MasterControl:setenv
                                                                  } setenv
                                                                  prepend_path(CPLUS_INCLUDE_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/include/c++/7.3.0){
                                                                    MasterControl:prepend_path(t){
                                                                      name:"CPLUS_INCLUDE_PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/include/c++/7.3.0", delim=":", nodups="true", priority=0
                                                                    } MasterControl:prepend_path
                                                                  } prepend_path
                                                                } loadModuleFile
                                                                Marking gcccore/.7.3.0 as active and loaded
                                                                safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): false
                                                              } Master:load
                                                              MasterControl:registerAdminMsg(mA){
                                                              } MasterControl:registerAdminMsg
                                                            } MasterControl:load
                                                          } MasterControl:depends_on
                                                        } depends_on
                                                        prepend_path(CPATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/tbb/include){
                                                          MasterControl:prepend_path(t){
                                                            name:"CPATH", value: "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/tbb/include", delim=":", nodups="true", priority=0
                                                          } MasterControl:prepend_path
                                                        } prepend_path
                                                        prepend_path(LIBRARY_PATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64){
                                                          MasterControl:prepend_path(t){
                                                            name:"LIBRARY_PATH", value: "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64", delim=":", nodups="true", priority=0
                                                          } MasterControl:prepend_path
                                                        } prepend_path
                                                        prepend_path(LIBRARY_PATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/tbb/lib/intel64/gcc4.4){
                                                          MasterControl:prepend_path(t){
                                                            name:"LIBRARY_PATH", value: "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/tbb/lib/intel64/gcc4.4", delim=":", nodups="true", priority=0
                                                          } MasterControl:prepend_path
                                                        } prepend_path
                                                        prepend_path(MANPATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/man/common){
                                                          MasterControl:prepend_path(t){
                                                            name:"MANPATH", value: "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/man/common", delim=":", nodups="true", priority=0
                                                          } MasterControl:prepend_path
                                                        } prepend_path
                                                        prepend_path(PATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/bin/intel64){
                                                          MasterControl:prepend_path(t){
                                                            name:"PATH", value: "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/bin/intel64", delim=":", nodups="true", priority=0
                                                          } MasterControl:prepend_path
                                                        } prepend_path
                                                        prepend_path(TBBROOT, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/tbb){
                                                          MasterControl:prepend_path(t){
                                                            name:"TBBROOT", value: "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/tbb", delim=":", nodups="true", priority=0
                                                          } MasterControl:prepend_path
                                                        } prepend_path
                                                        setenv(EBROOTICC, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222){
                                                          MasterControl:setenv("EBROOTICC", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222", "nil"){
                                                          } MasterControl:setenv
                                                        } setenv
                                                        setenv(EBVERSIONICC, 2018.3.222){
                                                          MasterControl:setenv("EBVERSIONICC", "2018.3.222", "nil"){
                                                          } MasterControl:setenv
                                                        } setenv
                                                        setenv(EBDEVELICC, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/easybuild/Core-icc-.2018.3.222-easybuild-devel){
                                                          MasterControl:setenv("EBDEVELICC", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/easybuild/Core-icc-.2018.3.222-easybuild-devel", "nil"){
                                                          } MasterControl:setenv
                                                        } setenv
                                                        prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64){
                                                          MasterControl:prepend_path(t){
                                                            name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64", delim=":", nodups="true", priority=0
                                                          } MasterControl:prepend_path
                                                        } prepend_path
                                                        prepend_path(NLSPATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/idb/intel64/locale/%l_%t/%N){
                                                          MasterControl:prepend_path(t){
                                                            name:"NLSPATH", value: "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0
                                                          } MasterControl:prepend_path
                                                        } prepend_path
                                                        setenv(INTEL_PYTHONHOME, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/debugger_2018/python/intel64){
                                                          MasterControl:setenv("INTEL_PYTHONHOME", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/debugger_2018/python/intel64", "nil"){
                                                          } MasterControl:setenv
                                                        } setenv
                                                      } loadModuleFile
                                                      Marking icc/.2018.3.222 as active and loaded
                                                      safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): false
                                                    } Master:load
                                                    MasterControl:registerAdminMsg(mA){
                                                    } MasterControl:registerAdminMsg
                                                  } MasterControl:load
                                                } MasterControl:depends_on
                                              } depends_on
                                              depends_on(ifort/.2018.3.222){
                                                MasterControl:depends_on(mA={ifort/.2018.3.222}){
                                                  MName:isloaded(){
                                                    Mname:sn(){
                                                    } Mname:sn
                                                  } MName:isloaded
                                                  registerUserLoads(mA){
                                                    userName: ifort/.2018.3.222
                                                  } registerUserLoads
                                                  MasterControl:load(mA={ifort/.2018.3.222}){
                                                    Master:singleton(safe: nil){
                                                      s_master: table: 0x115ce70, safe: true
                                                    } Master:singleton
                                                    Master:load(mA={ifort/.2018.3.222}){
                                                      Master:load i: 1, userName: ifort/.2018.3.222
      (24)(4)Loading: ifort/.2018.3.222 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2018.3.222.lua, using Find-Best)
                                                      Master:load i: 1 sn: ifort fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2018.3.222.lua
                                                      Master:loading: "ifort/.2018.3.222" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2018.3.222.lua"
                                                      loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2018.3.222.lua){
                                                        ModuleFile{
                                                          help([==[
                                                          Description
                                                          ===========
                                                          Intel Fortran compiler
                                                          More information
                                                          ================
                                                           - Homepage: http://software.intel.com/en-us/intel-compilers/
                                                          ]==])
                                                          whatis([==[Description: Intel Fortran compiler]==])
                                                          whatis([==[Homepage: http://software.intel.com/en-us/intel-compilers/]==])
                                                          local root = "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222"
                                                          conflict("ifort")
                                                          depends_on("gcccore/.7.3.0")
                                                          prepend_path("CPATH", pathJoin(root, "include"))
                                                          prepend_path("LIBRARY_PATH", pathJoin(root, "compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64"))
                                                          prepend_path("MANPATH", pathJoin(root, "compilers_and_libraries_2018.3.222/linux/man/common"))
                                                          prepend_path("PATH", pathJoin(root, "compilers_and_libraries_2018.3.222/linux/bin/intel64"))
                                                          setenv("EBROOTIFORT", root)
                                                          setenv("EBVERSIONIFORT", "2018.3.222")
                                                          setenv("EBDEVELIFORT", pathJoin(root, "easybuild/Core-ifort-.2018.3.222-easybuild-devel"))
                                                          prepend_path("LIBRARY_PATH", pathJoin(root:gsub("/restricted.computecanada.ca/","/soft.computecanada.ca/"), "compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64"))
                                                          prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                                                          setenv("INTEL_PYTHONHOME", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/debugger_2018/python/intel64")
                                                          -- Built with EasyBuild version 3.6.2-r1ed7dac97acd22d6301e534c78048f7fcedaa585
                                                        } ModuleFile
                                                        help(...){
                                                        } help
                                                        whatis(Description: Intel Fortran compiler){
                                                        } whatis
                                                        whatis(Homepage: http://software.intel.com/en-us/intel-compilers/){
                                                        } whatis
                                                        conflict(ifort){
                                                          MasterControl:conflict(mA){
                                                            Mname:sn(){
                                                            } Mname:sn
                                                          } MasterControl:conflict
                                                        }
                                                        depends_on(gcccore/.7.3.0){
                                                          MasterControl:depends_on(mA={gcccore/.7.3.0}){
                                                            MName:isloaded(){
                                                              Mname:sn(){
                                                              } Mname:sn
                                                            } MName:isloaded
                                                            registerUserLoads(mA){
                                                            } registerUserLoads
                                                            MasterControl:load(mA={}){
                                                              Master:singleton(safe: nil){
                                                                s_master: table: 0x115ce70, safe: true
                                                              } Master:singleton
                                                              Master:load(mA={}){
                                                                safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): false
                                                              } Master:load
                                                              MasterControl:registerAdminMsg(mA){
                                                              } MasterControl:registerAdminMsg
                                                            } MasterControl:load
                                                          } MasterControl:depends_on
                                                        } depends_on
                                                        prepend_path(CPATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/include){
                                                          MasterControl:prepend_path(t){
                                                            name:"CPATH", value: "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/include", delim=":", nodups="true", priority=0
                                                          } MasterControl:prepend_path
                                                        } prepend_path
                                                        prepend_path(LIBRARY_PATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64){
                                                          MasterControl:prepend_path(t){
                                                            name:"LIBRARY_PATH", value: "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64", delim=":", nodups="true", priority=0
                                                          } MasterControl:prepend_path
                                                        } prepend_path
                                                        prepend_path(MANPATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/compilers_and_libraries_2018.3.222/linux/man/common){
                                                          MasterControl:prepend_path(t){
                                                            name:"MANPATH", value: "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/compilers_and_libraries_2018.3.222/linux/man/common", delim=":", nodups="true", priority=0
                                                          } MasterControl:prepend_path
                                                        } prepend_path
                                                        prepend_path(PATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/compilers_and_libraries_2018.3.222/linux/bin/intel64){
                                                          MasterControl:prepend_path(t){
                                                            name:"PATH", value: "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/compilers_and_libraries_2018.3.222/linux/bin/intel64", delim=":", nodups="true", priority=0
                                                          } MasterControl:prepend_path
                                                        } prepend_path
                                                        setenv(EBROOTIFORT, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222){
                                                          MasterControl:setenv("EBROOTIFORT", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222", "nil"){
                                                          } MasterControl:setenv
                                                        } setenv
                                                        setenv(EBVERSIONIFORT, 2018.3.222){
                                                          MasterControl:setenv("EBVERSIONIFORT", "2018.3.222", "nil"){
                                                          } MasterControl:setenv
                                                        } setenv
                                                        setenv(EBDEVELIFORT, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/easybuild/Core-ifort-.2018.3.222-easybuild-devel){
                                                          MasterControl:setenv("EBDEVELIFORT", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/easybuild/Core-ifort-.2018.3.222-easybuild-devel", "nil"){
                                                          } MasterControl:setenv
                                                        } setenv
                                                        prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64){
                                                          MasterControl:prepend_path(t){
                                                            name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64", delim=":", nodups="true", priority=0
                                                          } MasterControl:prepend_path
                                                        } prepend_path
                                                        prepend_path(NLSPATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/idb/intel64/locale/%l_%t/%N){
                                                          MasterControl:prepend_path(t){
                                                            name:"NLSPATH", value: "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0
                                                          } MasterControl:prepend_path
                                                        } prepend_path
                                                        setenv(INTEL_PYTHONHOME, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/debugger_2018/python/intel64){
                                                          MasterControl:setenv("INTEL_PYTHONHOME", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/debugger_2018/python/intel64", "nil"){
                                                          } MasterControl:setenv
                                                        } setenv
                                                      } loadModuleFile
                                                      Marking ifort/.2018.3.222 as active and loaded
                                                      safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): false
                                                    } Master:load
                                                    MasterControl:registerAdminMsg(mA){
                                                    } MasterControl:registerAdminMsg
                                                  } MasterControl:load
                                                } MasterControl:depends_on
                                              } depends_on
                                              setenv(EBROOTICCIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2018.3){
                                                MasterControl:setenv("EBROOTICCIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2018.3", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(EBVERSIONICCIFORT, 2018.3){
                                                MasterControl:setenv("EBVERSIONICCIFORT", "2018.3", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(EBDEVELICCIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2018.3/easybuild/Core-intel-2018.3-easybuild-devel){
                                                MasterControl:setenv("EBDEVELICCIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2018.3/easybuild/Core-intel-2018.3-easybuild-devel", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              prepend_path(INTEL_LICENSE_FILE, /cvmfs/soft.computecanada.ca/config/licenses/intel/computecanada.lic){
                                                MasterControl:prepend_path(t){
                                                  name:"INTEL_LICENSE_FILE", value: "/cvmfs/soft.computecanada.ca/config/licenses/intel/computecanada.lic", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(MODULEPATH, ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3){
                                                MasterControl:prepend_path(t){
                                                  name:"MODULEPATH", value: "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3", delim=":", nodups="true", priority=0
      Prepending: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3 to MODULEPATH
                                                  chkMP("MODULEPATH", value: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3:ProjectDIR/rt/cc/cc_mf/Core-avx512:ProjectDIR/rt/cc/cc_mf/modules-avx512:ProjectDIR/rt/cc/cc_mf/modules, adding:true){
                                                    MT:set_MPATH_change_flag(self)
                                                    ModuleA:update(spider_cache=false){
                                                      building mpath: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3
                                                      ModuleA:__new(){
                                                        calling DirTree:new()
                                                        ModuleA build(){
                                                          #dirA: 1
                                                          mpath: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3
                                                        } ModuleA build
                                                        ["moduleA:"]  = {
                                                          {
                                                            T = {
                                                              openmpi = {
                                                                defaultT = {},
                                                                dirT = {},
                                                                fileT = {
                                                                  ["openmpi/3.1.2"]  = {
                                                                    ["canonical"] = "3.1.2",
                                                                    ["fn"] = "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3/openmpi/3.1.2.lua",
                                                                    ["luaExt"] = 6,
                                                                    ["mpath"] = "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3",
                                                                    ["pV"] = "000000003.000000001.000000002.*zfinal",
                                                                    ["wV"] = "000000003.000000001.000000002.*zfinal",
                                                                  },
                                                                },
                                                              },
                                                            },
                                                            ["mpath"] = "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3",
                                                          },
                                                        }
                                                        isNVV: false
                                                      } ModuleA:__new
                                                      Reusing mpath: ProjectDIR/rt/cc/cc_mf/Core-avx512
                                                      Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules-avx512
                                                      Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules
                                                    } ModuleA:update
                                                  } chkMP
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              isloaded(imkl){
                                              } isloaded
                                              MName:isloaded(){
                                                Mname:sn(){
                                                } Mname:sn
                                              } MName:isloaded
                                              always_load(imkl/2018.3.222){
                                                cmd: always_load argA.n: 1
                                                MasterControl:load_usr(mA={imkl/2018.3.222}){
                                                  registerUserLoads(mA){
                                                    userName: imkl/2018.3.222
                                                  } registerUserLoads
                                                  MasterControl:load(mA={imkl/2018.3.222}){
                                                    Master:singleton(safe: nil){
                                                      s_master: table: 0x115ce70, safe: true
                                                    } Master:singleton
                                                    Master:load(mA={imkl/2018.3.222}){
                                                      Master:load i: 1, userName: imkl/2018.3.222
                                                      Mname:sn(){
                                                        LocationT:new(moduleA){
                                                          LocationT build(moduleA){
                                                          } LocationT build
                                                        } LocationT:new
                                                      } Mname:sn
      (25)(4)Loading: imkl/2018.3.222 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/2018.3.222.lua, using Find-Best)
                                                      Master:load i: 1 sn: imkl fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/2018.3.222.lua
                                                      mnV: 2018.3.222, mtV: 2018.3.222
                                                      Setting mcp to MC_Load
                                                      Master:singleton(safe: nil){
                                                        s_master: table: 0x115ce70, safe: true
                                                      } Master:singleton
                                                      MasterControl:unload(mA={imkl}){
                                                        unRegisterUserLoads(mA){
                                                          userName: imkl
                                                        } unRegisterUserLoads
                                                        Master:unload(mA={imkl}){
                                                          MasterControl:_setMode("unload"){
                                                          } MasterControl:_setMode
                                                          Setting mcp to MC_Unload
                                                          Setting mcp to MC_Unload
                                                          Mname:fullName(){
                                                          } Mname:fullName
      (26)(4)Unloading: imkl (status: active) (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/2018.3.222.lua)
                                                          Trying to unload: imkl sn: imkl
                                                          Master:unload: "imkl" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/2018.3.222.lua"
                                                          loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/2018.3.222.lua){
                                                            ModuleFile{
                                                              help([==[
                                                              Description
                                                              ===========
                                                              Intel Math Kernel Library is a library of highly optimized,
                                                               extensively threaded math routines for science, engineering, and financial
                                                               applications that require maximum performance. Core math functions include
                                                               BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.
                                                              More information
                                                              ================
                                                               - Homepage: http://software.intel.com/en-us/intel-mkl/
                                                              ]==])
                                                              whatis([==[Description: Intel Math Kernel Library is a library of highly optimized,
                                                               extensively threaded math routines for science, engineering, and financial
                                                               applications that require maximum performance. Core math functions include
                                                               BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.]==])
                                                              whatis([==[Homepage: http://software.intel.com/en-us/intel-mkl/]==])
                                                              local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222"
                                                              conflict("imkl")
                                                              prepend_path("CPATH", pathJoin(root, "mkl/include"))
                                                              prepend_path("CPATH", pathJoin(root, "mkl/include/fftw"))
                                                              prepend_path("LIBRARY_PATH", pathJoin(root, "lib/intel64"))
                                                              prepend_path("LIBRARY_PATH", pathJoin(root, "mkl/lib/intel64"))
                                                              prepend_path("PATH", pathJoin(root, "bin"))
                                                              prepend_path("PATH", pathJoin(root, "mkl/bin"))
                                                              setenv("EBROOTIMKL", root)
                                                              setenv("EBVERSIONIMKL", "2018.3.222")
                                                              setenv("EBDEVELIMKL", pathJoin(root, "easybuild/Core-imkl-2018.3.222-easybuild-devel"))
                                                              setenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/examples/")
                                                              prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                                                              setenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl")
                                                              -- Built with EasyBuild version 3.6.2-r1ed7dac97acd22d6301e534c78048f7fcedaa585
                                                            } ModuleFile
                                                            help(...){
                                                            } help
                                                            whatis(Description: Intel Math Kernel Library is a library of highly optimized,
 extensively threaded math routines for science, engineering, and financial
 applications that require maximum performance. Core math functions include
 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.){
                                                            } whatis
                                                            whatis(Homepage: http://software.intel.com/en-us/intel-mkl/){
                                                            } whatis
                                                            conflict(imkl){
                                                            }
                                                            prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/include){
                                                              MasterControl:remove_path{"CPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/include", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                                              } MasterControl:remove_path
                                                            } prepend_path
                                                            prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/include/fftw){
                                                              MasterControl:remove_path{"CPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/include/fftw", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                                              } MasterControl:remove_path
                                                            } prepend_path
                                                            prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/lib/intel64){
                                                              MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/lib/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                                              } MasterControl:remove_path
                                                            } prepend_path
                                                            prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/lib/intel64){
                                                              MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/lib/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                                              } MasterControl:remove_path
                                                            } prepend_path
                                                            prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/bin){
                                                              MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                                              } MasterControl:remove_path
                                                            } prepend_path
                                                            prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/bin){
                                                              MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                                              } MasterControl:remove_path
                                                            } prepend_path
                                                            setenv(EBROOTIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222){
                                                              MasterControl:unsetenv("EBROOTIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222"){
                                                              } MasterControl:unsetenv
                                                            } setenv
                                                            setenv(EBVERSIONIMKL, 2018.3.222){
                                                              MasterControl:unsetenv("EBVERSIONIMKL", "2018.3.222"){
                                                              } MasterControl:unsetenv
                                                            } setenv
                                                            setenv(EBDEVELIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/easybuild/Core-imkl-2018.3.222-easybuild-devel){
                                                              MasterControl:unsetenv("EBDEVELIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/easybuild/Core-imkl-2018.3.222-easybuild-devel"){
                                                              } MasterControl:unsetenv
                                                            } setenv
                                                            setenv(MKL_EXAMPLES, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/examples/){
                                                              MasterControl:unsetenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/examples/"){
                                                              } MasterControl:unsetenv
                                                            } setenv
                                                            prepend_path(NLSPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/idb/intel64/locale/%l_%t/%N){
                                                              MasterControl:remove_path{"NLSPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                                              } MasterControl:remove_path
                                                            } prepend_path
                                                            setenv(MKLROOT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl){
                                                              MasterControl:unsetenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl"){
                                                              } MasterControl:unsetenv
                                                            } setenv
                                                          } loadModuleFile
                                                          safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): false
                                                          Setting mcp to MC_Load
                                                        } Master:unload
                                                      } MasterControl:unload
                                                      MasterControl:load_usr(mA={imkl/2018.3.222}){
                                                        registerUserLoads(mA){
                                                          userName: imkl/2018.3.222
                                                        } registerUserLoads
                                                        MasterControl:load(mA={imkl/2018.3.222}){
                                                          Master:singleton(safe: nil){
                                                            s_master: table: 0x115ce70, safe: true
                                                          } Master:singleton
                                                          Master:load(mA={imkl/2018.3.222}){
                                                            Master:load i: 1, userName: imkl/2018.3.222
                                                            Mname:sn(){
                                                            } Mname:sn
      (27)(4)Loading: imkl/2018.3.222 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/2018.3.222.lua, using Find-Best)
                                                            Master:load i: 1 sn: imkl fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/2018.3.222.lua
                                                            Master:loading: "imkl/2018.3.222" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/2018.3.222.lua"
                                                            loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/2018.3.222.lua){
                                                              ModuleFile{
                                                                help([==[
                                                                Description
                                                                ===========
                                                                Intel Math Kernel Library is a library of highly optimized,
                                                                 extensively threaded math routines for science, engineering, and financial
                                                                 applications that require maximum performance. Core math functions include
                                                                 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.
                                                                More information
                                                                ================
                                                                 - Homepage: http://software.intel.com/en-us/intel-mkl/
                                                                ]==])
                                                                whatis([==[Description: Intel Math Kernel Library is a library of highly optimized,
                                                                 extensively threaded math routines for science, engineering, and financial
                                                                 applications that require maximum performance. Core math functions include
                                                                 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.]==])
                                                                whatis([==[Homepage: http://software.intel.com/en-us/intel-mkl/]==])
                                                                local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222"
                                                                conflict("imkl")
                                                                prepend_path("CPATH", pathJoin(root, "mkl/include"))
                                                                prepend_path("CPATH", pathJoin(root, "mkl/include/fftw"))
                                                                prepend_path("LIBRARY_PATH", pathJoin(root, "lib/intel64"))
                                                                prepend_path("LIBRARY_PATH", pathJoin(root, "mkl/lib/intel64"))
                                                                prepend_path("PATH", pathJoin(root, "bin"))
                                                                prepend_path("PATH", pathJoin(root, "mkl/bin"))
                                                                setenv("EBROOTIMKL", root)
                                                                setenv("EBVERSIONIMKL", "2018.3.222")
                                                                setenv("EBDEVELIMKL", pathJoin(root, "easybuild/Core-imkl-2018.3.222-easybuild-devel"))
                                                                setenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/examples/")
                                                                prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                                                                setenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl")
                                                                -- Built with EasyBuild version 3.6.2-r1ed7dac97acd22d6301e534c78048f7fcedaa585
                                                              } ModuleFile
                                                              help(...){
                                                              } help
                                                              whatis(Description: Intel Math Kernel Library is a library of highly optimized,
 extensively threaded math routines for science, engineering, and financial
 applications that require maximum performance. Core math functions include
 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.){
                                                              } whatis
                                                              whatis(Homepage: http://software.intel.com/en-us/intel-mkl/){
                                                              } whatis
                                                              conflict(imkl){
                                                                MasterControl:conflict(mA){
                                                                  Mname:sn(){
                                                                  } Mname:sn
                                                                } MasterControl:conflict
                                                              }
                                                              prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/include){
                                                                MasterControl:prepend_path(t){
                                                                  name:"CPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/include", delim=":", nodups="true", priority=0
                                                                } MasterControl:prepend_path
                                                              } prepend_path
                                                              prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/include/fftw){
                                                                MasterControl:prepend_path(t){
                                                                  name:"CPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/include/fftw", delim=":", nodups="true", priority=0
                                                                } MasterControl:prepend_path
                                                              } prepend_path
                                                              prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/lib/intel64){
                                                                MasterControl:prepend_path(t){
                                                                  name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/lib/intel64", delim=":", nodups="true", priority=0
                                                                } MasterControl:prepend_path
                                                              } prepend_path
                                                              prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/lib/intel64){
                                                                MasterControl:prepend_path(t){
                                                                  name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/lib/intel64", delim=":", nodups="true", priority=0
                                                                } MasterControl:prepend_path
                                                              } prepend_path
                                                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/bin){
                                                                MasterControl:prepend_path(t){
                                                                  name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/bin", delim=":", nodups="true", priority=0
                                                                } MasterControl:prepend_path
                                                              } prepend_path
                                                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/bin){
                                                                MasterControl:prepend_path(t){
                                                                  name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/bin", delim=":", nodups="true", priority=0
                                                                } MasterControl:prepend_path
                                                              } prepend_path
                                                              setenv(EBROOTIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222){
                                                                MasterControl:setenv("EBROOTIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222", "nil"){
                                                                } MasterControl:setenv
                                                              } setenv
                                                              setenv(EBVERSIONIMKL, 2018.3.222){
                                                                MasterControl:setenv("EBVERSIONIMKL", "2018.3.222", "nil"){
                                                                } MasterControl:setenv
                                                              } setenv
                                                              setenv(EBDEVELIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/easybuild/Core-imkl-2018.3.222-easybuild-devel){
                                                                MasterControl:setenv("EBDEVELIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/easybuild/Core-imkl-2018.3.222-easybuild-devel", "nil"){
                                                                } MasterControl:setenv
                                                              } setenv
                                                              setenv(MKL_EXAMPLES, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/examples/){
                                                                MasterControl:setenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/examples/", "nil"){
                                                                } MasterControl:setenv
                                                              } setenv
                                                              prepend_path(NLSPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/idb/intel64/locale/%l_%t/%N){
                                                                MasterControl:prepend_path(t){
                                                                  name:"NLSPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0
                                                                } MasterControl:prepend_path
                                                              } prepend_path
                                                              setenv(MKLROOT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl){
                                                                MasterControl:setenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl", "nil"){
                                                                } MasterControl:setenv
                                                              } setenv
                                                            } loadModuleFile
                                                            Marking imkl/2018.3.222 as active and loaded
                                                            safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): false
                                                          } Master:load
                                                          MasterControl:registerAdminMsg(mA){
                                                          } MasterControl:registerAdminMsg
                                                        } MasterControl:load
                                                      } MasterControl:load_usr
                                                      Setting mcp to MC_Load
                                                      safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): false
                                                    } Master:load
                                                    MasterControl:registerAdminMsg(mA){
                                                    } MasterControl:registerAdminMsg
                                                  } MasterControl:load
                                                } MasterControl:load_usr
                                              } always_load
                                              family(compiler){
                                                MasterControl:family(compiler){
                                                  Mname:sn(){
                                                  } Mname:sn
                                                  MasterControl:setenv("LMOD_FAMILY_COMPILER", "intel", "nil"){
                                                  } MasterControl:setenv
                                                  MasterControl:setenv("LMOD_FAMILY_COMPILER_VERSION", "2018.3", "nil"){
                                                  } MasterControl:setenv
                                                  MasterControl:setenv("LMOD_FAMILY_COMPILER", "intel", "nil"){
                                                  } MasterControl:setenv
                                                  MasterControl:setenv("LMOD_FAMILY_COMPILER_VERSION", "2018.3", "nil"){
                                                  } MasterControl:setenv
                                                } MasterControl:family
                                              } family
                                            } loadModuleFile
                                            Marking intel/2018.3 as active and loaded
                                            safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): false
                                          } Master:load
                                          MasterControl:registerAdminMsg(mA){
                                          } MasterControl:registerAdminMsg
                                        } MasterControl:load
                                      } MasterControl:load_usr
                                    } load_module
                                    load_module(openmpi/3.1.2){
                                      cmd: load argA.n: 1
                                      mcp:name(): MC_Load
                                      MasterControl:load_usr(mA={openmpi/3.1.2}){
                                        registerUserLoads(mA){
                                          userName: openmpi/3.1.2
                                        } registerUserLoads
                                        MasterControl:load(mA={openmpi/3.1.2}){
                                          Master:singleton(safe: nil){
                                            s_master: table: 0x115ce70, safe: true
                                          } Master:singleton
                                          Master:load(mA={openmpi/3.1.2}){
                                            Master:load i: 1, userName: openmpi/3.1.2
                                            Mname:sn(){
                                            } Mname:sn
    (28)(4)Loading: openmpi/3.1.2 (fn: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3/openmpi/3.1.2.lua, using Find-Best)
                                            Master:load i: 1 sn: openmpi fn: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3/openmpi/3.1.2.lua
                                            Master:loading: "openmpi/3.1.2" from file: "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3/openmpi/3.1.2.lua"
                                            loadModuleFile(ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3/openmpi/3.1.2.lua){
                                              ModuleFile{
                                                help([==[
                                                Description
                                                ===========
                                                The Open MPI Project is an open source MPI-3 implementation.
                                                More information
                                                ================
                                                 - Homepage: http://www.open-mpi.org/
                                                ]==])
                                                whatis([==[Description: The Open MPI Project is an open source MPI-3 implementation.]==])
                                                whatis([==[Homepage: http://www.open-mpi.org/]==])
                                                local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2"
                                                conflict("openmpi")
                                                local mroot = os.getenv("MODULEPATH_ROOT")
                                                prepend_path("MODULEPATH", pathJoin(mroot,"avx512/MPI/intel2018.3/openmpi3.1"))
                                                prepend_path("CPATH", pathJoin(root, "include"))
                                                prepend_path("LIBRARY_PATH", pathJoin(root, "lib"))
                                                prepend_path("MANPATH", pathJoin(root, "share/man"))
                                                prepend_path("PATH", pathJoin(root, "bin"))
                                                prepend_path("PKG_CONFIG_PATH", pathJoin(root, "lib/pkgconfig"))
                                                setenv("EBROOTOPENMPI", root)
                                                setenv("EBVERSIONOPENMPI", "3.1.2")
                                                setenv("EBDEVELOPENMPI", pathJoin(root, "easybuild/avx512-Compiler-intel2018.3-openmpi-3.1.2-easybuild-devel"))
                                                setenv("SLURM_MPI_TYPE", "pmi2")
                                                setenv("OMPI_MCA_mtl", "^mxm")
                                                if os.getenv("RSNT_INTERCONNECT") == "omnipath" then
                                                        setenv("OMPI_MCA_pml", "^ucx,yalla")
                                                else
                                                        setenv("OMPI_MCA_pml", "^yalla")
                                                end
                                                family("mpi")
                                                -- Built with EasyBuild version 3.7.0
                                              } ModuleFile
                                              help(...){
                                              } help
                                              whatis(Description: The Open MPI Project is an open source MPI-3 implementation.){
                                              } whatis
                                              whatis(Homepage: http://www.open-mpi.org/){
                                              } whatis
                                              conflict(openmpi){
                                                MasterControl:conflict(mA){
                                                  Mname:sn(){
                                                  } Mname:sn
                                                } MasterControl:conflict
                                              }
                                              prepend_path(MODULEPATH, ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2018.3/openmpi3.1){
                                                MasterControl:prepend_path(t){
                                                  name:"MODULEPATH", value: "ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2018.3/openmpi3.1", delim=":", nodups="true", priority=0
      Prepending: ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2018.3/openmpi3.1 to MODULEPATH
                                                  chkMP("MODULEPATH", value: ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2018.3/openmpi3.1:ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3:ProjectDIR/rt/cc/cc_mf/Core-avx512:ProjectDIR/rt/cc/cc_mf/modules-avx512:ProjectDIR/rt/cc/cc_mf/modules, adding:true){
                                                    MT:set_MPATH_change_flag(self)
                                                    ModuleA:update(spider_cache=false){
                                                      Reusing mpath: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3
                                                      Reusing mpath: ProjectDIR/rt/cc/cc_mf/Core-avx512
                                                      Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules-avx512
                                                      Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules
                                                    } ModuleA:update
                                                  } chkMP
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/include){
                                                MasterControl:prepend_path(t){
                                                  name:"CPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/include", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/lib){
                                                MasterControl:prepend_path(t){
                                                  name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/lib", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/share/man){
                                                MasterControl:prepend_path(t){
                                                  name:"MANPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/share/man", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/bin){
                                                MasterControl:prepend_path(t){
                                                  name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/bin", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(PKG_CONFIG_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/lib/pkgconfig){
                                                MasterControl:prepend_path(t){
                                                  name:"PKG_CONFIG_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/lib/pkgconfig", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              setenv(EBROOTOPENMPI, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2){
                                                MasterControl:setenv("EBROOTOPENMPI", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(EBVERSIONOPENMPI, 3.1.2){
                                                MasterControl:setenv("EBVERSIONOPENMPI", "3.1.2", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(EBDEVELOPENMPI, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/easybuild/avx512-Compiler-intel2018.3-openmpi-3.1.2-easybuild-devel){
                                                MasterControl:setenv("EBDEVELOPENMPI", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/easybuild/avx512-Compiler-intel2018.3-openmpi-3.1.2-easybuild-devel", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(SLURM_MPI_TYPE, pmi2){
                                                MasterControl:setenv("SLURM_MPI_TYPE", "pmi2", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(OMPI_MCA_mtl, ^mxm){
                                                MasterControl:setenv("OMPI_MCA_mtl", "^mxm", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(OMPI_MCA_pml, ^yalla){
                                                MasterControl:setenv("OMPI_MCA_pml", "^yalla", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              family(mpi){
                                                MasterControl:family(mpi){
                                                  Mname:sn(){
                                                  } Mname:sn
                                                  MasterControl:setenv("LMOD_FAMILY_MPI", "openmpi", "nil"){
                                                  } MasterControl:setenv
                                                  MasterControl:setenv("LMOD_FAMILY_MPI_VERSION", "3.1.2", "nil"){
                                                  } MasterControl:setenv
                                                  MasterControl:setenv("LMOD_FAMILY_MPI", "openmpi", "nil"){
                                                  } MasterControl:setenv
                                                  MasterControl:setenv("LMOD_FAMILY_MPI_VERSION", "3.1.2", "nil"){
                                                  } MasterControl:setenv
                                                } MasterControl:family
                                              } family
                                            } loadModuleFile
                                            Marking openmpi/3.1.2 as active and loaded
                                            safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): false
                                          } Master:load
                                          MasterControl:registerAdminMsg(mA){
                                          } MasterControl:registerAdminMsg
                                        } MasterControl:load
                                      } MasterControl:load_usr
                                    } load_module
                                  } loadModuleFile
                                  Marking StdEnv/2018.3 as active and loaded
                                  safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): true
                                  Master:load calling reloadAll()
                                  Master:reloadAll(count: 5){
                                    Setting mcp to MC_Load
  reloadAll(5)(arch/avx512, nixpkgs/16.09, gcccore/.7.3.0, icc/.2018.3.222, ifort/.2018.3.222, imkl/2018.3.222, intel/2018.3, openmpi/3.1.2, StdEnv)
                                    Mname:sn(){
                                    } Mname:sn
                                    a[i].userName(1): arch/avx512
                                    adding sn: arch to mA
                                    module sn: arch is active
                                    userName(2):  arch/avx512
                                    Mname:fn(){
                                      LocationT:new(moduleA){
                                        LocationT build(moduleA){
                                        } LocationT build
                                      } LocationT:new
                                    } Mname:fn
                                    Mname:sn(){
                                    } Mname:sn
                                    a[i].userName(1): nixpkgs/16.09
                                    adding sn: nixpkgs to mA
                                    module sn: nixpkgs is active
                                    userName(2):  nixpkgs/16.09
                                    Mname:fn(){
                                    } Mname:fn
                                    Mname:sn(){
                                    } Mname:sn
                                    a[i].userName(1): gcccore/.7.3.0
                                    adding sn: gcccore to mA
                                    module sn: gcccore is active
                                    userName(2):  gcccore/.7.3.0
                                    Mname:fn(){
                                    } Mname:fn
                                    Mname:sn(){
                                    } Mname:sn
                                    a[i].userName(1): icc/.2018.3.222
                                    adding sn: icc to mA
                                    module sn: icc is active
                                    userName(2):  icc/.2018.3.222
                                    Mname:fn(){
                                    } Mname:fn
                                    Mname:sn(){
                                    } Mname:sn
                                    a[i].userName(1): ifort/.2018.3.222
                                    adding sn: ifort to mA
                                    module sn: ifort is active
                                    userName(2):  ifort/.2018.3.222
                                    Mname:fn(){
                                    } Mname:fn
                                    Mname:sn(){
                                    } Mname:sn
                                    a[i].userName(1): imkl/2018.3.222
                                    adding sn: imkl to mA
                                    module sn: imkl is active
                                    userName(2):  imkl/2018.3.222
                                    Mname:fn(){
                                    } Mname:fn
                                    Mname:sn(){
                                    } Mname:sn
                                    a[i].userName(1): intel/2018.3
                                    adding sn: intel to mA
                                    module sn: intel is active
                                    userName(2):  intel/2018.3
                                    Mname:fn(){
                                    } Mname:fn
                                    Mname:sn(){
                                    } Mname:sn
                                    a[i].userName(1): openmpi/3.1.2
                                    adding sn: openmpi to mA
                                    module sn: openmpi is active
                                    userName(2):  openmpi/3.1.2
                                    Mname:fn(){
                                    } Mname:fn
                                    Mname:sn(){
                                    } Mname:sn
                                    a[i].userName(1): StdEnv
                                    adding sn: StdEnv to mA
                                    module sn: StdEnv is active
                                    userName(2):  StdEnv
                                    Mname:fn(){
                                    } Mname:fn
                                    checking sn: arch
                                    checking sn: nixpkgs
                                    checking sn: gcccore
                                    checking sn: icc
                                    checking sn: ifort
                                    checking sn: imkl
                                    checking sn: intel
                                    checking sn: openmpi
                                    checking sn: StdEnv
                                    Setting mpc to MC_Load
                                  } Master:reloadAll
                                  RTM: same: true
                                } Master:load
                                MasterControl:registerAdminMsg(mA){
                                } MasterControl:registerAdminMsg
                              } MasterControl:load
                              status true, fn_old: ProjectDIR/rt/cc/cc_mf/modules/StdEnv/2016.4.lua, fn: ProjectDIR/rt/cc/cc_mf/modules-avx512/StdEnv/2018.3.lua
                              Master:reloadAll module: StdEnv/2018.3 marked as reloaded
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): arch/avx512
                              adding sn: arch to mA
                              module sn: arch is active
                              userName(2):  arch/avx512
                              Mname:fn(){
                              } Mname:fn
                              checking sn: StdEnv
                              checking sn: arch
                              Setting mpc to MC_Unload
                            } Master:reloadAll
                            Setting mcp to MC_Load
                          } Master:unload
                        } MasterControl:unload
                        Master:reloadAll(3): mt:userName(sn): "openmpi/2.1.1"
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): StdEnv
                        adding sn: StdEnv to mA
                        module sn: StdEnv is active
                        userName(2):  StdEnv
                        Mname:fn(){
                        } Mname:fn
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): arch/avx512
                        adding sn: arch to mA
                        module sn: arch is active
                        userName(2):  arch/avx512
                        Mname:fn(){
                        } Mname:fn
                        checking sn: openmpi
                        checking sn: StdEnv
                        checking sn: arch
                        Setting mpc to MC_Unload
                      } Master:reloadAll
                      Setting mcp to MC_Load
                    } Master:unload
                  } MasterControl:unload
                  Master:reloadAll(2): mt:userName(sn): "intel/2016.4"
                  Master:reloadAll(2): Loading module: "intel/2016.4"
                  MasterControl:load(mA={intel/2016.4}){
                    Master:singleton(safe: nil){
                      s_master: table: 0x115ce70, safe: true
                    } Master:singleton
                    Master:load(mA={intel/2016.4}){
                      Master:load i: 1, userName: intel/2016.4
  (29)(2)Loading: intel/2016.4 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua, using Find-Best)
                      Master:load i: 1 sn: intel fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua
                      mnV: 2016.4, mtV: 2018.3
                      Setting mcp to MC_Load
                      Master:singleton(safe: nil){
                        s_master: table: 0x115ce70, safe: true
                      } Master:singleton
                      MasterControl:unload(mA={intel}){
                        unRegisterUserLoads(mA){
                          userName: intel
                        } unRegisterUserLoads
                        Master:unload(mA={intel}){
                          MasterControl:_setMode("unload"){
                          } MasterControl:_setMode
                          Setting mcp to MC_Unload
                          Setting mcp to MC_Unload
                          Mname:fullName(){
                          } Mname:fullName
  (30)(2)Unloading: intel (status: active) (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2018.3.lua)
                          Trying to unload: intel sn: intel
                          Master:unload: "intel" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2018.3.lua"
                          loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2018.3.lua){
                            ModuleFile{
                              help([==[
                              Description
                              ===========
                              Intel C, C++ & Fortran compilers
                              More information
                              ================
                               - Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/
                              ]==])
                              whatis([==[Description: Intel C, C++ & Fortran compilers]==])
                              whatis([==[Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/]==])
                              local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2018.3"
                              conflict("intel")
                              depends_on("icc/.2018.3.222")
                              depends_on("ifort/.2018.3.222")
                              setenv("EBROOTICCIFORT", root)
                              setenv("EBVERSIONICCIFORT", "2018.3")
                              setenv("EBDEVELICCIFORT", pathJoin(root, "easybuild/Core-intel-2018.3-easybuild-devel"))
                              prepend_path("INTEL_LICENSE_FILE", pathJoin("/cvmfs/soft.computecanada.ca/config/licenses/intel", os.getenv("CC_CLUSTER") .. ".lic"))
                              local mroot = os.getenv("MODULEPATH_ROOT")
                              prepend_path("MODULEPATH", pathJoin(pathJoin(mroot, os.getenv("RSNT_ARCH"), "Compiler/intel2018.3")))
                              if isloaded("imkl") then
                                  always_load("imkl/2018.3.222")
                              end
                              family("compiler")
                              -- Built with EasyBuild version 3.7.0-rc7b39e420d4f1af2b79028319dfd5ed90b504390
                            } ModuleFile
                            help(...){
                            } help
                            whatis(Description: Intel C, C++ & Fortran compilers){
                            } whatis
                            whatis(Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/){
                            } whatis
                            conflict(intel){
                            }
                            depends_on(icc/.2018.3.222){
                              Master:singleton(safe: nil){
                                s_master: table: 0x115ce70, safe: true
                              } Master:singleton
                              MasterControl:forgo(mA={icc/.2018.3.222}){
                                Mname:sn(){
                                } Mname:sn
                                unRegisterUserLoads(mA){
                                  userName: icc/.2018.3.222
                                } unRegisterUserLoads
                                Master:unload(mA={icc/.2018.3.222}){
                                  MasterControl:_setMode("unload"){
                                  } MasterControl:_setMode
                                  Setting mcp to MC_Unload
                                  Setting mcp to MC_Unload
    (31)(2)Unloading: icc/.2018.3.222 (status: active) (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2018.3.222.lua)
                                  Trying to unload: icc/.2018.3.222 sn: icc
                                  Master:unload: "icc/.2018.3.222" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2018.3.222.lua"
                                  loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2018.3.222.lua){
                                    ModuleFile{
                                      help([==[
                                      Description
                                      ===========
                                      Intel C and C++ compilers
                                      More information
                                      ================
                                       - Homepage: http://software.intel.com/en-us/intel-compilers/
                                      ]==])
                                      whatis([==[Description: Intel C and C++ compilers]==])
                                      whatis([==[Homepage: http://software.intel.com/en-us/intel-compilers/]==])
                                      local root = "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222"
                                      conflict("icc")
                                      depends_on("gcccore/.7.3.0")
                                      prepend_path("CPATH", pathJoin(root, "compilers_and_libraries_2018.3.222/linux/tbb/include"))
                                      prepend_path("LIBRARY_PATH", pathJoin(root, "compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64"))
                                      prepend_path("LIBRARY_PATH", pathJoin(root, "compilers_and_libraries_2018.3.222/linux/tbb/lib/intel64/gcc4.4"))
                                      prepend_path("MANPATH", pathJoin(root, "compilers_and_libraries_2018.3.222/linux/man/common"))
                                      prepend_path("PATH", pathJoin(root, "compilers_and_libraries_2018.3.222/linux/bin/intel64"))
                                      prepend_path("TBBROOT", pathJoin(root, "compilers_and_libraries_2018.3.222/linux/tbb"))
                                      setenv("EBROOTICC", root)
                                      setenv("EBVERSIONICC", "2018.3.222")
                                      setenv("EBDEVELICC", pathJoin(root, "easybuild/Core-icc-.2018.3.222-easybuild-devel"))
                                      prepend_path("LIBRARY_PATH", pathJoin(root:gsub("/restricted.computecanada.ca/","/soft.computecanada.ca/"), "compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64"))
                                      prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                                      setenv("INTEL_PYTHONHOME", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/debugger_2018/python/intel64")
                                      -- Built with EasyBuild version 3.6.2-r1ed7dac97acd22d6301e534c78048f7fcedaa585
                                    } ModuleFile
                                    help(...){
                                    } help
                                    whatis(Description: Intel C and C++ compilers){
                                    } whatis
                                    whatis(Homepage: http://software.intel.com/en-us/intel-compilers/){
                                    } whatis
                                    conflict(icc){
                                    }
                                    depends_on(gcccore/.7.3.0){
                                      Master:singleton(safe: nil){
                                        s_master: table: 0x115ce70, safe: true
                                      } Master:singleton
                                      MasterControl:forgo(mA={gcccore/.7.3.0}){
                                        Mname:sn(){
                                        } Mname:sn
                                        unRegisterUserLoads(mA){
                                        } unRegisterUserLoads
                                        Master:unload(mA={}){
                                          MasterControl:_setMode("unload"){
                                          } MasterControl:_setMode
                                          Setting mcp to MC_Unload
                                          Setting mcp to MC_Unload
                                          safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                          Setting mcp to MC_Unload
                                        } Master:unload
                                      } MasterControl:forgo
                                    } depends_on
                                    prepend_path(CPATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/tbb/include){
                                      MasterControl:remove_path{"CPATH", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/tbb/include", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    prepend_path(LIBRARY_PATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64){
                                      MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    prepend_path(LIBRARY_PATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/tbb/lib/intel64/gcc4.4){
                                      MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/tbb/lib/intel64/gcc4.4", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    prepend_path(MANPATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/man/common){
                                      MasterControl:remove_path{"MANPATH", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/man/common", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    prepend_path(PATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/bin/intel64){
                                      MasterControl:remove_path{"PATH", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/bin/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    prepend_path(TBBROOT, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/tbb){
                                      MasterControl:remove_path{"TBBROOT", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/tbb", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    setenv(EBROOTICC, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222){
                                      MasterControl:unsetenv("EBROOTICC", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222"){
                                      } MasterControl:unsetenv
                                    } setenv
                                    setenv(EBVERSIONICC, 2018.3.222){
                                      MasterControl:unsetenv("EBVERSIONICC", "2018.3.222"){
                                      } MasterControl:unsetenv
                                    } setenv
                                    setenv(EBDEVELICC, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/easybuild/Core-icc-.2018.3.222-easybuild-devel){
                                      MasterControl:unsetenv("EBDEVELICC", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/easybuild/Core-icc-.2018.3.222-easybuild-devel"){
                                      } MasterControl:unsetenv
                                    } setenv
                                    prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64){
                                      MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    prepend_path(NLSPATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/idb/intel64/locale/%l_%t/%N){
                                      MasterControl:remove_path{"NLSPATH", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    setenv(INTEL_PYTHONHOME, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/debugger_2018/python/intel64){
                                      MasterControl:unsetenv("INTEL_PYTHONHOME", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/icc/2018.3.222/debugger_2018/python/intel64"){
                                      } MasterControl:unsetenv
                                    } setenv
                                  } loadModuleFile
                                  safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                  Setting mcp to MC_Unload
                                } Master:unload
                              } MasterControl:forgo
                            } depends_on
                            depends_on(ifort/.2018.3.222){
                              Master:singleton(safe: nil){
                                s_master: table: 0x115ce70, safe: true
                              } Master:singleton
                              MasterControl:forgo(mA={ifort/.2018.3.222}){
                                Mname:sn(){
                                } Mname:sn
                                unRegisterUserLoads(mA){
                                  userName: ifort/.2018.3.222
                                } unRegisterUserLoads
                                Master:unload(mA={ifort/.2018.3.222}){
                                  MasterControl:_setMode("unload"){
                                  } MasterControl:_setMode
                                  Setting mcp to MC_Unload
                                  Setting mcp to MC_Unload
    (32)(2)Unloading: ifort/.2018.3.222 (status: active) (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2018.3.222.lua)
                                  Trying to unload: ifort/.2018.3.222 sn: ifort
                                  Master:unload: "ifort/.2018.3.222" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2018.3.222.lua"
                                  loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2018.3.222.lua){
                                    ModuleFile{
                                      help([==[
                                      Description
                                      ===========
                                      Intel Fortran compiler
                                      More information
                                      ================
                                       - Homepage: http://software.intel.com/en-us/intel-compilers/
                                      ]==])
                                      whatis([==[Description: Intel Fortran compiler]==])
                                      whatis([==[Homepage: http://software.intel.com/en-us/intel-compilers/]==])
                                      local root = "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222"
                                      conflict("ifort")
                                      depends_on("gcccore/.7.3.0")
                                      prepend_path("CPATH", pathJoin(root, "include"))
                                      prepend_path("LIBRARY_PATH", pathJoin(root, "compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64"))
                                      prepend_path("MANPATH", pathJoin(root, "compilers_and_libraries_2018.3.222/linux/man/common"))
                                      prepend_path("PATH", pathJoin(root, "compilers_and_libraries_2018.3.222/linux/bin/intel64"))
                                      setenv("EBROOTIFORT", root)
                                      setenv("EBVERSIONIFORT", "2018.3.222")
                                      setenv("EBDEVELIFORT", pathJoin(root, "easybuild/Core-ifort-.2018.3.222-easybuild-devel"))
                                      prepend_path("LIBRARY_PATH", pathJoin(root:gsub("/restricted.computecanada.ca/","/soft.computecanada.ca/"), "compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64"))
                                      prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                                      setenv("INTEL_PYTHONHOME", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/debugger_2018/python/intel64")
                                      -- Built with EasyBuild version 3.6.2-r1ed7dac97acd22d6301e534c78048f7fcedaa585
                                    } ModuleFile
                                    help(...){
                                    } help
                                    whatis(Description: Intel Fortran compiler){
                                    } whatis
                                    whatis(Homepage: http://software.intel.com/en-us/intel-compilers/){
                                    } whatis
                                    conflict(ifort){
                                    }
                                    depends_on(gcccore/.7.3.0){
                                      Master:singleton(safe: nil){
                                        s_master: table: 0x115ce70, safe: true
                                      } Master:singleton
                                      MasterControl:forgo(mA={gcccore/.7.3.0}){
                                        Mname:sn(){
                                        } Mname:sn
                                        unRegisterUserLoads(mA){
                                          userName: gcccore/.7.3.0
                                        } unRegisterUserLoads
                                        Master:unload(mA={gcccore/.7.3.0}){
                                          MasterControl:_setMode("unload"){
                                          } MasterControl:_setMode
                                          Setting mcp to MC_Unload
                                          Setting mcp to MC_Unload
      (33)(2)Unloading: gcccore/.7.3.0 (status: active) (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.7.3.0.lua)
                                          Trying to unload: gcccore/.7.3.0 sn: gcccore
                                          Master:unload: "gcccore/.7.3.0" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.7.3.0.lua"
                                          loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.7.3.0.lua){
                                            ModuleFile{
                                              help([==[
                                              Description
                                              ===========
                                              The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,
                                               as well as libraries for these languages (libstdc++, libgcj,...).
                                              More information
                                              ================
                                               - Homepage: http://gcc.gnu.org/
                                              ]==])
                                              whatis([==[Description: The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,
                                               as well as libraries for these languages (libstdc++, libgcj,...).]==])
                                              whatis([==[Homepage: http://gcc.gnu.org/]==])
                                              local root = "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0"
                                              conflict("gcccore")
                                              prepend_path("CPATH", pathJoin(root, "include"))
                                              prepend_path("LIBRARY_PATH", pathJoin(root, "lib"))
                                              prepend_path("LIBRARY_PATH", pathJoin(root, "lib64"))
                                              prepend_path("MANPATH", pathJoin(root, "share/man"))
                                              prepend_path("PATH", pathJoin(root, "bin"))
                                              setenv("EBROOTGCCCORE", root)
                                              setenv("EBVERSIONGCCCORE", "7.3.0")
                                              setenv("EBDEVELGCCCORE", pathJoin(root, "easybuild/Core-gcccore-.7.3.0-easybuild-devel"))
                                              prepend_path("CPLUS_INCLUDE_PATH", pathJoin(root, "include/c++/7.3.0"))
                                              -- Built with EasyBuild version 3.5.1-rc1513f470261f1a4fa90a8ef6bd472f15ba085ed
                                            } ModuleFile
                                            help(...){
                                            } help
                                            whatis(Description: The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,
 as well as libraries for these languages (libstdc++, libgcj,...).){
                                            } whatis
                                            whatis(Homepage: http://gcc.gnu.org/){
                                            } whatis
                                            conflict(gcccore){
                                            }
                                            prepend_path(CPATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/include){
                                              MasterControl:remove_path{"CPATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/include", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/lib){
                                              MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/lib", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/lib64){
                                              MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/lib64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/share/man){
                                              MasterControl:remove_path{"MANPATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/share/man", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            prepend_path(PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/bin){
                                              MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            setenv(EBROOTGCCCORE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0){
                                              MasterControl:unsetenv("EBROOTGCCCORE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0"){
                                              } MasterControl:unsetenv
                                            } setenv
                                            setenv(EBVERSIONGCCCORE, 7.3.0){
                                              MasterControl:unsetenv("EBVERSIONGCCCORE", "7.3.0"){
                                              } MasterControl:unsetenv
                                            } setenv
                                            setenv(EBDEVELGCCCORE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/easybuild/Core-gcccore-.7.3.0-easybuild-devel){
                                              MasterControl:unsetenv("EBDEVELGCCCORE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/easybuild/Core-gcccore-.7.3.0-easybuild-devel"){
                                              } MasterControl:unsetenv
                                            } setenv
                                            prepend_path(CPLUS_INCLUDE_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/include/c++/7.3.0){
                                              MasterControl:remove_path{"CPLUS_INCLUDE_PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/include/c++/7.3.0", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                          } loadModuleFile
                                          safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                          Setting mcp to MC_Unload
                                        } Master:unload
                                      } MasterControl:forgo
                                    } depends_on
                                    prepend_path(CPATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/include){
                                      MasterControl:remove_path{"CPATH", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/include", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    prepend_path(LIBRARY_PATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64){
                                      MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    prepend_path(MANPATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/compilers_and_libraries_2018.3.222/linux/man/common){
                                      MasterControl:remove_path{"MANPATH", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/compilers_and_libraries_2018.3.222/linux/man/common", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    prepend_path(PATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/compilers_and_libraries_2018.3.222/linux/bin/intel64){
                                      MasterControl:remove_path{"PATH", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/compilers_and_libraries_2018.3.222/linux/bin/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    setenv(EBROOTIFORT, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222){
                                      MasterControl:unsetenv("EBROOTIFORT", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222"){
                                      } MasterControl:unsetenv
                                    } setenv
                                    setenv(EBVERSIONIFORT, 2018.3.222){
                                      MasterControl:unsetenv("EBVERSIONIFORT", "2018.3.222"){
                                      } MasterControl:unsetenv
                                    } setenv
                                    setenv(EBDEVELIFORT, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/easybuild/Core-ifort-.2018.3.222-easybuild-devel){
                                      MasterControl:unsetenv("EBDEVELIFORT", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/easybuild/Core-ifort-.2018.3.222-easybuild-devel"){
                                      } MasterControl:unsetenv
                                    } setenv
                                    prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64){
                                      MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    prepend_path(NLSPATH, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/idb/intel64/locale/%l_%t/%N){
                                      MasterControl:remove_path{"NLSPATH", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                      } MasterControl:remove_path
                                    } prepend_path
                                    setenv(INTEL_PYTHONHOME, /cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/debugger_2018/python/intel64){
                                      MasterControl:unsetenv("INTEL_PYTHONHOME", "/cvmfs/restricted.computecanada.ca/easybuild/software/2017/Core/ifort/2018.3.222/debugger_2018/python/intel64"){
                                      } MasterControl:unsetenv
                                    } setenv
                                  } loadModuleFile
                                  safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                  Setting mcp to MC_Unload
                                } Master:unload
                              } MasterControl:forgo
                            } depends_on
                            setenv(EBROOTICCIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2018.3){
                              MasterControl:unsetenv("EBROOTICCIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2018.3"){
                              } MasterControl:unsetenv
                            } setenv
                            setenv(EBVERSIONICCIFORT, 2018.3){
                              MasterControl:unsetenv("EBVERSIONICCIFORT", "2018.3"){
                              } MasterControl:unsetenv
                            } setenv
                            setenv(EBDEVELICCIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2018.3/easybuild/Core-intel-2018.3-easybuild-devel){
                              MasterControl:unsetenv("EBDEVELICCIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2018.3/easybuild/Core-intel-2018.3-easybuild-devel"){
                              } MasterControl:unsetenv
                            } setenv
                            prepend_path(INTEL_LICENSE_FILE, /cvmfs/soft.computecanada.ca/config/licenses/intel/computecanada.lic){
                              MasterControl:remove_path{"INTEL_LICENSE_FILE", "/cvmfs/soft.computecanada.ca/config/licenses/intel/computecanada.lic", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(MODULEPATH, ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3){
                              MasterControl:remove_path{"MODULEPATH", "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3", delim=":", nodups="true", priority=0, where=first, force=nil}{
    Removing: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3 from MODULEPATH
                                chkMP("MODULEPATH", value: ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2018.3/openmpi3.1:ProjectDIR/rt/cc/cc_mf/Core-avx512:ProjectDIR/rt/cc/cc_mf/modules-avx512:ProjectDIR/rt/cc/cc_mf/modules, adding:false){
                                  MT:set_MPATH_change_flag(self)
                                  ModuleA:update(spider_cache=false){
                                    Reusing mpath: ProjectDIR/rt/cc/cc_mf/Core-avx512
                                    Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules-avx512
                                    Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules
                                  } ModuleA:update
                                } chkMP
                              } MasterControl:remove_path
                            } prepend_path
                            isloaded(imkl){
                            } isloaded
                            MName:isloaded(){
                              Mname:sn(){
                              } Mname:sn
                            } MName:isloaded
                            always_load(imkl/2018.3.222){
                              cmd: always_load argA.n: 1
                            } always_load
                            family(compiler){
                              MasterControl:unset_family(compiler){
                                MasterControl:unsetenv("LMOD_FAMILY_COMPILER", ""){
                                } MasterControl:unsetenv
                                MasterControl:unsetenv("LMOD_FAMILY_COMPILER_VERSION", ""){
                                } MasterControl:unsetenv
                                MasterControl:unsetenv("LMOD_FAMILY_COMPILER", ""){
                                } MasterControl:unsetenv
                                MasterControl:unsetenv("LMOD_FAMILY_COMPILER_VERSION", ""){
                                } MasterControl:unsetenv
                              } MasterControl:unset_family
                            } family
                          } loadModuleFile
                          safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): true
                          Master:load calling reloadAll()
                          Master:reloadAll(count: 3){
                            Setting mcp to MC_Load
  reloadAll(3)(arch/avx512, nixpkgs/16.09, imkl/2018.3.222, openmpi/3.1.2, StdEnv)
                            Mname:sn(){
                            } Mname:sn
                            a[i].userName(1): arch/avx512
                            adding sn: arch to mA
                            module sn: arch is active
                            userName(2):  arch/avx512
                            Mname:fn(){
                              LocationT:new(moduleA){
                                LocationT build(moduleA){
                                } LocationT build
                              } LocationT:new
                            } Mname:fn
                            Mname:sn(){
                            } Mname:sn
                            a[i].userName(1): nixpkgs/16.09
                            adding sn: nixpkgs to mA
                            module sn: nixpkgs is active
                            userName(2):  nixpkgs/16.09
                            Mname:fn(){
                            } Mname:fn
                            Mname:sn(){
                            } Mname:sn
                            a[i].userName(1): imkl/2018.3.222
                            adding sn: imkl to mA
                            module sn: imkl is active
                            userName(2):  imkl/2018.3.222
                            Mname:fn(){
                            } Mname:fn
                            Mname:sn(){
                            } Mname:sn
                            a[i].userName(1): openmpi/3.1.2
                            adding sn: openmpi to mA
                            module sn: openmpi is active
                            userName(2):  openmpi/3.1.2
                            Mname:fn(){
                            } Mname:fn
                            Mname:fullName(){
                            } Mname:fullName
                            Master:reloadAll fn_new: "false" mt:fileName(sn): "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3/openmpi/3.1.2.lua" mt:userName(sn): "openmpi/3.1.2" a[i].userName: "openmpi/3.1.2"
                            Master:reloadAll(3): Unloading module: "openmpi"
                            Master:singleton(safe: nil){
                              s_master: table: 0x115ce70, safe: true
                            } Master:singleton
                            MasterControl:unload(mA={openmpi/3.1.2}){
                              unRegisterUserLoads(mA){
                                userName: openmpi/3.1.2
                              } unRegisterUserLoads
                              Master:unload(mA={openmpi/3.1.2}){
                                MasterControl:_setMode("unload"){
                                } MasterControl:_setMode
                                Setting mcp to MC_Unload
                                Setting mcp to MC_Unload
  (34)(3)Unloading: openmpi/3.1.2 (status: active) (fn: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3/openmpi/3.1.2.lua)
                                Trying to unload: openmpi/3.1.2 sn: openmpi
                                Master:unload: "openmpi/3.1.2" from file: "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3/openmpi/3.1.2.lua"
                                loadModuleFile(ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3/openmpi/3.1.2.lua){
                                  ModuleFile{
                                    help([==[
                                    Description
                                    ===========
                                    The Open MPI Project is an open source MPI-3 implementation.
                                    More information
                                    ================
                                     - Homepage: http://www.open-mpi.org/
                                    ]==])
                                    whatis([==[Description: The Open MPI Project is an open source MPI-3 implementation.]==])
                                    whatis([==[Homepage: http://www.open-mpi.org/]==])
                                    local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2"
                                    conflict("openmpi")
                                    local mroot = os.getenv("MODULEPATH_ROOT")
                                    prepend_path("MODULEPATH", pathJoin(mroot,"avx512/MPI/intel2018.3/openmpi3.1"))
                                    prepend_path("CPATH", pathJoin(root, "include"))
                                    prepend_path("LIBRARY_PATH", pathJoin(root, "lib"))
                                    prepend_path("MANPATH", pathJoin(root, "share/man"))
                                    prepend_path("PATH", pathJoin(root, "bin"))
                                    prepend_path("PKG_CONFIG_PATH", pathJoin(root, "lib/pkgconfig"))
                                    setenv("EBROOTOPENMPI", root)
                                    setenv("EBVERSIONOPENMPI", "3.1.2")
                                    setenv("EBDEVELOPENMPI", pathJoin(root, "easybuild/avx512-Compiler-intel2018.3-openmpi-3.1.2-easybuild-devel"))
                                    setenv("SLURM_MPI_TYPE", "pmi2")
                                    setenv("OMPI_MCA_mtl", "^mxm")
                                    if os.getenv("RSNT_INTERCONNECT") == "omnipath" then
                                            setenv("OMPI_MCA_pml", "^ucx,yalla")
                                    else
                                            setenv("OMPI_MCA_pml", "^yalla")
                                    end
                                    family("mpi")
                                    -- Built with EasyBuild version 3.7.0
                                  } ModuleFile
                                  help(...){
                                  } help
                                  whatis(Description: The Open MPI Project is an open source MPI-3 implementation.){
                                  } whatis
                                  whatis(Homepage: http://www.open-mpi.org/){
                                  } whatis
                                  conflict(openmpi){
                                  }
                                  prepend_path(MODULEPATH, ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2018.3/openmpi3.1){
                                    MasterControl:remove_path{"MODULEPATH", "ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2018.3/openmpi3.1", delim=":", nodups="true", priority=0, where=first, force=nil}{
    Removing: ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2018.3/openmpi3.1 from MODULEPATH
                                      chkMP("MODULEPATH", value: ProjectDIR/rt/cc/cc_mf/Core-avx512:ProjectDIR/rt/cc/cc_mf/modules-avx512:ProjectDIR/rt/cc/cc_mf/modules, adding:false){
                                        MT:set_MPATH_change_flag(self)
                                        ModuleA:update(spider_cache=false){
                                          Reusing mpath: ProjectDIR/rt/cc/cc_mf/Core-avx512
                                          Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules-avx512
                                          Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules
                                        } ModuleA:update
                                      } chkMP
                                    } MasterControl:remove_path
                                  } prepend_path
                                  prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/include){
                                    MasterControl:remove_path{"CPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/include", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                    } MasterControl:remove_path
                                  } prepend_path
                                  prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/lib){
                                    MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/lib", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                    } MasterControl:remove_path
                                  } prepend_path
                                  prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/share/man){
                                    MasterControl:remove_path{"MANPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/share/man", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                    } MasterControl:remove_path
                                  } prepend_path
                                  prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/bin){
                                    MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                    } MasterControl:remove_path
                                  } prepend_path
                                  prepend_path(PKG_CONFIG_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/lib/pkgconfig){
                                    MasterControl:remove_path{"PKG_CONFIG_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/lib/pkgconfig", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                    } MasterControl:remove_path
                                  } prepend_path
                                  setenv(EBROOTOPENMPI, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2){
                                    MasterControl:unsetenv("EBROOTOPENMPI", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2"){
                                    } MasterControl:unsetenv
                                  } setenv
                                  setenv(EBVERSIONOPENMPI, 3.1.2){
                                    MasterControl:unsetenv("EBVERSIONOPENMPI", "3.1.2"){
                                    } MasterControl:unsetenv
                                  } setenv
                                  setenv(EBDEVELOPENMPI, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/easybuild/avx512-Compiler-intel2018.3-openmpi-3.1.2-easybuild-devel){
                                    MasterControl:unsetenv("EBDEVELOPENMPI", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2018.3/openmpi/3.1.2/easybuild/avx512-Compiler-intel2018.3-openmpi-3.1.2-easybuild-devel"){
                                    } MasterControl:unsetenv
                                  } setenv
                                  setenv(SLURM_MPI_TYPE, pmi2){
                                    MasterControl:unsetenv("SLURM_MPI_TYPE", "pmi2"){
                                    } MasterControl:unsetenv
                                  } setenv
                                  setenv(OMPI_MCA_mtl, ^mxm){
                                    MasterControl:unsetenv("OMPI_MCA_mtl", "^mxm"){
                                    } MasterControl:unsetenv
                                  } setenv
                                  setenv(OMPI_MCA_pml, ^yalla){
                                    MasterControl:unsetenv("OMPI_MCA_pml", "^yalla"){
                                    } MasterControl:unsetenv
                                  } setenv
                                  family(mpi){
                                    MasterControl:unset_family(mpi){
                                      MasterControl:unsetenv("LMOD_FAMILY_MPI", ""){
                                      } MasterControl:unsetenv
                                      MasterControl:unsetenv("LMOD_FAMILY_MPI_VERSION", ""){
                                      } MasterControl:unsetenv
                                      MasterControl:unsetenv("LMOD_FAMILY_MPI", ""){
                                      } MasterControl:unsetenv
                                      MasterControl:unsetenv("LMOD_FAMILY_MPI_VERSION", ""){
                                      } MasterControl:unsetenv
                                    } MasterControl:unset_family
                                  } family
                                } loadModuleFile
                                safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): true
                                Master:load calling reloadAll()
                                Master:reloadAll(count: 4){
                                  Setting mcp to MC_Load
  reloadAll(4)(arch/avx512, nixpkgs/16.09, imkl/2018.3.222, StdEnv)
                                  Mname:sn(){
                                  } Mname:sn
                                  a[i].userName(1): arch/avx512
                                  adding sn: arch to mA
                                  module sn: arch is active
                                  userName(2):  arch/avx512
                                  Mname:fn(){
                                    LocationT:new(moduleA){
                                      LocationT build(moduleA){
                                      } LocationT build
                                    } LocationT:new
                                  } Mname:fn
                                  Mname:sn(){
                                  } Mname:sn
                                  a[i].userName(1): nixpkgs/16.09
                                  adding sn: nixpkgs to mA
                                  module sn: nixpkgs is active
                                  userName(2):  nixpkgs/16.09
                                  Mname:fn(){
                                  } Mname:fn
                                  Mname:sn(){
                                  } Mname:sn
                                  a[i].userName(1): imkl/2018.3.222
                                  adding sn: imkl to mA
                                  module sn: imkl is active
                                  userName(2):  imkl/2018.3.222
                                  Mname:fn(){
                                  } Mname:fn
                                  Mname:sn(){
                                  } Mname:sn
                                  a[i].userName(1): StdEnv
                                  adding sn: StdEnv to mA
                                  module sn: StdEnv is active
                                  userName(2):  StdEnv
                                  Mname:fn(){
                                  } Mname:fn
                                  checking sn: arch
                                  checking sn: nixpkgs
                                  checking sn: imkl
                                  checking sn: StdEnv
                                  Setting mpc to MC_Unload
                                } Master:reloadAll
                                Setting mcp to MC_Load
                              } Master:unload
                            } MasterControl:unload
                            Master:reloadAll(3): mt:userName(sn): "openmpi/3.1.2"
                            Mname:sn(){
                            } Mname:sn
                            a[i].userName(1): StdEnv
                            adding sn: StdEnv to mA
                            module sn: StdEnv is active
                            userName(2):  StdEnv
                            Mname:fn(){
                            } Mname:fn
                            checking sn: arch
                            checking sn: nixpkgs
                            checking sn: imkl
                            checking sn: openmpi
                            Master:reloadAll module: openmpi marked as inactive
                            checking sn: StdEnv
                            Setting mpc to MC_Unload
                          } Master:reloadAll
                          Setting mcp to MC_Load
                        } Master:unload
                      } MasterControl:unload
                      MasterControl:load_usr(mA={intel/2016.4}){
                        registerUserLoads(mA){
                          userName: intel/2016.4
                        } registerUserLoads
                        MasterControl:load(mA={intel/2016.4}){
                          Master:singleton(safe: nil){
                            s_master: table: 0x115ce70, safe: true
                          } Master:singleton
                          Master:load(mA={intel/2016.4}){
                            Master:load i: 1, userName: intel/2016.4
                            Mname:sn(){
                            } Mname:sn
  (35)(2)Loading: intel/2016.4 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua, using Find-Best)
                            Master:load i: 1 sn: intel fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua
                            Master:loading: "intel/2016.4" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua"
                            loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua){
                              ModuleFile{
                                help([==[
                                Description
                                ===========
                                Intel Cluster Toolkit Compiler Edition provides Intel C,C++ and fortran compilers, Intel MPI and Intel MKL
                                More information
                                ================
                                 - Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/
                                ]==])
                                whatis([==[Description: Intel Cluster Toolkit Compiler Edition provides Intel C,C++ and fortran compilers, Intel MPI and Intel MKL]==])
                                whatis([==[Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/]==])
                                local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4"
                                conflict("intel")
                                if not isloaded("icc/.2016.4.258") or mode() == "unload" then
                                    load("icc/.2016.4.258")
                                end
                                if not isloaded("ifort/.2016.4.258") or mode() == "unload" then
                                    load("ifort/.2016.4.258")
                                end
                                setenv("EBROOTICCIFORT", root)
                                setenv("EBVERSIONICCIFORT", "2016.4")
                                setenv("EBDEVELICCIFORT", pathJoin(root, "easybuild/Core-intel-2016.4-easybuild-devel"))
                                if isloaded("imkl") then
                                    always_load("imkl/11.3.4.258")
                                end
                                prepend_path("INTEL_LICENSE_FILE", pathJoin("/cvmfs/soft.computecanada.ca/config/licenses/intel", os.getenv("CC_CLUSTER") .. ".lic"))
                                local mroot = os.getenv("MODULEPATH_ROOT")
                                prepend_path("MODULEPATH", pathJoin(pathJoin(mroot, os.getenv("RSNT_ARCH"), "Compiler/intel2016.4")))
                                family("compiler")
                                -- Built with EasyBuild version 3.5.0-r9c88db64dba51c4ffd22799c06090d57aaf17e38
                              } ModuleFile
                              help(...){
                              } help
                              whatis(Description: Intel Cluster Toolkit Compiler Edition provides Intel C,C++ and fortran compilers, Intel MPI and Intel MKL){
                              } whatis
                              whatis(Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/){
                              } whatis
                              conflict(intel){
                                MasterControl:conflict(mA){
                                  Mname:sn(){
                                  } Mname:sn
                                } MasterControl:conflict
                              }
                              isloaded(icc/.2016.4.258){
                              } isloaded
                              MName:isloaded(){
                                Mname:sn(){
                                } Mname:sn
                              } MName:isloaded
                              load_module(icc/.2016.4.258){
                                cmd: load argA.n: 1
                                mcp:name(): MC_Load
                                MasterControl:load_usr(mA={icc/.2016.4.258}){
                                  registerUserLoads(mA){
                                    userName: icc/.2016.4.258
                                  } registerUserLoads
                                  MasterControl:load(mA={icc/.2016.4.258}){
                                    Master:singleton(safe: nil){
                                      s_master: table: 0x115ce70, safe: true
                                    } Master:singleton
                                    Master:load(mA={icc/.2016.4.258}){
                                      Master:load i: 1, userName: icc/.2016.4.258
                                      Mname:sn(){
                                      } Mname:sn
    (36)(2)Loading: icc/.2016.4.258 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua, using Find-Best)
                                      Master:load i: 1 sn: icc fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua
                                      Master:loading: "icc/.2016.4.258" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua"
                                      loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua){
                                        ModuleFile{
                                          help([==[
                                          Description
                                          ===========
                                          C and C++ compiler from Intel
                                          More information
                                          ================
                                           - Homepage: http://software.intel.com/en-us/intel-compilers/
                                          ]==])
                                          whatis([==[Description: C and C++ compiler from Intel]==])
                                          whatis([==[Homepage: http://software.intel.com/en-us/intel-compilers/]==])
                                          local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258"
                                          conflict("icc")
                                          if not isloaded("gcccore/.5.4.0") or mode() == "unload" then
                                              load("gcccore/.5.4.0")
                                          end
                                          prepend_path("LIBRARY_PATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64"))
                                          prepend_path("MANPATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/man/common"))
                                          prepend_path("PATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/bin/intel64"))
                                          setenv("EBROOTICC", root)
                                          setenv("EBVERSIONICC", "2016.4.258")
                                          setenv("EBDEVELICC", pathJoin(root, "easybuild/Core-icc-.2016.4.258-easybuild-devel"))
                                          prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                                          -- Built with EasyBuild version 3.5.0-r9c88db64dba51c4ffd22799c06090d57aaf17e38
                                        } ModuleFile
                                        help(...){
                                        } help
                                        whatis(Description: C and C++ compiler from Intel){
                                        } whatis
                                        whatis(Homepage: http://software.intel.com/en-us/intel-compilers/){
                                        } whatis
                                        conflict(icc){
                                          MasterControl:conflict(mA){
                                            Mname:sn(){
                                            } Mname:sn
                                          } MasterControl:conflict
                                        }
                                        isloaded(gcccore/.5.4.0){
                                        } isloaded
                                        MName:isloaded(){
                                          Mname:sn(){
                                          } Mname:sn
                                        } MName:isloaded
                                        load_module(gcccore/.5.4.0){
                                          cmd: load argA.n: 1
                                          mcp:name(): MC_Load
                                          MasterControl:load_usr(mA={gcccore/.5.4.0}){
                                            registerUserLoads(mA){
                                              userName: gcccore/.5.4.0
                                            } registerUserLoads
                                            MasterControl:load(mA={gcccore/.5.4.0}){
                                              Master:singleton(safe: nil){
                                                s_master: table: 0x115ce70, safe: true
                                              } Master:singleton
                                              Master:load(mA={gcccore/.5.4.0}){
                                                Master:load i: 1, userName: gcccore/.5.4.0
                                                Mname:sn(){
                                                } Mname:sn
      (37)(2)Loading: gcccore/.5.4.0 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua, using Find-Best)
                                                Master:load i: 1 sn: gcccore fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua
                                                Master:loading: "gcccore/.5.4.0" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua"
                                                loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua){
                                                  ModuleFile{
                                                    help([[
                                                    Description
                                                    ===========
                                                    The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,
                                                     as well as libraries for these languages (libstdc++, libgcj,...).
                                                    More information
                                                    ================
                                                     - Homepage: http://gcc.gnu.org/
                                                    ]])
                                                    whatis([[Description: The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,
                                                     as well as libraries for these languages (libstdc++, libgcj,...).]])
                                                    whatis([[Homepage: http://gcc.gnu.org/]])
                                                    local root = "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0"
                                                    conflict("gcccore")
                                                    prepend_path("CPATH", pathJoin(root, "include"))
                                                    prepend_path("LIBRARY_PATH", pathJoin(root, "lib"))
                                                    prepend_path("LIBRARY_PATH", pathJoin(root, "lib64"))
                                                    prepend_path("MANPATH", pathJoin(root, "share/man"))
                                                    prepend_path("PATH", pathJoin(root, "bin"))
                                                    setenv("EBROOTGCCCORE", root)
                                                    setenv("EBVERSIONGCCCORE", "5.4.0")
                                                    setenv("EBDEVELGCCCORE", pathJoin(root, "easybuild/Core-gcccore-.5.4.0-easybuild-devel"))
                                                    -- Built with EasyBuild version 3.3.0-re50b70af25207aec9b965a5c4aaa47ba992c9aa6
                                                  } ModuleFile
                                                  help(...){
                                                  } help
                                                  whatis(Description: The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,
 as well as libraries for these languages (libstdc++, libgcj,...).){
                                                  } whatis
                                                  whatis(Homepage: http://gcc.gnu.org/){
                                                  } whatis
                                                  conflict(gcccore){
                                                    MasterControl:conflict(mA){
                                                      Mname:sn(){
                                                      } Mname:sn
                                                    } MasterControl:conflict
                                                  }
                                                  prepend_path(CPATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/include){
                                                    MasterControl:prepend_path(t){
                                                      name:"CPATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/include", delim=":", nodups="true", priority=0
                                                    } MasterControl:prepend_path
                                                  } prepend_path
                                                  prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/lib){
                                                    MasterControl:prepend_path(t){
                                                      name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/lib", delim=":", nodups="true", priority=0
                                                    } MasterControl:prepend_path
                                                  } prepend_path
                                                  prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/lib64){
                                                    MasterControl:prepend_path(t){
                                                      name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/lib64", delim=":", nodups="true", priority=0
                                                    } MasterControl:prepend_path
                                                  } prepend_path
                                                  prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/share/man){
                                                    MasterControl:prepend_path(t){
                                                      name:"MANPATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/share/man", delim=":", nodups="true", priority=0
                                                    } MasterControl:prepend_path
                                                  } prepend_path
                                                  prepend_path(PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/bin){
                                                    MasterControl:prepend_path(t){
                                                      name:"PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/bin", delim=":", nodups="true", priority=0
                                                    } MasterControl:prepend_path
                                                  } prepend_path
                                                  setenv(EBROOTGCCCORE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0){
                                                    MasterControl:setenv("EBROOTGCCCORE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0", "nil"){
                                                    } MasterControl:setenv
                                                  } setenv
                                                  setenv(EBVERSIONGCCCORE, 5.4.0){
                                                    MasterControl:setenv("EBVERSIONGCCCORE", "5.4.0", "nil"){
                                                    } MasterControl:setenv
                                                  } setenv
                                                  setenv(EBDEVELGCCCORE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/easybuild/Core-gcccore-.5.4.0-easybuild-devel){
                                                    MasterControl:setenv("EBDEVELGCCCORE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/easybuild/Core-gcccore-.5.4.0-easybuild-devel", "nil"){
                                                    } MasterControl:setenv
                                                  } setenv
                                                } loadModuleFile
                                                Marking gcccore/.5.4.0 as active and loaded
                                                safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                              } Master:load
                                              MasterControl:registerAdminMsg(mA){
                                              } MasterControl:registerAdminMsg
                                            } MasterControl:load
                                          } MasterControl:load_usr
                                        } load_module
                                        prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64){
                                          MasterControl:prepend_path(t){
                                            name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64", delim=":", nodups="true", priority=0
                                          } MasterControl:prepend_path
                                        } prepend_path
                                        prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/man/common){
                                          MasterControl:prepend_path(t){
                                            name:"MANPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/man/common", delim=":", nodups="true", priority=0
                                          } MasterControl:prepend_path
                                        } prepend_path
                                        prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64){
                                          MasterControl:prepend_path(t){
                                            name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64", delim=":", nodups="true", priority=0
                                          } MasterControl:prepend_path
                                        } prepend_path
                                        setenv(EBROOTICC, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258){
                                          MasterControl:setenv("EBROOTICC", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258", "nil"){
                                          } MasterControl:setenv
                                        } setenv
                                        setenv(EBVERSIONICC, 2016.4.258){
                                          MasterControl:setenv("EBVERSIONICC", "2016.4.258", "nil"){
                                          } MasterControl:setenv
                                        } setenv
                                        setenv(EBDEVELICC, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/easybuild/Core-icc-.2016.4.258-easybuild-devel){
                                          MasterControl:setenv("EBDEVELICC", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/easybuild/Core-icc-.2016.4.258-easybuild-devel", "nil"){
                                          } MasterControl:setenv
                                        } setenv
                                        prepend_path(NLSPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/idb/intel64/locale/%l_%t/%N){
                                          MasterControl:prepend_path(t){
                                            name:"NLSPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0
                                          } MasterControl:prepend_path
                                        } prepend_path
                                      } loadModuleFile
                                      Marking icc/.2016.4.258 as active and loaded
                                      safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                    } Master:load
                                    MasterControl:registerAdminMsg(mA){
                                    } MasterControl:registerAdminMsg
                                  } MasterControl:load
                                } MasterControl:load_usr
                              } load_module
                              isloaded(ifort/.2016.4.258){
                              } isloaded
                              MName:isloaded(){
                                Mname:sn(){
                                } Mname:sn
                              } MName:isloaded
                              load_module(ifort/.2016.4.258){
                                cmd: load argA.n: 1
                                mcp:name(): MC_Load
                                MasterControl:load_usr(mA={ifort/.2016.4.258}){
                                  registerUserLoads(mA){
                                    userName: ifort/.2016.4.258
                                  } registerUserLoads
                                  MasterControl:load(mA={ifort/.2016.4.258}){
                                    Master:singleton(safe: nil){
                                      s_master: table: 0x115ce70, safe: true
                                    } Master:singleton
                                    Master:load(mA={ifort/.2016.4.258}){
                                      Master:load i: 1, userName: ifort/.2016.4.258
                                      Mname:sn(){
                                      } Mname:sn
    (38)(2)Loading: ifort/.2016.4.258 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua, using Find-Best)
                                      Master:load i: 1 sn: ifort fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua
                                      Master:loading: "ifort/.2016.4.258" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua"
                                      loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua){
                                        ModuleFile{
                                          help([==[
                                          Description
                                          ===========
                                          Fortran compiler from Intel
                                          More information
                                          ================
                                           - Homepage: http://software.intel.com/en-us/intel-compilers/
                                          ]==])
                                          whatis([==[Description: Fortran compiler from Intel]==])
                                          whatis([==[Homepage: http://software.intel.com/en-us/intel-compilers/]==])
                                          local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258"
                                          conflict("ifort")
                                          if not isloaded("gcccore/.5.4.0") or mode() == "unload" then
                                              load("gcccore/.5.4.0")
                                          end
                                          prepend_path("LIBRARY_PATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64"))
                                          prepend_path("MANPATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/man/common"))
                                          prepend_path("PATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/bin/intel64"))
                                          setenv("EBROOTIFORT", root)
                                          setenv("EBVERSIONIFORT", "2016.4.258")
                                          setenv("EBDEVELIFORT", pathJoin(root, "easybuild/Core-ifort-.2016.4.258-easybuild-devel"))
                                          prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                                          -- Built with EasyBuild version 3.5.0-r9c88db64dba51c4ffd22799c06090d57aaf17e38
                                        } ModuleFile
                                        help(...){
                                        } help
                                        whatis(Description: Fortran compiler from Intel){
                                        } whatis
                                        whatis(Homepage: http://software.intel.com/en-us/intel-compilers/){
                                        } whatis
                                        conflict(ifort){
                                          MasterControl:conflict(mA){
                                            Mname:sn(){
                                            } Mname:sn
                                          } MasterControl:conflict
                                        }
                                        isloaded(gcccore/.5.4.0){
                                        } isloaded
                                        MName:isloaded(){
                                          Mname:sn(){
                                          } Mname:sn
                                        } MName:isloaded
                                        prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64){
                                          MasterControl:prepend_path(t){
                                            name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64", delim=":", nodups="true", priority=0
                                          } MasterControl:prepend_path
                                        } prepend_path
                                        prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/man/common){
                                          MasterControl:prepend_path(t){
                                            name:"MANPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/man/common", delim=":", nodups="true", priority=0
                                          } MasterControl:prepend_path
                                        } prepend_path
                                        prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64){
                                          MasterControl:prepend_path(t){
                                            name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64", delim=":", nodups="true", priority=0
                                          } MasterControl:prepend_path
                                        } prepend_path
                                        setenv(EBROOTIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258){
                                          MasterControl:setenv("EBROOTIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258", "nil"){
                                          } MasterControl:setenv
                                        } setenv
                                        setenv(EBVERSIONIFORT, 2016.4.258){
                                          MasterControl:setenv("EBVERSIONIFORT", "2016.4.258", "nil"){
                                          } MasterControl:setenv
                                        } setenv
                                        setenv(EBDEVELIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/easybuild/Core-ifort-.2016.4.258-easybuild-devel){
                                          MasterControl:setenv("EBDEVELIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/easybuild/Core-ifort-.2016.4.258-easybuild-devel", "nil"){
                                          } MasterControl:setenv
                                        } setenv
                                        prepend_path(NLSPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/idb/intel64/locale/%l_%t/%N){
                                          MasterControl:prepend_path(t){
                                            name:"NLSPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0
                                          } MasterControl:prepend_path
                                        } prepend_path
                                      } loadModuleFile
                                      Marking ifort/.2016.4.258 as active and loaded
                                      safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                    } Master:load
                                    MasterControl:registerAdminMsg(mA){
                                    } MasterControl:registerAdminMsg
                                  } MasterControl:load
                                } MasterControl:load_usr
                              } load_module
                              setenv(EBROOTICCIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4){
                                MasterControl:setenv("EBROOTICCIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4", "nil"){
                                } MasterControl:setenv
                              } setenv
                              setenv(EBVERSIONICCIFORT, 2016.4){
                                MasterControl:setenv("EBVERSIONICCIFORT", "2016.4", "nil"){
                                } MasterControl:setenv
                              } setenv
                              setenv(EBDEVELICCIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4/easybuild/Core-intel-2016.4-easybuild-devel){
                                MasterControl:setenv("EBDEVELICCIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4/easybuild/Core-intel-2016.4-easybuild-devel", "nil"){
                                } MasterControl:setenv
                              } setenv
                              isloaded(imkl){
                              } isloaded
                              MName:isloaded(){
                                Mname:sn(){
                                } Mname:sn
                              } MName:isloaded
                              always_load(imkl/11.3.4.258){
                                cmd: always_load argA.n: 1
                                MasterControl:load_usr(mA={imkl/11.3.4.258}){
                                  registerUserLoads(mA){
                                    userName: imkl/11.3.4.258
                                  } registerUserLoads
                                  MasterControl:load(mA={imkl/11.3.4.258}){
                                    Master:singleton(safe: nil){
                                      s_master: table: 0x115ce70, safe: true
                                    } Master:singleton
                                    Master:load(mA={imkl/11.3.4.258}){
                                      Master:load i: 1, userName: imkl/11.3.4.258
                                      Mname:sn(){
                                      } Mname:sn
    (39)(2)Loading: imkl/11.3.4.258 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua, using Find-Best)
                                      Master:load i: 1 sn: imkl fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua
                                      mnV: 11.3.4.258, mtV: 2018.3.222
                                      Setting mcp to MC_Load
                                      Master:singleton(safe: nil){
                                        s_master: table: 0x115ce70, safe: true
                                      } Master:singleton
                                      MasterControl:unload(mA={imkl}){
                                        unRegisterUserLoads(mA){
                                          userName: imkl
                                        } unRegisterUserLoads
                                        Master:unload(mA={imkl}){
                                          MasterControl:_setMode("unload"){
                                          } MasterControl:_setMode
                                          Setting mcp to MC_Unload
                                          Setting mcp to MC_Unload
                                          Mname:fullName(){
                                          } Mname:fullName
    (40)(2)Unloading: imkl (status: active) (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/2018.3.222.lua)
                                          Trying to unload: imkl sn: imkl
                                          Master:unload: "imkl" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/2018.3.222.lua"
                                          loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/2018.3.222.lua){
                                            ModuleFile{
                                              help([==[
                                              Description
                                              ===========
                                              Intel Math Kernel Library is a library of highly optimized,
                                               extensively threaded math routines for science, engineering, and financial
                                               applications that require maximum performance. Core math functions include
                                               BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.
                                              More information
                                              ================
                                               - Homepage: http://software.intel.com/en-us/intel-mkl/
                                              ]==])
                                              whatis([==[Description: Intel Math Kernel Library is a library of highly optimized,
                                               extensively threaded math routines for science, engineering, and financial
                                               applications that require maximum performance. Core math functions include
                                               BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.]==])
                                              whatis([==[Homepage: http://software.intel.com/en-us/intel-mkl/]==])
                                              local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222"
                                              conflict("imkl")
                                              prepend_path("CPATH", pathJoin(root, "mkl/include"))
                                              prepend_path("CPATH", pathJoin(root, "mkl/include/fftw"))
                                              prepend_path("LIBRARY_PATH", pathJoin(root, "lib/intel64"))
                                              prepend_path("LIBRARY_PATH", pathJoin(root, "mkl/lib/intel64"))
                                              prepend_path("PATH", pathJoin(root, "bin"))
                                              prepend_path("PATH", pathJoin(root, "mkl/bin"))
                                              setenv("EBROOTIMKL", root)
                                              setenv("EBVERSIONIMKL", "2018.3.222")
                                              setenv("EBDEVELIMKL", pathJoin(root, "easybuild/Core-imkl-2018.3.222-easybuild-devel"))
                                              setenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/examples/")
                                              prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                                              setenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl")
                                              -- Built with EasyBuild version 3.6.2-r1ed7dac97acd22d6301e534c78048f7fcedaa585
                                            } ModuleFile
                                            help(...){
                                            } help
                                            whatis(Description: Intel Math Kernel Library is a library of highly optimized,
 extensively threaded math routines for science, engineering, and financial
 applications that require maximum performance. Core math functions include
 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.){
                                            } whatis
                                            whatis(Homepage: http://software.intel.com/en-us/intel-mkl/){
                                            } whatis
                                            conflict(imkl){
                                            }
                                            prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/include){
                                              MasterControl:remove_path{"CPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/include", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/include/fftw){
                                              MasterControl:remove_path{"CPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/include/fftw", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/lib/intel64){
                                              MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/lib/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/lib/intel64){
                                              MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/lib/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/bin){
                                              MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/bin){
                                              MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            setenv(EBROOTIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222){
                                              MasterControl:unsetenv("EBROOTIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222"){
                                              } MasterControl:unsetenv
                                            } setenv
                                            setenv(EBVERSIONIMKL, 2018.3.222){
                                              MasterControl:unsetenv("EBVERSIONIMKL", "2018.3.222"){
                                              } MasterControl:unsetenv
                                            } setenv
                                            setenv(EBDEVELIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/easybuild/Core-imkl-2018.3.222-easybuild-devel){
                                              MasterControl:unsetenv("EBDEVELIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/easybuild/Core-imkl-2018.3.222-easybuild-devel"){
                                              } MasterControl:unsetenv
                                            } setenv
                                            setenv(MKL_EXAMPLES, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/examples/){
                                              MasterControl:unsetenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl/examples/"){
                                              } MasterControl:unsetenv
                                            } setenv
                                            prepend_path(NLSPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/idb/intel64/locale/%l_%t/%N){
                                              MasterControl:remove_path{"NLSPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            setenv(MKLROOT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl){
                                              MasterControl:unsetenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/2018.3.222/mkl"){
                                              } MasterControl:unsetenv
                                            } setenv
                                          } loadModuleFile
                                          safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                          Setting mcp to MC_Load
                                        } Master:unload
                                      } MasterControl:unload
                                      MasterControl:load_usr(mA={imkl/11.3.4.258}){
                                        registerUserLoads(mA){
                                          userName: imkl/11.3.4.258
                                        } registerUserLoads
                                        MasterControl:load(mA={imkl/11.3.4.258}){
                                          Master:singleton(safe: nil){
                                            s_master: table: 0x115ce70, safe: true
                                          } Master:singleton
                                          Master:load(mA={imkl/11.3.4.258}){
                                            Master:load i: 1, userName: imkl/11.3.4.258
                                            Mname:sn(){
                                            } Mname:sn
    (41)(2)Loading: imkl/11.3.4.258 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua, using Find-Best)
                                            Master:load i: 1 sn: imkl fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua
                                            Master:loading: "imkl/11.3.4.258" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua"
                                            loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua){
                                              ModuleFile{
                                                help([==[
                                                Description
                                                ===========
                                                Intel Math Kernel Library is a library of highly optimized,
                                                 extensively threaded math routines for science, engineering, and financial
                                                 applications that require maximum performance. Core math functions include
                                                 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.
                                                More information
                                                ================
                                                 - Homepage: http://software.intel.com/en-us/intel-mkl/
                                                ]==])
                                                whatis([==[Description: Intel Math Kernel Library is a library of highly optimized,
                                                 extensively threaded math routines for science, engineering, and financial
                                                 applications that require maximum performance. Core math functions include
                                                 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.]==])
                                                whatis([==[Homepage: http://software.intel.com/en-us/intel-mkl/]==])
                                                local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258"
                                                conflict("imkl")
                                                prepend_path("CPATH", pathJoin(root, "mkl/include"))
                                                prepend_path("CPATH", pathJoin(root, "mkl/include/fftw"))
                                                prepend_path("LIBRARY_PATH", pathJoin(root, "lib/intel64"))
                                                prepend_path("LIBRARY_PATH", pathJoin(root, "mkl/lib/intel64"))
                                                prepend_path("MIC_LD_LIBRARY_PATH", pathJoin(root, "lib/intel64_lin_mic"))
                                                prepend_path("MIC_LD_LIBRARY_PATH", pathJoin(root, "mkl/lib/mic"))
                                                prepend_path("PATH", pathJoin(root, "bin"))
                                                prepend_path("PATH", pathJoin(root, "mkl/bin"))
                                                setenv("EBROOTIMKL", root)
                                                setenv("EBVERSIONIMKL", "11.3.4.258")
                                                setenv("EBDEVELIMKL", pathJoin(root, "easybuild/Core-imkl-11.3.4.258-easybuild-devel"))
                                                setenv("MKL_ENABLE_INSTRUCTIONS", "AVX512")
                                                setenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/")
                                                prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                                                setenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl")
                                                -- Built with EasyBuild version 3.6.2-r7ac096157987d9f8fad6490e41038c31790fa6ee
                                              } ModuleFile
                                              help(...){
                                              } help
                                              whatis(Description: Intel Math Kernel Library is a library of highly optimized,
 extensively threaded math routines for science, engineering, and financial
 applications that require maximum performance. Core math functions include
 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.){
                                              } whatis
                                              whatis(Homepage: http://software.intel.com/en-us/intel-mkl/){
                                              } whatis
                                              conflict(imkl){
                                                MasterControl:conflict(mA){
                                                  Mname:sn(){
                                                  } Mname:sn
                                                } MasterControl:conflict
                                              }
                                              prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include){
                                                MasterControl:prepend_path(t){
                                                  name:"CPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include/fftw){
                                                MasterControl:prepend_path(t){
                                                  name:"CPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include/fftw", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64){
                                                MasterControl:prepend_path(t){
                                                  name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/intel64){
                                                MasterControl:prepend_path(t){
                                                  name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/intel64", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(MIC_LD_LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64_lin_mic){
                                                MasterControl:prepend_path(t){
                                                  name:"MIC_LD_LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64_lin_mic", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(MIC_LD_LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/mic){
                                                MasterControl:prepend_path(t){
                                                  name:"MIC_LD_LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/mic", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/bin){
                                                MasterControl:prepend_path(t){
                                                  name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/bin", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/bin){
                                                MasterControl:prepend_path(t){
                                                  name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/bin", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              setenv(EBROOTIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258){
                                                MasterControl:setenv("EBROOTIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(EBVERSIONIMKL, 11.3.4.258){
                                                MasterControl:setenv("EBVERSIONIMKL", "11.3.4.258", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(EBDEVELIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/easybuild/Core-imkl-11.3.4.258-easybuild-devel){
                                                MasterControl:setenv("EBDEVELIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/easybuild/Core-imkl-11.3.4.258-easybuild-devel", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(MKL_ENABLE_INSTRUCTIONS, AVX512){
                                                MasterControl:setenv("MKL_ENABLE_INSTRUCTIONS", "AVX512", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(MKL_EXAMPLES, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/){
                                                MasterControl:setenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              prepend_path(NLSPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/idb/intel64/locale/%l_%t/%N){
                                                MasterControl:prepend_path(t){
                                                  name:"NLSPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              setenv(MKLROOT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl){
                                                MasterControl:setenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                            } loadModuleFile
                                            Marking imkl/11.3.4.258 as active and loaded
                                            safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                          } Master:load
                                          MasterControl:registerAdminMsg(mA){
                                          } MasterControl:registerAdminMsg
                                        } MasterControl:load
                                      } MasterControl:load_usr
                                      Setting mcp to MC_Load
                                      safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                    } Master:load
                                    MasterControl:registerAdminMsg(mA){
                                    } MasterControl:registerAdminMsg
                                  } MasterControl:load
                                } MasterControl:load_usr
                              } always_load
                              prepend_path(INTEL_LICENSE_FILE, /cvmfs/soft.computecanada.ca/config/licenses/intel/computecanada.lic){
                                MasterControl:prepend_path(t){
                                  name:"INTEL_LICENSE_FILE", value: "/cvmfs/soft.computecanada.ca/config/licenses/intel/computecanada.lic", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              prepend_path(MODULEPATH, ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4){
                                MasterControl:prepend_path(t){
                                  name:"MODULEPATH", value: "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4", delim=":", nodups="true", priority=0
    Prepending: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4 to MODULEPATH
                                  chkMP("MODULEPATH", value: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4:ProjectDIR/rt/cc/cc_mf/Core-avx512:ProjectDIR/rt/cc/cc_mf/modules-avx512:ProjectDIR/rt/cc/cc_mf/modules, adding:true){
                                    MT:set_MPATH_change_flag(self)
                                    ModuleA:update(spider_cache=false){
                                      building mpath: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4
                                      ModuleA:__new(){
                                        calling DirTree:new()
                                        ModuleA build(){
                                          #dirA: 1
                                          mpath: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4
                                        } ModuleA build
                                        ["moduleA:"]  = {
                                          {
                                            T = {
                                              openmpi = {
                                                defaultT = {},
                                                dirT = {},
                                                fileT = {
                                                  ["openmpi/2.1.1"]  = {
                                                    ["canonical"] = "2.1.1",
                                                    ["fn"] = "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua",
                                                    ["luaExt"] = 6,
                                                    ["mpath"] = "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4",
                                                    ["pV"] = "000000002.000000001.000000001.*zfinal",
                                                    ["wV"] = "000000002.000000001.000000001.*zfinal",
                                                  },
                                                },
                                              },
                                            },
                                            ["mpath"] = "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4",
                                          },
                                        }
                                        isNVV: false
                                      } ModuleA:__new
                                      Reusing mpath: ProjectDIR/rt/cc/cc_mf/Core-avx512
                                      Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules-avx512
                                      Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules
                                    } ModuleA:update
                                  } chkMP
                                } MasterControl:prepend_path
                              } prepend_path
                              family(compiler){
                                MasterControl:family(compiler){
                                  Mname:sn(){
                                  } Mname:sn
                                  MasterControl:setenv("LMOD_FAMILY_COMPILER", "intel", "nil"){
                                  } MasterControl:setenv
                                  MasterControl:setenv("LMOD_FAMILY_COMPILER_VERSION", "2016.4", "nil"){
                                  } MasterControl:setenv
                                  MasterControl:setenv("LMOD_FAMILY_COMPILER", "intel", "nil"){
                                  } MasterControl:setenv
                                  MasterControl:setenv("LMOD_FAMILY_COMPILER_VERSION", "2016.4", "nil"){
                                  } MasterControl:setenv
                                } MasterControl:family
                              } family
                            } loadModuleFile
                            Marking intel/2016.4 as active and loaded
                            safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): true
                            Master:load calling reloadAll()
                            Master:reloadAll(count: 3){
                              Setting mcp to MC_Load
  reloadAll(3)(arch/avx512, nixpkgs/16.09, StdEnv, gcccore/.5.4.0, icc/.2016.4.258, ifort/.2016.4.258, imkl/11.3.4.258, intel/2016.4, openmpi/3.1.2)
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): arch/avx512
                              adding sn: arch to mA
                              module sn: arch is active
                              userName(2):  arch/avx512
                              Mname:fn(){
                                LocationT:new(moduleA){
                                  LocationT build(moduleA){
                                  } LocationT build
                                } LocationT:new
                              } Mname:fn
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): nixpkgs/16.09
                              adding sn: nixpkgs to mA
                              module sn: nixpkgs is active
                              userName(2):  nixpkgs/16.09
                              Mname:fn(){
                              } Mname:fn
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): StdEnv
                              adding sn: StdEnv to mA
                              module sn: StdEnv is active
                              userName(2):  StdEnv
                              Mname:fn(){
                              } Mname:fn
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): gcccore/.5.4.0
                              adding sn: gcccore to mA
                              module sn: gcccore is active
                              userName(2):  gcccore/.5.4.0
                              Mname:fn(){
                              } Mname:fn
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): icc/.2016.4.258
                              adding sn: icc to mA
                              module sn: icc is active
                              userName(2):  icc/.2016.4.258
                              Mname:fn(){
                              } Mname:fn
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): ifort/.2016.4.258
                              adding sn: ifort to mA
                              module sn: ifort is active
                              userName(2):  ifort/.2016.4.258
                              Mname:fn(){
                              } Mname:fn
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): imkl/11.3.4.258
                              adding sn: imkl to mA
                              module sn: imkl is active
                              userName(2):  imkl/11.3.4.258
                              Mname:fn(){
                              } Mname:fn
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): intel/2016.4
                              adding sn: intel to mA
                              module sn: intel is active
                              userName(2):  intel/2016.4
                              Mname:fn(){
                              } Mname:fn
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): openmpi/3.1.2
                              adding sn: openmpi to mA
                              module sn: openmpi is inactive
                              Master:reloadAll(3): Loading non-active module: "openmpi/3.1.2"
                              MasterControl:load(mA={openmpi/3.1.2}){
                                Master:singleton(safe: nil){
                                  s_master: table: 0x115ce70, safe: true
                                } Master:singleton
                                Master:load(mA={openmpi/3.1.2}){
                                  Master:load i: 1, userName: openmpi/3.1.2
                                  Mname:sn(){
                                  } Mname:sn
                                  Mname:fn(){
                                  } Mname:fn
  (42)(3)Loading: openmpi/3.1.2 (fn: nil, using Find-Best)
                                  Master:load i: 1 sn: openmpi fn: false
                                  safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): true
                                } Master:load
                                MasterControl:registerAdminMsg(mA){
                                } MasterControl:registerAdminMsg
                              } MasterControl:load
                              status: false, fn_old: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3/openmpi/3.1.2.lua, fn: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3/openmpi/3.1.2.lua
                              checking sn: arch
                              checking sn: nixpkgs
                              checking sn: StdEnv
                              checking sn: gcccore
                              checking sn: icc
                              checking sn: ifort
                              checking sn: imkl
                              checking sn: intel
                              checking sn: openmpi
                              Master:reloadAll module: openmpi marked as inactive
                              Setting mpc to MC_Load
                            } Master:reloadAll
                            RTM: same: true
                          } Master:load
                          MasterControl:registerAdminMsg(mA){
                          } MasterControl:registerAdminMsg
                        } MasterControl:load
                      } MasterControl:load_usr
                      Setting mcp to MC_Load
                      safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): true
                    } Master:load
                    MasterControl:registerAdminMsg(mA){
                    } MasterControl:registerAdminMsg
                  } MasterControl:load
                  status false, fn_old: ProjectDIR/rt/cc/cc_mf/Core/intel/2016.4.lua, fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua
                  Mname:sn(){
                  } Mname:sn
                  a[i].userName(1): openmpi/2.1.1
                  adding sn: openmpi to mA
                  module sn: openmpi is inactive
                  Master:reloadAll(2): Loading non-active module: "openmpi/2.1.1"
                  MasterControl:load(mA={openmpi/2.1.1}){
                    Master:singleton(safe: nil){
                      s_master: table: 0x115ce70, safe: true
                    } Master:singleton
                    Master:load(mA={openmpi/2.1.1}){
                      Master:load i: 1, userName: openmpi/2.1.1
                      Mname:sn(){
                      } Mname:sn
  (43)(2)Loading: openmpi/2.1.1 (fn: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua, using Find-Best)
                      Master:load i: 1 sn: openmpi fn: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua
                      Master:loading: "openmpi/2.1.1" from file: "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua"
                      loadModuleFile(ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua){
                        ModuleFile{
                          help([==[
                          Description
                          ===========
                          The Open MPI Project is an open source MPI-2 implementation.
                          More information
                          ================
                           - Homepage: http://www.open-mpi.org/
                          ]==])
                          whatis([==[Description: The Open MPI Project is an open source MPI-2 implementation.]==])
                          whatis([==[Homepage: http://www.open-mpi.org/]==])
                          local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1"
                          conflict("openmpi")
                          local mroot = os.getenv("MODULEPATH_ROOT")
                          prepend_path("MODULEPATH", pathJoin(mroot,"avx512/MPI/intel2016.4/openmpi2.1"))
                          prepend_path("CPATH", pathJoin(root, "include"))
                          prepend_path("LIBRARY_PATH", pathJoin(root, "lib"))
                          prepend_path("MANPATH", pathJoin(root, "share/man"))
                          prepend_path("PATH", pathJoin(root, "bin"))
                          prepend_path("PKG_CONFIG_PATH", pathJoin(root, "lib/pkgconfig"))
                          setenv("EBROOTOPENMPI", root)
                          setenv("EBVERSIONOPENMPI", "2.1.1")
                          setenv("EBDEVELOPENMPI", pathJoin(root, "easybuild/avx512-Compiler-intel2016.4-openmpi-2.1.1-easybuild-devel"))
                          if os.getenv("RSNT_INTERCONNECT") == "omnipath" then
                                  setenv("OMPI_MCA_mtl", "^mxm")
                                  setenv("OMPI_MCA_pml", "^yalla")
                          end
                          family("mpi")
                          -- Built with EasyBuild version 3.6.0
                        } ModuleFile
                        help(...){
                        } help
                        whatis(Description: The Open MPI Project is an open source MPI-2 implementation.){
                        } whatis
                        whatis(Homepage: http://www.open-mpi.org/){
                        } whatis
                        conflict(openmpi){
                          MasterControl:conflict(mA){
                            Mname:sn(){
                            } Mname:sn
                          } MasterControl:conflict
                        }
                        prepend_path(MODULEPATH, ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1){
                          MasterControl:prepend_path(t){
                            name:"MODULEPATH", value: "ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1", delim=":", nodups="true", priority=0
    Prepending: ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1 to MODULEPATH
                            chkMP("MODULEPATH", value: ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1:ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4:ProjectDIR/rt/cc/cc_mf/Core-avx512:ProjectDIR/rt/cc/cc_mf/modules-avx512:ProjectDIR/rt/cc/cc_mf/modules, adding:true){
                              MT:set_MPATH_change_flag(self)
                              ModuleA:update(spider_cache=false){
                                Reusing mpath: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4
                                Reusing mpath: ProjectDIR/rt/cc/cc_mf/Core-avx512
                                Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules-avx512
                                Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules
                              } ModuleA:update
                            } chkMP
                          } MasterControl:prepend_path
                        } prepend_path
                        prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/include){
                          MasterControl:prepend_path(t){
                            name:"CPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/include", delim=":", nodups="true", priority=0
                          } MasterControl:prepend_path
                        } prepend_path
                        prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/lib){
                          MasterControl:prepend_path(t){
                            name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/lib", delim=":", nodups="true", priority=0
                          } MasterControl:prepend_path
                        } prepend_path
                        prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/share/man){
                          MasterControl:prepend_path(t){
                            name:"MANPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/share/man", delim=":", nodups="true", priority=0
                          } MasterControl:prepend_path
                        } prepend_path
                        prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/bin){
                          MasterControl:prepend_path(t){
                            name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/bin", delim=":", nodups="true", priority=0
                          } MasterControl:prepend_path
                        } prepend_path
                        prepend_path(PKG_CONFIG_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/lib/pkgconfig){
                          MasterControl:prepend_path(t){
                            name:"PKG_CONFIG_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/lib/pkgconfig", delim=":", nodups="true", priority=0
                          } MasterControl:prepend_path
                        } prepend_path
                        setenv(EBROOTOPENMPI, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1){
                          MasterControl:setenv("EBROOTOPENMPI", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1", "nil"){
                          } MasterControl:setenv
                        } setenv
                        setenv(EBVERSIONOPENMPI, 2.1.1){
                          MasterControl:setenv("EBVERSIONOPENMPI", "2.1.1", "nil"){
                          } MasterControl:setenv
                        } setenv
                        setenv(EBDEVELOPENMPI, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/easybuild/avx512-Compiler-intel2016.4-openmpi-2.1.1-easybuild-devel){
                          MasterControl:setenv("EBDEVELOPENMPI", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/easybuild/avx512-Compiler-intel2016.4-openmpi-2.1.1-easybuild-devel", "nil"){
                          } MasterControl:setenv
                        } setenv
                        family(mpi){
                          MasterControl:family(mpi){
                            Mname:sn(){
                            } Mname:sn
                            MasterControl:setenv("LMOD_FAMILY_MPI", "openmpi", "nil"){
                            } MasterControl:setenv
                            MasterControl:setenv("LMOD_FAMILY_MPI_VERSION", "2.1.1", "nil"){
                            } MasterControl:setenv
                            MasterControl:setenv("LMOD_FAMILY_MPI", "openmpi", "nil"){
                            } MasterControl:setenv
                            MasterControl:setenv("LMOD_FAMILY_MPI_VERSION", "2.1.1", "nil"){
                            } MasterControl:setenv
                          } MasterControl:family
                        } family
                      } loadModuleFile
                      Marking openmpi/2.1.1 as active and loaded
                      safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): true
                      Master:load calling reloadAll()
                      Master:reloadAll(count: 3){
                        Setting mcp to MC_Load
  reloadAll(3)(arch/avx512, nixpkgs/16.09, StdEnv, gcccore/.5.4.0, icc/.2016.4.258, ifort/.2016.4.258, imkl/11.3.4.258, intel/2016.4, openmpi/2.1.1)
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): arch/avx512
                        adding sn: arch to mA
                        module sn: arch is active
                        userName(2):  arch/avx512
                        Mname:fn(){
                          LocationT:new(moduleA){
                            LocationT build(moduleA){
                            } LocationT build
                          } LocationT:new
                        } Mname:fn
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): nixpkgs/16.09
                        adding sn: nixpkgs to mA
                        module sn: nixpkgs is active
                        userName(2):  nixpkgs/16.09
                        Mname:fn(){
                        } Mname:fn
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): StdEnv
                        adding sn: StdEnv to mA
                        module sn: StdEnv is active
                        userName(2):  StdEnv
                        Mname:fn(){
                        } Mname:fn
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): gcccore/.5.4.0
                        adding sn: gcccore to mA
                        module sn: gcccore is active
                        userName(2):  gcccore/.5.4.0
                        Mname:fn(){
                        } Mname:fn
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): icc/.2016.4.258
                        adding sn: icc to mA
                        module sn: icc is active
                        userName(2):  icc/.2016.4.258
                        Mname:fn(){
                        } Mname:fn
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): ifort/.2016.4.258
                        adding sn: ifort to mA
                        module sn: ifort is active
                        userName(2):  ifort/.2016.4.258
                        Mname:fn(){
                        } Mname:fn
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): imkl/11.3.4.258
                        adding sn: imkl to mA
                        module sn: imkl is active
                        userName(2):  imkl/11.3.4.258
                        Mname:fn(){
                        } Mname:fn
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): intel/2016.4
                        adding sn: intel to mA
                        module sn: intel is active
                        userName(2):  intel/2016.4
                        Mname:fn(){
                        } Mname:fn
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): openmpi/2.1.1
                        adding sn: openmpi to mA
                        module sn: openmpi is active
                        userName(2):  openmpi/2.1.1
                        Mname:fn(){
                        } Mname:fn
                        checking sn: arch
                        checking sn: nixpkgs
                        checking sn: StdEnv
                        checking sn: gcccore
                        checking sn: icc
                        checking sn: ifort
                        checking sn: imkl
                        checking sn: intel
                        checking sn: openmpi
                        Setting mpc to MC_Load
                      } Master:reloadAll
                      RTM: same: true
                    } Master:load
                    MasterControl:registerAdminMsg(mA){
                    } MasterControl:registerAdminMsg
                  } MasterControl:load
                  status: true, fn_old: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2018.3/openmpi/3.1.2.lua, fn: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua
                  Master:reloadAll module: openmpi/2.1.1 marked as reloaded
                  Mname:sn(){
                  } Mname:sn
                  a[i].userName(1): StdEnv
                  adding sn: StdEnv to mA
                  module sn: StdEnv is active
                  userName(2):  StdEnv
                  Mname:fn(){
                  } Mname:fn
                  Mname:sn(){
                  } Mname:sn
                  a[i].userName(1): arch/avx512
                  adding sn: arch to mA
                  module sn: arch is active
                  userName(2):  arch/avx512
                  Mname:fn(){
                  } Mname:fn
                  checking sn: gcccore
                  checking sn: icc
                  checking sn: ifort
                  checking sn: imkl
                  checking sn: intel
                  checking sn: openmpi
                  checking sn: StdEnv
                  checking sn: arch
                  Setting mpc to MC_Unload
                } Master:reloadAll
                Setting mcp to MC_Load
              } Master:unload
            } MasterControl:unload
            Master:reloadAll(1): mt:userName(sn): "nixpkgs/16.09"
            Master:reloadAll(1): Loading module: "nixpkgs/16.09"
            MasterControl:load(mA={nixpkgs/16.09}){
              Master:singleton(safe: nil){
                s_master: table: 0x115ce70, safe: true
              } Master:singleton
              Master:load(mA={nixpkgs/16.09}){
                Master:load i: 1, userName: nixpkgs/16.09
  (44)(1)Loading: nixpkgs/16.09 (fn: ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua, using Find-Best)
                Master:load i: 1 sn: nixpkgs fn: ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua
                mnV: 16.09, mtV: 16.09
                Setting mcp to MC_Load
                Master:singleton(safe: nil){
                  s_master: table: 0x115ce70, safe: true
                } Master:singleton
                MasterControl:unload(mA={nixpkgs}){
                  unRegisterUserLoads(mA){
                    userName: nixpkgs
                  } unRegisterUserLoads
                  Master:unload(mA={nixpkgs}){
                    MasterControl:_setMode("unload"){
                    } MasterControl:_setMode
                    Setting mcp to MC_Unload
                    Setting mcp to MC_Unload
                    Mname:fullName(){
                    } Mname:fullName
  (45)(1)Unloading: nixpkgs (status: active) (fn: ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua)
                    Trying to unload: nixpkgs sn: nixpkgs
                    Master:unload: "nixpkgs" from file: "ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua"
                    loadModuleFile(ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua){
                      ModuleFile{
                        local cc_cluster = os.getenv("CC_CLUSTER") or "computecanada"
                        local arch = "avx512"
                        local interconnect = os.getenv("RSNT_INTERCONNECT") or ""
                        if not interconnect or interconnect == "" then
                        	if cc_cluster == "cedar" then
                        		interconnect = "omnipath"
                        	else
                        		interconnect = "infiniband"
                        	end
                        end
                        local generic_nixpkgs = false
                        local mroot = os.getenv("MODULEPATH_ROOT")
                        assert(loadfile(pathJoin(mroot,"modules/nixpkgs/16.09.lua.core")))(arch, interconnect, generic_nixpkgs)
                      } ModuleFile
                      help(...){
                      } help
                      whatis(Description: Nixpkgs is a collection of packages for the Nix package manager - Homepage: https://github.com/NixOS/nixpkgs){
                      } whatis
                      setenv(NIXUSER_PROFILE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09){
                        MasterControl:unsetenv("NIXUSER_PROFILE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09"){
                        } MasterControl:unsetenv
                      } setenv
                      prepend_path(PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/sbin){
                        MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/sbin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                        } MasterControl:remove_path
                      } prepend_path
                      prepend_path(PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin){
                        MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                        } MasterControl:remove_path
                      } prepend_path
                      prepend_path(PATH, /cvmfs/soft.computecanada.ca/custom/bin){
                        MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/custom/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                        } MasterControl:remove_path
                      } prepend_path
                      prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib){
                        MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib", delim=":", nodups="true", priority=0, where=first, force=nil}{
                        } MasterControl:remove_path
                      } prepend_path
                      prepend_path(C_INCLUDE_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include){
                        MasterControl:remove_path{"C_INCLUDE_PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include", delim=":", nodups="true", priority=0, where=first, force=nil}{
                        } MasterControl:remove_path
                      } prepend_path
                      prepend_path(CPLUS_INCLUDE_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include){
                        MasterControl:remove_path{"CPLUS_INCLUDE_PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include", delim=":", nodups="true", priority=0, where=first, force=nil}{
                        } MasterControl:remove_path
                      } prepend_path
                      prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/man){
                        MasterControl:remove_path{"MANPATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/man", delim=":", nodups="true", priority=0, where=first, force=nil}{
                        } MasterControl:remove_path
                      } prepend_path
                      prepend_path(ACLOCAL_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/aclocal){
                        MasterControl:remove_path{"ACLOCAL_PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/aclocal", delim=":", nodups="true", priority=0, where=first, force=nil}{
                        } MasterControl:remove_path
                      } prepend_path
                      prepend_path(PKG_CONFIG_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/pkgconfig){
                        MasterControl:remove_path{"PKG_CONFIG_PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/pkgconfig", delim=":", nodups="true", priority=0, where=first, force=nil}{
                        } MasterControl:remove_path
                      } prepend_path
                      setenv(FONTCONFIG_FILE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/etc/fonts/fonts.conf){
                        MasterControl:unsetenv("FONTCONFIG_FILE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/etc/fonts/fonts.conf"){
                        } MasterControl:unsetenv
                      } setenv
                      prepend_path(PYTHONPATH, /cvmfs/soft.computecanada.ca/custom/python/site-packages){
                        MasterControl:remove_path{"PYTHONPATH", "/cvmfs/soft.computecanada.ca/custom/python/site-packages", delim=":", nodups="true", priority=0, where=first, force=nil}{
                        } MasterControl:remove_path
                      } prepend_path
                      setenv(PERL5OPT, -I/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5 -I/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5/site_perl){
                        MasterControl:unsetenv("PERL5OPT", "-I/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5 -I/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5/site_perl"){
                        } MasterControl:unsetenv
                      } setenv
                      prepend_path(PERL5LIB, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5/site_perl){
                        MasterControl:remove_path{"PERL5LIB", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5/site_perl", delim=":", nodups="true", priority=0, where=first, force=nil}{
                        } MasterControl:remove_path
                      } prepend_path
                      prepend_path(PERL5LIB, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5){
                        MasterControl:remove_path{"PERL5LIB", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5", delim=":", nodups="true", priority=0, where=first, force=nil}{
                        } MasterControl:remove_path
                      } prepend_path
                      setenv(TZDIR, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/zoneinfo){
                        MasterControl:unsetenv("TZDIR", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/zoneinfo"){
                        } MasterControl:unsetenv
                      } setenv
                      setenv(SSL_CERT_FILE, /etc/pki/tls/certs/ca-bundle.crt){
                        MasterControl:unsetenv("SSL_CERT_FILE", "/etc/pki/tls/certs/ca-bundle.crt"){
                        } MasterControl:unsetenv
                      } setenv
                      setenv(CURL_CA_BUNDLE, /etc/pki/tls/certs/ca-bundle.crt){
                        MasterControl:unsetenv("CURL_CA_BUNDLE", "/etc/pki/tls/certs/ca-bundle.crt"){
                        } MasterControl:unsetenv
                      } setenv
                      setenv(PAGER, less -R){
                        MasterControl:unsetenv("PAGER", "less -R"){
                        } MasterControl:unsetenv
                      } setenv
                      setenv(LESSOPEN, |/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/lesspipe.sh %s){
                        MasterControl:unsetenv("LESSOPEN", "|/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/lesspipe.sh %s"){
                        } MasterControl:unsetenv
                      } setenv
                      setenv(LOCALE_ARCHIVE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/locale/locale-archive){
                        MasterControl:unsetenv("LOCALE_ARCHIVE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/locale/locale-archive"){
                        } MasterControl:unsetenv
                      } setenv
                      setenv(MXM_LOG_LEVEL, error){
                        MasterControl:unsetenv("MXM_LOG_LEVEL", "error"){
                        } MasterControl:unsetenv
                      } setenv
                      setenv(PIP_CONFIG_FILE, /cvmfs/soft.computecanada.ca/config/python/pip-avx512.conf){
                        MasterControl:unsetenv("PIP_CONFIG_FILE", "/cvmfs/soft.computecanada.ca/config/python/pip-avx512.conf"){
                        } MasterControl:unsetenv
                      } setenv
                      prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/bin){
                        MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                        } MasterControl:remove_path
                      } prepend_path
                      setenv(EASYBUILD_CONFIGFILES, /cvmfs/soft.computecanada.ca/easybuild/config.cfg){
                        MasterControl:unsetenv("EASYBUILD_CONFIGFILES", "/cvmfs/soft.computecanada.ca/easybuild/config.cfg"){
                        } MasterControl:unsetenv
                      } setenv
                      setenv(EASYBUILD_BUILDPATH, /dev/shm/mclay){
                        MasterControl:unsetenv("EASYBUILD_BUILDPATH", "/dev/shm/mclay"){
                        } MasterControl:unsetenv
                      } setenv
                      setenv(EBROOTNIXPKGS, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09){
                        MasterControl:unsetenv("EBROOTNIXPKGS", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09"){
                        } MasterControl:unsetenv
                      } setenv
                      setenv(EBVERSIONNIXPKGS, 16.09){
                        MasterControl:unsetenv("EBVERSIONNIXPKGS", "16.09"){
                        } MasterControl:unsetenv
                      } setenv
                      prepend_path(MODULEPATH, ProjectDIR/rt/cc/cc_mf/Core-avx512){
                        MasterControl:remove_path{"MODULEPATH", "ProjectDIR/rt/cc/cc_mf/Core-avx512", delim=":", nodups="true", priority=0, where=first, force=nil}{
    Removing: ProjectDIR/rt/cc/cc_mf/Core-avx512 from MODULEPATH
                          chkMP("MODULEPATH", value: ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1:ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4:ProjectDIR/rt/cc/cc_mf/modules-avx512:ProjectDIR/rt/cc/cc_mf/modules, adding:false){
                            MT:set_MPATH_change_flag(self)
                            ModuleA:update(spider_cache=false){
                              Reusing mpath: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4
                              Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules-avx512
                              Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules
                            } ModuleA:update
                          } chkMP
                        } MasterControl:remove_path
                      } prepend_path
                      setenv(PROJECT, OutputDIR/project){
                        MasterControl:unsetenv("PROJECT", "OutputDIR/project"){
                        } MasterControl:unsetenv
                      } setenv
                      setenv(CC_PROJECT, OutputDIR/project){
                        MasterControl:unsetenv("CC_PROJECT", "OutputDIR/project"){
                        } MasterControl:unsetenv
                      } setenv
                      set_alias(quota, diskusage_report){
                        MasterControl:unset_alias("quota", "diskusage_report"){
                        } MasterControl:unset_alias
                      } set_alias
                    } loadModuleFile
                    safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): true
                    Master:load calling reloadAll()
                    Master:reloadAll(count: 2){
                      Setting mcp to MC_Load
  reloadAll(2)(arch/avx512, StdEnv, gcccore/.5.4.0, icc/.2016.4.258, ifort/.2016.4.258, imkl/11.3.4.258, intel/2016.4, openmpi/2.1.1)
                      Mname:sn(){
                      } Mname:sn
                      a[i].userName(1): arch/avx512
                      adding sn: arch to mA
                      module sn: arch is active
                      userName(2):  arch/avx512
                      Mname:fn(){
                        LocationT:new(moduleA){
                          LocationT build(moduleA){
                          } LocationT build
                        } LocationT:new
                      } Mname:fn
                      Mname:sn(){
                      } Mname:sn
                      a[i].userName(1): StdEnv
                      adding sn: StdEnv to mA
                      module sn: StdEnv is active
                      userName(2):  StdEnv
                      Mname:fn(){
                      } Mname:fn
                      Mname:sn(){
                      } Mname:sn
                      a[i].userName(1): gcccore/.5.4.0
                      adding sn: gcccore to mA
                      module sn: gcccore is active
                      userName(2):  gcccore/.5.4.0
                      Mname:fn(){
                      } Mname:fn
                      Mname:fullName(){
                      } Mname:fullName
                      Master:reloadAll fn_new: "false" mt:fileName(sn): "ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua" mt:userName(sn): "gcccore/.5.4.0" a[i].userName: "gcccore/.5.4.0"
                      Master:reloadAll(2): Unloading module: "gcccore"
                      Master:singleton(safe: nil){
                        s_master: table: 0x115ce70, safe: true
                      } Master:singleton
                      MasterControl:unload(mA={gcccore/.5.4.0}){
                        unRegisterUserLoads(mA){
                          userName: gcccore/.5.4.0
                        } unRegisterUserLoads
                        Master:unload(mA={gcccore/.5.4.0}){
                          MasterControl:_setMode("unload"){
                          } MasterControl:_setMode
                          Setting mcp to MC_Unload
                          Setting mcp to MC_Unload
  (46)(2)Unloading: gcccore/.5.4.0 (status: active) (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua)
                          Trying to unload: gcccore/.5.4.0 sn: gcccore
                          Master:unload: "gcccore/.5.4.0" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua"
                          loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua){
                            ModuleFile{
                              help([[
                              Description
                              ===========
                              The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,
                               as well as libraries for these languages (libstdc++, libgcj,...).
                              More information
                              ================
                               - Homepage: http://gcc.gnu.org/
                              ]])
                              whatis([[Description: The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,
                               as well as libraries for these languages (libstdc++, libgcj,...).]])
                              whatis([[Homepage: http://gcc.gnu.org/]])
                              local root = "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0"
                              conflict("gcccore")
                              prepend_path("CPATH", pathJoin(root, "include"))
                              prepend_path("LIBRARY_PATH", pathJoin(root, "lib"))
                              prepend_path("LIBRARY_PATH", pathJoin(root, "lib64"))
                              prepend_path("MANPATH", pathJoin(root, "share/man"))
                              prepend_path("PATH", pathJoin(root, "bin"))
                              setenv("EBROOTGCCCORE", root)
                              setenv("EBVERSIONGCCCORE", "5.4.0")
                              setenv("EBDEVELGCCCORE", pathJoin(root, "easybuild/Core-gcccore-.5.4.0-easybuild-devel"))
                              -- Built with EasyBuild version 3.3.0-re50b70af25207aec9b965a5c4aaa47ba992c9aa6
                            } ModuleFile
                            help(...){
                            } help
                            whatis(Description: The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,
 as well as libraries for these languages (libstdc++, libgcj,...).){
                            } whatis
                            whatis(Homepage: http://gcc.gnu.org/){
                            } whatis
                            conflict(gcccore){
                            }
                            prepend_path(CPATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/include){
                              MasterControl:remove_path{"CPATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/include", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/lib){
                              MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/lib", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/lib64){
                              MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/lib64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/share/man){
                              MasterControl:remove_path{"MANPATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/share/man", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/bin){
                              MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            setenv(EBROOTGCCCORE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0){
                              MasterControl:unsetenv("EBROOTGCCCORE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0"){
                              } MasterControl:unsetenv
                            } setenv
                            setenv(EBVERSIONGCCCORE, 5.4.0){
                              MasterControl:unsetenv("EBVERSIONGCCCORE", "5.4.0"){
                              } MasterControl:unsetenv
                            } setenv
                            setenv(EBDEVELGCCCORE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/easybuild/Core-gcccore-.5.4.0-easybuild-devel){
                              MasterControl:unsetenv("EBDEVELGCCCORE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/easybuild/Core-gcccore-.5.4.0-easybuild-devel"){
                              } MasterControl:unsetenv
                            } setenv
                          } loadModuleFile
                          safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): true
                          Setting mcp to MC_Load
                        } Master:unload
                      } MasterControl:unload
                      Master:reloadAll(2): mt:userName(sn): "gcccore/.5.4.0"
                      Mname:sn(){
                      } Mname:sn
                      a[i].userName(1): icc/.2016.4.258
                      adding sn: icc to mA
                      module sn: icc is active
                      userName(2):  icc/.2016.4.258
                      Mname:fn(){
                      } Mname:fn
                      Mname:fullName(){
                      } Mname:fullName
                      Master:reloadAll fn_new: "false" mt:fileName(sn): "ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua" mt:userName(sn): "icc/.2016.4.258" a[i].userName: "icc/.2016.4.258"
                      Master:reloadAll(2): Unloading module: "icc"
                      Master:singleton(safe: nil){
                        s_master: table: 0x115ce70, safe: true
                      } Master:singleton
                      MasterControl:unload(mA={icc/.2016.4.258}){
                        unRegisterUserLoads(mA){
                          userName: icc/.2016.4.258
                        } unRegisterUserLoads
                        Master:unload(mA={icc/.2016.4.258}){
                          MasterControl:_setMode("unload"){
                          } MasterControl:_setMode
                          Setting mcp to MC_Unload
                          Setting mcp to MC_Unload
  (47)(2)Unloading: icc/.2016.4.258 (status: active) (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua)
                          Trying to unload: icc/.2016.4.258 sn: icc
                          Master:unload: "icc/.2016.4.258" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua"
                          loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua){
                            ModuleFile{
                              help([==[
                              Description
                              ===========
                              C and C++ compiler from Intel
                              More information
                              ================
                               - Homepage: http://software.intel.com/en-us/intel-compilers/
                              ]==])
                              whatis([==[Description: C and C++ compiler from Intel]==])
                              whatis([==[Homepage: http://software.intel.com/en-us/intel-compilers/]==])
                              local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258"
                              conflict("icc")
                              if not isloaded("gcccore/.5.4.0") or mode() == "unload" then
                                  load("gcccore/.5.4.0")
                              end
                              prepend_path("LIBRARY_PATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64"))
                              prepend_path("MANPATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/man/common"))
                              prepend_path("PATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/bin/intel64"))
                              setenv("EBROOTICC", root)
                              setenv("EBVERSIONICC", "2016.4.258")
                              setenv("EBDEVELICC", pathJoin(root, "easybuild/Core-icc-.2016.4.258-easybuild-devel"))
                              prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                              -- Built with EasyBuild version 3.5.0-r9c88db64dba51c4ffd22799c06090d57aaf17e38
                            } ModuleFile
                            help(...){
                            } help
                            whatis(Description: C and C++ compiler from Intel){
                            } whatis
                            whatis(Homepage: http://software.intel.com/en-us/intel-compilers/){
                            } whatis
                            conflict(icc){
                            }
                            isloaded(gcccore/.5.4.0){
                            } isloaded
                            MName:isloaded(){
                              Mname:sn(){
                              } Mname:sn
                            } MName:isloaded
                            load_module(gcccore/.5.4.0){
                              cmd: load argA.n: 1
                              mcp:name(): MC_Unload
                              Master:singleton(safe: nil){
                                s_master: table: 0x115ce70, safe: true
                              } Master:singleton
                              MasterControl:unload(mA={gcccore/.5.4.0}){
                                unRegisterUserLoads(mA){
                                  userName: gcccore/.5.4.0
                                } unRegisterUserLoads
                                Master:unload(mA={gcccore/.5.4.0}){
                                  MasterControl:_setMode("unload"){
                                  } MasterControl:_setMode
                                  Setting mcp to MC_Unload
                                  Setting mcp to MC_Unload
                                  Mname:fullName(){
                                  } Mname:fullName
                                  Mname:sn(){
                                  } Mname:sn
                                  Mname:fn(){
                                  } Mname:fn
    (48)(2)Unloading: gcccore/.5.4.0 (status: ) (fn: nil)
                                  Trying to unload: gcccore/.5.4.0 sn: false
                                  safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                  Setting mcp to MC_Unload
                                } Master:unload
                              } MasterControl:unload
                            } load_module
                            prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64){
                              MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/man/common){
                              MasterControl:remove_path{"MANPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/man/common", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64){
                              MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            setenv(EBROOTICC, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258){
                              MasterControl:unsetenv("EBROOTICC", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258"){
                              } MasterControl:unsetenv
                            } setenv
                            setenv(EBVERSIONICC, 2016.4.258){
                              MasterControl:unsetenv("EBVERSIONICC", "2016.4.258"){
                              } MasterControl:unsetenv
                            } setenv
                            setenv(EBDEVELICC, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/easybuild/Core-icc-.2016.4.258-easybuild-devel){
                              MasterControl:unsetenv("EBDEVELICC", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/easybuild/Core-icc-.2016.4.258-easybuild-devel"){
                              } MasterControl:unsetenv
                            } setenv
                            prepend_path(NLSPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/idb/intel64/locale/%l_%t/%N){
                              MasterControl:remove_path{"NLSPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                          } loadModuleFile
                          safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): true
                          Setting mcp to MC_Load
                        } Master:unload
                      } MasterControl:unload
                      Master:reloadAll(2): mt:userName(sn): "icc/.2016.4.258"
                      Mname:sn(){
                      } Mname:sn
                      a[i].userName(1): ifort/.2016.4.258
                      adding sn: ifort to mA
                      module sn: ifort is active
                      userName(2):  ifort/.2016.4.258
                      Mname:fn(){
                      } Mname:fn
                      Mname:fullName(){
                      } Mname:fullName
                      Master:reloadAll fn_new: "false" mt:fileName(sn): "ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua" mt:userName(sn): "ifort/.2016.4.258" a[i].userName: "ifort/.2016.4.258"
                      Master:reloadAll(2): Unloading module: "ifort"
                      Master:singleton(safe: nil){
                        s_master: table: 0x115ce70, safe: true
                      } Master:singleton
                      MasterControl:unload(mA={ifort/.2016.4.258}){
                        unRegisterUserLoads(mA){
                          userName: ifort/.2016.4.258
                        } unRegisterUserLoads
                        Master:unload(mA={ifort/.2016.4.258}){
                          MasterControl:_setMode("unload"){
                          } MasterControl:_setMode
                          Setting mcp to MC_Unload
                          Setting mcp to MC_Unload
  (49)(2)Unloading: ifort/.2016.4.258 (status: active) (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua)
                          Trying to unload: ifort/.2016.4.258 sn: ifort
                          Master:unload: "ifort/.2016.4.258" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua"
                          loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua){
                            ModuleFile{
                              help([==[
                              Description
                              ===========
                              Fortran compiler from Intel
                              More information
                              ================
                               - Homepage: http://software.intel.com/en-us/intel-compilers/
                              ]==])
                              whatis([==[Description: Fortran compiler from Intel]==])
                              whatis([==[Homepage: http://software.intel.com/en-us/intel-compilers/]==])
                              local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258"
                              conflict("ifort")
                              if not isloaded("gcccore/.5.4.0") or mode() == "unload" then
                                  load("gcccore/.5.4.0")
                              end
                              prepend_path("LIBRARY_PATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64"))
                              prepend_path("MANPATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/man/common"))
                              prepend_path("PATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/bin/intel64"))
                              setenv("EBROOTIFORT", root)
                              setenv("EBVERSIONIFORT", "2016.4.258")
                              setenv("EBDEVELIFORT", pathJoin(root, "easybuild/Core-ifort-.2016.4.258-easybuild-devel"))
                              prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                              -- Built with EasyBuild version 3.5.0-r9c88db64dba51c4ffd22799c06090d57aaf17e38
                            } ModuleFile
                            help(...){
                            } help
                            whatis(Description: Fortran compiler from Intel){
                            } whatis
                            whatis(Homepage: http://software.intel.com/en-us/intel-compilers/){
                            } whatis
                            conflict(ifort){
                            }
                            isloaded(gcccore/.5.4.0){
                            } isloaded
                            MName:isloaded(){
                              Mname:sn(){
                              } Mname:sn
                            } MName:isloaded
                            load_module(gcccore/.5.4.0){
                              cmd: load argA.n: 1
                              mcp:name(): MC_Unload
                              Master:singleton(safe: nil){
                                s_master: table: 0x115ce70, safe: true
                              } Master:singleton
                              MasterControl:unload(mA={gcccore/.5.4.0}){
                                unRegisterUserLoads(mA){
                                  userName: gcccore/.5.4.0
                                } unRegisterUserLoads
                                Master:unload(mA={gcccore/.5.4.0}){
                                  MasterControl:_setMode("unload"){
                                  } MasterControl:_setMode
                                  Setting mcp to MC_Unload
                                  Setting mcp to MC_Unload
                                  Mname:fullName(){
                                  } Mname:fullName
                                  Mname:sn(){
                                  } Mname:sn
                                  Mname:fn(){
                                  } Mname:fn
    (50)(2)Unloading: gcccore/.5.4.0 (status: ) (fn: nil)
                                  Trying to unload: gcccore/.5.4.0 sn: false
                                  safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                  Setting mcp to MC_Unload
                                } Master:unload
                              } MasterControl:unload
                            } load_module
                            prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64){
                              MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/man/common){
                              MasterControl:remove_path{"MANPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/man/common", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64){
                              MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            setenv(EBROOTIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258){
                              MasterControl:unsetenv("EBROOTIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258"){
                              } MasterControl:unsetenv
                            } setenv
                            setenv(EBVERSIONIFORT, 2016.4.258){
                              MasterControl:unsetenv("EBVERSIONIFORT", "2016.4.258"){
                              } MasterControl:unsetenv
                            } setenv
                            setenv(EBDEVELIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/easybuild/Core-ifort-.2016.4.258-easybuild-devel){
                              MasterControl:unsetenv("EBDEVELIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/easybuild/Core-ifort-.2016.4.258-easybuild-devel"){
                              } MasterControl:unsetenv
                            } setenv
                            prepend_path(NLSPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/idb/intel64/locale/%l_%t/%N){
                              MasterControl:remove_path{"NLSPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                          } loadModuleFile
                          safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): true
                          Setting mcp to MC_Load
                        } Master:unload
                      } MasterControl:unload
                      Master:reloadAll(2): mt:userName(sn): "ifort/.2016.4.258"
                      Mname:sn(){
                      } Mname:sn
                      a[i].userName(1): imkl/11.3.4.258
                      adding sn: imkl to mA
                      module sn: imkl is active
                      userName(2):  imkl/11.3.4.258
                      Mname:fn(){
                      } Mname:fn
                      Mname:fullName(){
                      } Mname:fullName
                      Master:reloadAll fn_new: "false" mt:fileName(sn): "ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua" mt:userName(sn): "imkl/11.3.4.258" a[i].userName: "imkl/11.3.4.258"
                      Master:reloadAll(2): Unloading module: "imkl"
                      Master:singleton(safe: nil){
                        s_master: table: 0x115ce70, safe: true
                      } Master:singleton
                      MasterControl:unload(mA={imkl/11.3.4.258}){
                        unRegisterUserLoads(mA){
                          userName: imkl/11.3.4.258
                        } unRegisterUserLoads
                        Master:unload(mA={imkl/11.3.4.258}){
                          MasterControl:_setMode("unload"){
                          } MasterControl:_setMode
                          Setting mcp to MC_Unload
                          Setting mcp to MC_Unload
  (51)(2)Unloading: imkl/11.3.4.258 (status: active) (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua)
                          Trying to unload: imkl/11.3.4.258 sn: imkl
                          Master:unload: "imkl/11.3.4.258" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua"
                          loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua){
                            ModuleFile{
                              help([==[
                              Description
                              ===========
                              Intel Math Kernel Library is a library of highly optimized,
                               extensively threaded math routines for science, engineering, and financial
                               applications that require maximum performance. Core math functions include
                               BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.
                              More information
                              ================
                               - Homepage: http://software.intel.com/en-us/intel-mkl/
                              ]==])
                              whatis([==[Description: Intel Math Kernel Library is a library of highly optimized,
                               extensively threaded math routines for science, engineering, and financial
                               applications that require maximum performance. Core math functions include
                               BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.]==])
                              whatis([==[Homepage: http://software.intel.com/en-us/intel-mkl/]==])
                              local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258"
                              conflict("imkl")
                              prepend_path("CPATH", pathJoin(root, "mkl/include"))
                              prepend_path("CPATH", pathJoin(root, "mkl/include/fftw"))
                              prepend_path("LIBRARY_PATH", pathJoin(root, "lib/intel64"))
                              prepend_path("LIBRARY_PATH", pathJoin(root, "mkl/lib/intel64"))
                              prepend_path("MIC_LD_LIBRARY_PATH", pathJoin(root, "lib/intel64_lin_mic"))
                              prepend_path("MIC_LD_LIBRARY_PATH", pathJoin(root, "mkl/lib/mic"))
                              prepend_path("PATH", pathJoin(root, "bin"))
                              prepend_path("PATH", pathJoin(root, "mkl/bin"))
                              setenv("EBROOTIMKL", root)
                              setenv("EBVERSIONIMKL", "11.3.4.258")
                              setenv("EBDEVELIMKL", pathJoin(root, "easybuild/Core-imkl-11.3.4.258-easybuild-devel"))
                              setenv("MKL_ENABLE_INSTRUCTIONS", "AVX512")
                              setenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/")
                              prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                              setenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl")
                              -- Built with EasyBuild version 3.6.2-r7ac096157987d9f8fad6490e41038c31790fa6ee
                            } ModuleFile
                            help(...){
                            } help
                            whatis(Description: Intel Math Kernel Library is a library of highly optimized,
 extensively threaded math routines for science, engineering, and financial
 applications that require maximum performance. Core math functions include
 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.){
                            } whatis
                            whatis(Homepage: http://software.intel.com/en-us/intel-mkl/){
                            } whatis
                            conflict(imkl){
                            }
                            prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include){
                              MasterControl:remove_path{"CPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include/fftw){
                              MasterControl:remove_path{"CPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include/fftw", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64){
                              MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/intel64){
                              MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(MIC_LD_LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64_lin_mic){
                              MasterControl:remove_path{"MIC_LD_LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64_lin_mic", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(MIC_LD_LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/mic){
                              MasterControl:remove_path{"MIC_LD_LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/mic", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/bin){
                              MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/bin){
                              MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            setenv(EBROOTIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258){
                              MasterControl:unsetenv("EBROOTIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258"){
                              } MasterControl:unsetenv
                            } setenv
                            setenv(EBVERSIONIMKL, 11.3.4.258){
                              MasterControl:unsetenv("EBVERSIONIMKL", "11.3.4.258"){
                              } MasterControl:unsetenv
                            } setenv
                            setenv(EBDEVELIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/easybuild/Core-imkl-11.3.4.258-easybuild-devel){
                              MasterControl:unsetenv("EBDEVELIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/easybuild/Core-imkl-11.3.4.258-easybuild-devel"){
                              } MasterControl:unsetenv
                            } setenv
                            setenv(MKL_ENABLE_INSTRUCTIONS, AVX512){
                              MasterControl:unsetenv("MKL_ENABLE_INSTRUCTIONS", "AVX512"){
                              } MasterControl:unsetenv
                            } setenv
                            setenv(MKL_EXAMPLES, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/){
                              MasterControl:unsetenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/"){
                              } MasterControl:unsetenv
                            } setenv
                            prepend_path(NLSPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/idb/intel64/locale/%l_%t/%N){
                              MasterControl:remove_path{"NLSPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            setenv(MKLROOT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl){
                              MasterControl:unsetenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl"){
                              } MasterControl:unsetenv
                            } setenv
                          } loadModuleFile
                          safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): true
                          Setting mcp to MC_Load
                        } Master:unload
                      } MasterControl:unload
                      Master:reloadAll(2): mt:userName(sn): "imkl/11.3.4.258"
                      Mname:sn(){
                      } Mname:sn
                      a[i].userName(1): intel/2016.4
                      adding sn: intel to mA
                      module sn: intel is active
                      userName(2):  intel/2016.4
                      Mname:fn(){
                      } Mname:fn
                      Mname:fullName(){
                      } Mname:fullName
                      Master:reloadAll fn_new: "false" mt:fileName(sn): "ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua" mt:userName(sn): "intel/2016.4" a[i].userName: "intel/2016.4"
                      Master:reloadAll(2): Unloading module: "intel"
                      Master:singleton(safe: nil){
                        s_master: table: 0x115ce70, safe: true
                      } Master:singleton
                      MasterControl:unload(mA={intel/2016.4}){
                        unRegisterUserLoads(mA){
                          userName: intel/2016.4
                        } unRegisterUserLoads
                        Master:unload(mA={intel/2016.4}){
                          MasterControl:_setMode("unload"){
                          } MasterControl:_setMode
                          Setting mcp to MC_Unload
                          Setting mcp to MC_Unload
  (52)(2)Unloading: intel/2016.4 (status: active) (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua)
                          Trying to unload: intel/2016.4 sn: intel
                          Master:unload: "intel/2016.4" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua"
                          loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua){
                            ModuleFile{
                              help([==[
                              Description
                              ===========
                              Intel Cluster Toolkit Compiler Edition provides Intel C,C++ and fortran compilers, Intel MPI and Intel MKL
                              More information
                              ================
                               - Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/
                              ]==])
                              whatis([==[Description: Intel Cluster Toolkit Compiler Edition provides Intel C,C++ and fortran compilers, Intel MPI and Intel MKL]==])
                              whatis([==[Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/]==])
                              local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4"
                              conflict("intel")
                              if not isloaded("icc/.2016.4.258") or mode() == "unload" then
                                  load("icc/.2016.4.258")
                              end
                              if not isloaded("ifort/.2016.4.258") or mode() == "unload" then
                                  load("ifort/.2016.4.258")
                              end
                              setenv("EBROOTICCIFORT", root)
                              setenv("EBVERSIONICCIFORT", "2016.4")
                              setenv("EBDEVELICCIFORT", pathJoin(root, "easybuild/Core-intel-2016.4-easybuild-devel"))
                              if isloaded("imkl") then
                                  always_load("imkl/11.3.4.258")
                              end
                              prepend_path("INTEL_LICENSE_FILE", pathJoin("/cvmfs/soft.computecanada.ca/config/licenses/intel", os.getenv("CC_CLUSTER") .. ".lic"))
                              local mroot = os.getenv("MODULEPATH_ROOT")
                              prepend_path("MODULEPATH", pathJoin(pathJoin(mroot, os.getenv("RSNT_ARCH"), "Compiler/intel2016.4")))
                              family("compiler")
                              -- Built with EasyBuild version 3.5.0-r9c88db64dba51c4ffd22799c06090d57aaf17e38
                            } ModuleFile
                            help(...){
                            } help
                            whatis(Description: Intel Cluster Toolkit Compiler Edition provides Intel C,C++ and fortran compilers, Intel MPI and Intel MKL){
                            } whatis
                            whatis(Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/){
                            } whatis
                            conflict(intel){
                            }
                            isloaded(icc/.2016.4.258){
                            } isloaded
                            MName:isloaded(){
                              Mname:sn(){
                              } Mname:sn
                            } MName:isloaded
                            load_module(icc/.2016.4.258){
                              cmd: load argA.n: 1
                              mcp:name(): MC_Unload
                              Master:singleton(safe: nil){
                                s_master: table: 0x115ce70, safe: true
                              } Master:singleton
                              MasterControl:unload(mA={icc/.2016.4.258}){
                                unRegisterUserLoads(mA){
                                  userName: icc/.2016.4.258
                                } unRegisterUserLoads
                                Master:unload(mA={icc/.2016.4.258}){
                                  MasterControl:_setMode("unload"){
                                  } MasterControl:_setMode
                                  Setting mcp to MC_Unload
                                  Setting mcp to MC_Unload
                                  Mname:fullName(){
                                  } Mname:fullName
                                  Mname:sn(){
                                  } Mname:sn
                                  Mname:fn(){
                                  } Mname:fn
    (53)(2)Unloading: icc/.2016.4.258 (status: ) (fn: nil)
                                  Trying to unload: icc/.2016.4.258 sn: false
                                  safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                  Setting mcp to MC_Unload
                                } Master:unload
                              } MasterControl:unload
                            } load_module
                            isloaded(ifort/.2016.4.258){
                            } isloaded
                            MName:isloaded(){
                              Mname:sn(){
                              } Mname:sn
                            } MName:isloaded
                            load_module(ifort/.2016.4.258){
                              cmd: load argA.n: 1
                              mcp:name(): MC_Unload
                              Master:singleton(safe: nil){
                                s_master: table: 0x115ce70, safe: true
                              } Master:singleton
                              MasterControl:unload(mA={ifort/.2016.4.258}){
                                unRegisterUserLoads(mA){
                                  userName: ifort/.2016.4.258
                                } unRegisterUserLoads
                                Master:unload(mA={ifort/.2016.4.258}){
                                  MasterControl:_setMode("unload"){
                                  } MasterControl:_setMode
                                  Setting mcp to MC_Unload
                                  Setting mcp to MC_Unload
                                  Mname:fullName(){
                                  } Mname:fullName
                                  Mname:sn(){
                                  } Mname:sn
                                  Mname:fn(){
                                  } Mname:fn
    (54)(2)Unloading: ifort/.2016.4.258 (status: ) (fn: nil)
                                  Trying to unload: ifort/.2016.4.258 sn: false
                                  safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                  Setting mcp to MC_Unload
                                } Master:unload
                              } MasterControl:unload
                            } load_module
                            setenv(EBROOTICCIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4){
                              MasterControl:unsetenv("EBROOTICCIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4"){
                              } MasterControl:unsetenv
                            } setenv
                            setenv(EBVERSIONICCIFORT, 2016.4){
                              MasterControl:unsetenv("EBVERSIONICCIFORT", "2016.4"){
                              } MasterControl:unsetenv
                            } setenv
                            setenv(EBDEVELICCIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4/easybuild/Core-intel-2016.4-easybuild-devel){
                              MasterControl:unsetenv("EBDEVELICCIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4/easybuild/Core-intel-2016.4-easybuild-devel"){
                              } MasterControl:unsetenv
                            } setenv
                            isloaded(imkl){
                            } isloaded
                            MName:isloaded(){
                              Mname:sn(){
                              } Mname:sn
                            } MName:isloaded
                            prepend_path(INTEL_LICENSE_FILE, /cvmfs/soft.computecanada.ca/config/licenses/intel/computecanada.lic){
                              MasterControl:remove_path{"INTEL_LICENSE_FILE", "/cvmfs/soft.computecanada.ca/config/licenses/intel/computecanada.lic", delim=":", nodups="true", priority=0, where=first, force=nil}{
                              } MasterControl:remove_path
                            } prepend_path
                            prepend_path(MODULEPATH, ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4){
                              MasterControl:remove_path{"MODULEPATH", "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4", delim=":", nodups="true", priority=0, where=first, force=nil}{
    Removing: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4 from MODULEPATH
                                chkMP("MODULEPATH", value: ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1:ProjectDIR/rt/cc/cc_mf/modules-avx512:ProjectDIR/rt/cc/cc_mf/modules, adding:false){
                                  MT:set_MPATH_change_flag(self)
                                  ModuleA:update(spider_cache=false){
                                    Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules-avx512
                                    Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules
                                  } ModuleA:update
                                } chkMP
                              } MasterControl:remove_path
                            } prepend_path
                            family(compiler){
                              MasterControl:unset_family(compiler){
                                MasterControl:unsetenv("LMOD_FAMILY_COMPILER", ""){
                                } MasterControl:unsetenv
                                MasterControl:unsetenv("LMOD_FAMILY_COMPILER_VERSION", ""){
                                } MasterControl:unsetenv
                                MasterControl:unsetenv("LMOD_FAMILY_COMPILER", ""){
                                } MasterControl:unsetenv
                                MasterControl:unsetenv("LMOD_FAMILY_COMPILER_VERSION", ""){
                                } MasterControl:unsetenv
                              } MasterControl:unset_family
                            } family
                          } loadModuleFile
                          safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): true
                          Master:load calling reloadAll()
                          Master:reloadAll(count: 3){
                            Setting mcp to MC_Load
  reloadAll(3)(arch/avx512, StdEnv, openmpi/2.1.1)
                            Mname:sn(){
                            } Mname:sn
                            a[i].userName(1): arch/avx512
                            adding sn: arch to mA
                            module sn: arch is active
                            userName(2):  arch/avx512
                            Mname:fn(){
                              LocationT:new(moduleA){
                                LocationT build(moduleA){
                                } LocationT build
                              } LocationT:new
                            } Mname:fn
                            Mname:sn(){
                            } Mname:sn
                            a[i].userName(1): StdEnv
                            adding sn: StdEnv to mA
                            module sn: StdEnv is active
                            userName(2):  StdEnv
                            Mname:fn(){
                            } Mname:fn
                            Mname:sn(){
                            } Mname:sn
                            a[i].userName(1): openmpi/2.1.1
                            adding sn: openmpi to mA
                            module sn: openmpi is active
                            userName(2):  openmpi/2.1.1
                            Mname:fn(){
                            } Mname:fn
                            Mname:fullName(){
                            } Mname:fullName
                            Master:reloadAll fn_new: "false" mt:fileName(sn): "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua" mt:userName(sn): "openmpi/2.1.1" a[i].userName: "openmpi/2.1.1"
                            Master:reloadAll(3): Unloading module: "openmpi"
                            Master:singleton(safe: nil){
                              s_master: table: 0x115ce70, safe: true
                            } Master:singleton
                            MasterControl:unload(mA={openmpi/2.1.1}){
                              unRegisterUserLoads(mA){
                                userName: openmpi/2.1.1
                              } unRegisterUserLoads
                              Master:unload(mA={openmpi/2.1.1}){
                                MasterControl:_setMode("unload"){
                                } MasterControl:_setMode
                                Setting mcp to MC_Unload
                                Setting mcp to MC_Unload
  (55)(3)Unloading: openmpi/2.1.1 (status: active) (fn: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua)
                                Trying to unload: openmpi/2.1.1 sn: openmpi
                                Master:unload: "openmpi/2.1.1" from file: "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua"
                                loadModuleFile(ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua){
                                  ModuleFile{
                                    help([==[
                                    Description
                                    ===========
                                    The Open MPI Project is an open source MPI-2 implementation.
                                    More information
                                    ================
                                     - Homepage: http://www.open-mpi.org/
                                    ]==])
                                    whatis([==[Description: The Open MPI Project is an open source MPI-2 implementation.]==])
                                    whatis([==[Homepage: http://www.open-mpi.org/]==])
                                    local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1"
                                    conflict("openmpi")
                                    local mroot = os.getenv("MODULEPATH_ROOT")
                                    prepend_path("MODULEPATH", pathJoin(mroot,"avx512/MPI/intel2016.4/openmpi2.1"))
                                    prepend_path("CPATH", pathJoin(root, "include"))
                                    prepend_path("LIBRARY_PATH", pathJoin(root, "lib"))
                                    prepend_path("MANPATH", pathJoin(root, "share/man"))
                                    prepend_path("PATH", pathJoin(root, "bin"))
                                    prepend_path("PKG_CONFIG_PATH", pathJoin(root, "lib/pkgconfig"))
                                    setenv("EBROOTOPENMPI", root)
                                    setenv("EBVERSIONOPENMPI", "2.1.1")
                                    setenv("EBDEVELOPENMPI", pathJoin(root, "easybuild/avx512-Compiler-intel2016.4-openmpi-2.1.1-easybuild-devel"))
                                    if os.getenv("RSNT_INTERCONNECT") == "omnipath" then
                                            setenv("OMPI_MCA_mtl", "^mxm")
                                            setenv("OMPI_MCA_pml", "^yalla")
                                    end
                                    family("mpi")
                                    -- Built with EasyBuild version 3.6.0
                                  } ModuleFile
                                  help(...){
                                  } help
                                  whatis(Description: The Open MPI Project is an open source MPI-2 implementation.){
                                  } whatis
                                  whatis(Homepage: http://www.open-mpi.org/){
                                  } whatis
                                  conflict(openmpi){
                                  }
                                  prepend_path(MODULEPATH, ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1){
                                    MasterControl:remove_path{"MODULEPATH", "ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1", delim=":", nodups="true", priority=0, where=first, force=nil}{
    Removing: ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1 from MODULEPATH
                                      chkMP("MODULEPATH", value: ProjectDIR/rt/cc/cc_mf/modules-avx512:ProjectDIR/rt/cc/cc_mf/modules, adding:false){
                                        MT:set_MPATH_change_flag(self)
                                        ModuleA:update(spider_cache=false){
                                          Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules-avx512
                                          Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules
                                        } ModuleA:update
                                      } chkMP
                                    } MasterControl:remove_path
                                  } prepend_path
                                  prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/include){
                                    MasterControl:remove_path{"CPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/include", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                    } MasterControl:remove_path
                                  } prepend_path
                                  prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/lib){
                                    MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/lib", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                    } MasterControl:remove_path
                                  } prepend_path
                                  prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/share/man){
                                    MasterControl:remove_path{"MANPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/share/man", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                    } MasterControl:remove_path
                                  } prepend_path
                                  prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/bin){
                                    MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                    } MasterControl:remove_path
                                  } prepend_path
                                  prepend_path(PKG_CONFIG_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/lib/pkgconfig){
                                    MasterControl:remove_path{"PKG_CONFIG_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/lib/pkgconfig", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                    } MasterControl:remove_path
                                  } prepend_path
                                  setenv(EBROOTOPENMPI, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1){
                                    MasterControl:unsetenv("EBROOTOPENMPI", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1"){
                                    } MasterControl:unsetenv
                                  } setenv
                                  setenv(EBVERSIONOPENMPI, 2.1.1){
                                    MasterControl:unsetenv("EBVERSIONOPENMPI", "2.1.1"){
                                    } MasterControl:unsetenv
                                  } setenv
                                  setenv(EBDEVELOPENMPI, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/easybuild/avx512-Compiler-intel2016.4-openmpi-2.1.1-easybuild-devel){
                                    MasterControl:unsetenv("EBDEVELOPENMPI", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/easybuild/avx512-Compiler-intel2016.4-openmpi-2.1.1-easybuild-devel"){
                                    } MasterControl:unsetenv
                                  } setenv
                                  family(mpi){
                                    MasterControl:unset_family(mpi){
                                      MasterControl:unsetenv("LMOD_FAMILY_MPI", ""){
                                      } MasterControl:unsetenv
                                      MasterControl:unsetenv("LMOD_FAMILY_MPI_VERSION", ""){
                                      } MasterControl:unsetenv
                                      MasterControl:unsetenv("LMOD_FAMILY_MPI", ""){
                                      } MasterControl:unsetenv
                                      MasterControl:unsetenv("LMOD_FAMILY_MPI_VERSION", ""){
                                      } MasterControl:unsetenv
                                    } MasterControl:unset_family
                                  } family
                                } loadModuleFile
                                safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): true
                                Master:load calling reloadAll()
                                Master:reloadAll(count: 4){
                                  Setting mcp to MC_Load
  reloadAll(4)(arch/avx512, StdEnv)
                                  Mname:sn(){
                                  } Mname:sn
                                  a[i].userName(1): arch/avx512
                                  adding sn: arch to mA
                                  module sn: arch is active
                                  userName(2):  arch/avx512
                                  Mname:fn(){
                                    LocationT:new(moduleA){
                                      LocationT build(moduleA){
                                      } LocationT build
                                    } LocationT:new
                                  } Mname:fn
                                  Mname:sn(){
                                  } Mname:sn
                                  a[i].userName(1): StdEnv
                                  adding sn: StdEnv to mA
                                  module sn: StdEnv is active
                                  userName(2):  StdEnv
                                  Mname:fn(){
                                  } Mname:fn
                                  checking sn: arch
                                  checking sn: StdEnv
                                  Setting mpc to MC_Unload
                                } Master:reloadAll
                                Setting mcp to MC_Load
                              } Master:unload
                            } MasterControl:unload
                            Master:reloadAll(3): mt:userName(sn): "openmpi/2.1.1"
                            checking sn: arch
                            checking sn: StdEnv
                            checking sn: openmpi
                            Master:reloadAll module: openmpi marked as inactive
                            Setting mpc to MC_Unload
                          } Master:reloadAll
                          Setting mcp to MC_Load
                        } Master:unload
                      } MasterControl:unload
                      Master:reloadAll(2): mt:userName(sn): "intel/2016.4"
                      Mname:sn(){
                      } Mname:sn
                      a[i].userName(1): openmpi/2.1.1
                      adding sn: openmpi to mA
                      module sn: openmpi is inactive
                      Master:reloadAll(2): Loading non-active module: "openmpi/2.1.1"
                      MasterControl:load(mA={openmpi/2.1.1}){
                        Master:singleton(safe: nil){
                          s_master: table: 0x115ce70, safe: true
                        } Master:singleton
                        Master:load(mA={openmpi/2.1.1}){
                          Master:load i: 1, userName: openmpi/2.1.1
                          Mname:sn(){
                          } Mname:sn
                          Mname:fullName(){
                          } Mname:fullName
                          Mname:fn(){
                          } Mname:fn
  (56)(2)Loading: openmpi/2.1.1 (fn: nil, using Find-Best)
                          Master:load i: 1 sn: nil fn: false
                          safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): true
                        } Master:load
                        MasterControl:registerAdminMsg(mA){
                          Mname:sn(){
                          } Mname:sn
                        } MasterControl:registerAdminMsg
                      } MasterControl:load
                      status: false, fn_old: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua, fn: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua
                      checking sn: arch
                      checking sn: StdEnv
                      checking sn: gcccore
                      Master:reloadAll module: gcccore marked as inactive
                      checking sn: icc
                      Master:reloadAll module: icc marked as inactive
                      checking sn: ifort
                      Master:reloadAll module: ifort marked as inactive
                      checking sn: imkl
                      Master:reloadAll module: imkl marked as inactive
                      checking sn: intel
                      Master:reloadAll module: intel marked as inactive
                      checking sn: openmpi
                      Master:reloadAll module: openmpi marked as inactive
                      Setting mpc to MC_Unload
                    } Master:reloadAll
                    Setting mcp to MC_Load
                  } Master:unload
                } MasterControl:unload
                MasterControl:load_usr(mA={nixpkgs/16.09}){
                  registerUserLoads(mA){
                    userName: nixpkgs/16.09
                  } registerUserLoads
                  MasterControl:load(mA={nixpkgs/16.09}){
                    Master:singleton(safe: nil){
                      s_master: table: 0x115ce70, safe: true
                    } Master:singleton
                    Master:load(mA={nixpkgs/16.09}){
                      Master:load i: 1, userName: nixpkgs/16.09
                      Mname:sn(){
                      } Mname:sn
  (57)(1)Loading: nixpkgs/16.09 (fn: ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua, using Find-Best)
                      Master:load i: 1 sn: nixpkgs fn: ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua
                      Master:loading: "nixpkgs/16.09" from file: "ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua"
                      loadModuleFile(ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua){
                        ModuleFile{
                          local cc_cluster = os.getenv("CC_CLUSTER") or "computecanada"
                          local arch = "avx512"
                          local interconnect = os.getenv("RSNT_INTERCONNECT") or ""
                          if not interconnect or interconnect == "" then
                          	if cc_cluster == "cedar" then
                          		interconnect = "omnipath"
                          	else
                          		interconnect = "infiniband"
                          	end
                          end
                          local generic_nixpkgs = false
                          local mroot = os.getenv("MODULEPATH_ROOT")
                          assert(loadfile(pathJoin(mroot,"modules/nixpkgs/16.09.lua.core")))(arch, interconnect, generic_nixpkgs)
                        } ModuleFile
                        help(...){
                        } help
                        whatis(Description: Nixpkgs is a collection of packages for the Nix package manager - Homepage: https://github.com/NixOS/nixpkgs){
                        } whatis
                        setenv(NIXUSER_PROFILE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09){
                          MasterControl:setenv("NIXUSER_PROFILE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09", "nil"){
                          } MasterControl:setenv
                        } setenv
                        prepend_path(PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/sbin){
                          MasterControl:prepend_path(t){
                            name:"PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/sbin", delim=":", nodups="true", priority=0
                          } MasterControl:prepend_path
                        } prepend_path
                        prepend_path(PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin){
                          MasterControl:prepend_path(t){
                            name:"PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin", delim=":", nodups="true", priority=0
                          } MasterControl:prepend_path
                        } prepend_path
                        prepend_path(PATH, /cvmfs/soft.computecanada.ca/custom/bin){
                          MasterControl:prepend_path(t){
                            name:"PATH", value: "/cvmfs/soft.computecanada.ca/custom/bin", delim=":", nodups="true", priority=0
                          } MasterControl:prepend_path
                        } prepend_path
                        prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib){
                          MasterControl:prepend_path(t){
                            name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib", delim=":", nodups="true", priority=0
                          } MasterControl:prepend_path
                        } prepend_path
                        prepend_path(C_INCLUDE_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include){
                          MasterControl:prepend_path(t){
                            name:"C_INCLUDE_PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include", delim=":", nodups="true", priority=0
                          } MasterControl:prepend_path
                        } prepend_path
                        prepend_path(CPLUS_INCLUDE_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include){
                          MasterControl:prepend_path(t){
                            name:"CPLUS_INCLUDE_PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include", delim=":", nodups="true", priority=0
                          } MasterControl:prepend_path
                        } prepend_path
                        prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/man){
                          MasterControl:prepend_path(t){
                            name:"MANPATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/man", delim=":", nodups="true", priority=0
                          } MasterControl:prepend_path
                        } prepend_path
                        prepend_path(ACLOCAL_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/aclocal){
                          MasterControl:prepend_path(t){
                            name:"ACLOCAL_PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/aclocal", delim=":", nodups="true", priority=0
                          } MasterControl:prepend_path
                        } prepend_path
                        prepend_path(PKG_CONFIG_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/pkgconfig){
                          MasterControl:prepend_path(t){
                            name:"PKG_CONFIG_PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/pkgconfig", delim=":", nodups="true", priority=0
                          } MasterControl:prepend_path
                        } prepend_path
                        setenv(FONTCONFIG_FILE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/etc/fonts/fonts.conf){
                          MasterControl:setenv("FONTCONFIG_FILE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/etc/fonts/fonts.conf", "nil"){
                          } MasterControl:setenv
                        } setenv
                        prepend_path(PYTHONPATH, /cvmfs/soft.computecanada.ca/custom/python/site-packages){
                          MasterControl:prepend_path(t){
                            name:"PYTHONPATH", value: "/cvmfs/soft.computecanada.ca/custom/python/site-packages", delim=":", nodups="true", priority=0
                          } MasterControl:prepend_path
                        } prepend_path
                        setenv(PERL5OPT, -I/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5 -I/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5/site_perl){
                          MasterControl:setenv("PERL5OPT", "-I/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5 -I/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5/site_perl", "nil"){
                          } MasterControl:setenv
                        } setenv
                        prepend_path(PERL5LIB, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5/site_perl){
                          MasterControl:prepend_path(t){
                            name:"PERL5LIB", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5/site_perl", delim=":", nodups="true", priority=0
                          } MasterControl:prepend_path
                        } prepend_path
                        prepend_path(PERL5LIB, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5){
                          MasterControl:prepend_path(t){
                            name:"PERL5LIB", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5", delim=":", nodups="true", priority=0
                          } MasterControl:prepend_path
                        } prepend_path
                        setenv(TZDIR, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/zoneinfo){
                          MasterControl:setenv("TZDIR", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/zoneinfo", "nil"){
                          } MasterControl:setenv
                        } setenv
                        setenv(SSL_CERT_FILE, /etc/pki/tls/certs/ca-bundle.crt){
                          MasterControl:setenv("SSL_CERT_FILE", "/etc/pki/tls/certs/ca-bundle.crt", "nil"){
                          } MasterControl:setenv
                        } setenv
                        setenv(CURL_CA_BUNDLE, /etc/pki/tls/certs/ca-bundle.crt){
                          MasterControl:setenv("CURL_CA_BUNDLE", "/etc/pki/tls/certs/ca-bundle.crt", "nil"){
                          } MasterControl:setenv
                        } setenv
                        setenv(PAGER, less -R){
                          MasterControl:setenv("PAGER", "less -R", "nil"){
                          } MasterControl:setenv
                        } setenv
                        setenv(LESSOPEN, |/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/lesspipe.sh %s){
                          MasterControl:setenv("LESSOPEN", "|/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/lesspipe.sh %s", "nil"){
                          } MasterControl:setenv
                        } setenv
                        setenv(LOCALE_ARCHIVE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/locale/locale-archive){
                          MasterControl:setenv("LOCALE_ARCHIVE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/locale/locale-archive", "nil"){
                          } MasterControl:setenv
                        } setenv
                        setenv(MXM_LOG_LEVEL, error){
                          MasterControl:setenv("MXM_LOG_LEVEL", "error", "nil"){
                          } MasterControl:setenv
                        } setenv
                        setenv(RSNT_ARCH, avx512){
                          MasterControl:setenv("RSNT_ARCH", "avx512", "nil"){
                          } MasterControl:setenv
                        } setenv
                        setenv(RSNT_INTERCONNECT, infiniband){
                          MasterControl:setenv("RSNT_INTERCONNECT", "infiniband", "nil"){
                          } MasterControl:setenv
                        } setenv
                        setenv(PIP_CONFIG_FILE, /cvmfs/soft.computecanada.ca/config/python/pip-avx512.conf){
                          MasterControl:setenv("PIP_CONFIG_FILE", "/cvmfs/soft.computecanada.ca/config/python/pip-avx512.conf", "nil"){
                          } MasterControl:setenv
                        } setenv
                        prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/bin){
                          MasterControl:prepend_path(t){
                            name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/bin", delim=":", nodups="true", priority=0
                          } MasterControl:prepend_path
                        } prepend_path
                        setenv(EASYBUILD_CONFIGFILES, /cvmfs/soft.computecanada.ca/easybuild/config.cfg){
                          MasterControl:setenv("EASYBUILD_CONFIGFILES", "/cvmfs/soft.computecanada.ca/easybuild/config.cfg", "nil"){
                          } MasterControl:setenv
                        } setenv
                        setenv(EASYBUILD_BUILDPATH, /dev/shm/mclay){
                          MasterControl:setenv("EASYBUILD_BUILDPATH", "/dev/shm/mclay", "nil"){
                          } MasterControl:setenv
                        } setenv
                        setenv(EBROOTNIXPKGS, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09){
                          MasterControl:setenv("EBROOTNIXPKGS", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09", "nil"){
                          } MasterControl:setenv
                        } setenv
                        setenv(EBVERSIONNIXPKGS, 16.09){
                          MasterControl:setenv("EBVERSIONNIXPKGS", "16.09", "nil"){
                          } MasterControl:setenv
                        } setenv
                        prepend_path(MODULEPATH, ProjectDIR/rt/cc/cc_mf/Core-avx512){
                          MasterControl:prepend_path(t){
                            name:"MODULEPATH", value: "ProjectDIR/rt/cc/cc_mf/Core-avx512", delim=":", nodups="true", priority=0
    Prepending: ProjectDIR/rt/cc/cc_mf/Core-avx512 to MODULEPATH
                            chkMP("MODULEPATH", value: ProjectDIR/rt/cc/cc_mf/Core-avx512:ProjectDIR/rt/cc/cc_mf/modules-avx512:ProjectDIR/rt/cc/cc_mf/modules, adding:true){
                              MT:set_MPATH_change_flag(self)
                              ModuleA:update(spider_cache=false){
                                building mpath: ProjectDIR/rt/cc/cc_mf/Core-avx512
                                ModuleA:__new(){
                                  calling DirTree:new()
                                  RC_File(ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/.modulerc.lua){
                                    if os.getenv("RSNT_ARCH") == "avx512" then
                                    	module_version("intel/2018.3","default")
                                    else
                                    	module_version("intel/2016.4","default")
                                    end
                                  } RC_File
                                  In versionFile
                                  MRC:parseModA_for_moduleA(intel, modA){
                                    entry.kind: module_version
                                    resolve(fullName): intel/2018.3
                                    (2) fullName: intel/2018.3
                                    j: 1, version: default
                                    Setting default: intel/2018.3
                                  } MRC:parseModA_for_moduleA
                                  Back in versionFile
                                  ModuleA build(){
                                    #dirA: 1
                                    mpath: ProjectDIR/rt/cc/cc_mf/Core-avx512
                                  } ModuleA build
                                  ["moduleA:"]  = {
                                    {
                                      T = {
                                        gcc = {
                                          defaultT = {},
                                          dirT = {},
                                          fileT = {
                                            ["gcc/5.4.0"]  = {
                                              ["canonical"] = "5.4.0",
                                              ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/gcc/5.4.0.lua",
                                              ["luaExt"] = 6,
                                              ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                              ["pV"] = "000000005.000000004.*zfinal",
                                              ["wV"] = "000000005.000000004.*zfinal",
                                            },
                                            ["gcc/7.3.0"]  = {
                                              ["canonical"] = "7.3.0",
                                              ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/gcc/7.3.0.lua",
                                              ["luaExt"] = 6,
                                              ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                              ["pV"] = "000000007.000000003.*zfinal",
                                              ["wV"] = "000000007.000000003.*zfinal",
                                            },
                                          },
                                        },
                                        gcccore = {
                                          defaultT = {},
                                          dirT = {},
                                          fileT = {
                                            ["gcccore/.5.4.0"]  = {
                                              ["canonical"] = ".5.4.0",
                                              ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua",
                                              ["luaExt"] = 7,
                                              ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                              ["pV"] = "000000000.000000005.000000004.*zfinal",
                                              ["wV"] = "000000000.000000005.000000004.*zfinal",
                                            },
                                            ["gcccore/.7.3.0"]  = {
                                              ["canonical"] = ".7.3.0",
                                              ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.7.3.0.lua",
                                              ["luaExt"] = 7,
                                              ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                              ["pV"] = "000000000.000000007.000000003.*zfinal",
                                              ["wV"] = "000000000.000000007.000000003.*zfinal",
                                            },
                                          },
                                        },
                                        icc = {
                                          defaultT = {},
                                          dirT = {},
                                          fileT = {
                                            ["icc/.2016.4.258"]  = {
                                              ["canonical"] = ".2016.4.258",
                                              ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua",
                                              ["luaExt"] = 12,
                                              ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                              ["pV"] = "000000000.000002016.000000004.000000258.*zfinal",
                                              ["wV"] = "000000000.000002016.000000004.000000258.*zfinal",
                                            },
                                            ["icc/.2018.3.222"]  = {
                                              ["canonical"] = ".2018.3.222",
                                              ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2018.3.222.lua",
                                              ["luaExt"] = 12,
                                              ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                              ["pV"] = "000000000.000002018.000000003.000000222.*zfinal",
                                              ["wV"] = "000000000.000002018.000000003.000000222.*zfinal",
                                            },
                                          },
                                        },
                                        ifort = {
                                          defaultT = {},
                                          dirT = {},
                                          fileT = {
                                            ["ifort/.2016.4.258"]  = {
                                              ["canonical"] = ".2016.4.258",
                                              ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua",
                                              ["luaExt"] = 12,
                                              ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                              ["pV"] = "000000000.000002016.000000004.000000258.*zfinal",
                                              ["wV"] = "000000000.000002016.000000004.000000258.*zfinal",
                                            },
                                            ["ifort/.2018.3.222"]  = {
                                              ["canonical"] = ".2018.3.222",
                                              ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2018.3.222.lua",
                                              ["luaExt"] = 12,
                                              ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                              ["pV"] = "000000000.000002018.000000003.000000222.*zfinal",
                                              ["wV"] = "000000000.000002018.000000003.000000222.*zfinal",
                                            },
                                          },
                                        },
                                        imkl = {
                                          defaultT = {},
                                          dirT = {},
                                          fileT = {
                                            ["imkl/11.3.4.258"]  = {
                                              ["canonical"] = "11.3.4.258",
                                              ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua",
                                              ["luaExt"] = 11,
                                              ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                              ["pV"] = "000000011.000000003.000000004.000000258.*zfinal",
                                              ["wV"] = "000000011.000000003.000000004.000000258.*zfinal",
                                            },
                                            ["imkl/2018.3.222"]  = {
                                              ["canonical"] = "2018.3.222",
                                              ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/2018.3.222.lua",
                                              ["luaExt"] = 11,
                                              ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                              ["pV"] = "000002018.000000003.000000222.*zfinal",
                                              ["wV"] = "000002018.000000003.000000222.*zfinal",
                                            },
                                          },
                                        },
                                        intel = {
                                          defaultT = {
                                            ["barefn"] = ".modulerc.lua",
                                            ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/.modulerc.lua",
                                            ["fullName"] = "intel/.modulerc",
                                            ["luaExt"] = 10,
                                            ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                            ["value"] = "intel/2018.3",
                                          },
                                          dirT = {},
                                          fileT = {
                                            ["intel/2016.4"]  = {
                                              ["canonical"] = "2016.4",
                                              ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua",
                                              ["luaExt"] = 7,
                                              ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                              ["pV"] = "000002016.000000004.*zfinal",
                                              ["wV"] = "000002016.000000004.*zfinal",
                                            },
                                            ["intel/2018.3"]  = {
                                              ["canonical"] = "2018.3",
                                              ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2018.3.lua",
                                              ["luaExt"] = 7,
                                              ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                              ["pV"] = "000002018.000000003.*zfinal",
                                              ["wV"] = "^00002018.000000003.*zfinal",
                                            },
                                          },
                                        },
                                      },
                                      ["mpath"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512",
                                    },
                                  }
                                  isNVV: false
                                } ModuleA:__new
                                Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules-avx512
                                Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules
                              } ModuleA:update
                            } chkMP
                          } MasterControl:prepend_path
                        } prepend_path
                        setenv(PROJECT, OutputDIR/project){
                          MasterControl:setenv("PROJECT", "OutputDIR/project", "nil"){
                          } MasterControl:setenv
                        } setenv
                        setenv(CC_PROJECT, OutputDIR/project){
                          MasterControl:setenv("CC_PROJECT", "OutputDIR/project", "nil"){
                          } MasterControl:setenv
                        } setenv
                        set_alias(quota, diskusage_report){
                          MasterControl:set_alias("quota", "diskusage_report"){
                          } MasterControl:set_alias
                        } set_alias
                      } loadModuleFile
                      Marking nixpkgs/16.09 as active and loaded
                      safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): true
                      Master:load calling reloadAll()
                      Master:reloadAll(count: 2){
                        Setting mcp to MC_Load
  reloadAll(2)(arch/avx512, StdEnv, nixpkgs/16.09, gcccore/.5.4.0, icc/.2016.4.258, ifort/.2016.4.258, imkl/11.3.4.258, intel/2016.4, openmpi/2.1.1)
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): arch/avx512
                        adding sn: arch to mA
                        module sn: arch is active
                        userName(2):  arch/avx512
                        Mname:fn(){
                          LocationT:new(moduleA){
                            LocationT build(moduleA){
                            } LocationT build
                          } LocationT:new
                        } Mname:fn
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): StdEnv
                        adding sn: StdEnv to mA
                        module sn: StdEnv is active
                        userName(2):  StdEnv
                        Mname:fn(){
                        } Mname:fn
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): nixpkgs/16.09
                        adding sn: nixpkgs to mA
                        module sn: nixpkgs is active
                        userName(2):  nixpkgs/16.09
                        Mname:fn(){
                        } Mname:fn
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): gcccore/.5.4.0
                        adding sn: gcccore to mA
                        module sn: gcccore is inactive
                        Master:reloadAll(2): Loading non-active module: "gcccore/.5.4.0"
                        MasterControl:load(mA={gcccore/.5.4.0}){
                          Master:singleton(safe: nil){
                            s_master: table: 0x115ce70, safe: true
                          } Master:singleton
                          Master:load(mA={gcccore/.5.4.0}){
                            Master:load i: 1, userName: gcccore/.5.4.0
                            Mname:sn(){
                            } Mname:sn
  (58)(2)Loading: gcccore/.5.4.0 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua, using Find-Best)
                            Master:load i: 1 sn: gcccore fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua
                            Master:loading: "gcccore/.5.4.0" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua"
                            loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua){
                              ModuleFile{
                                help([[
                                Description
                                ===========
                                The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,
                                 as well as libraries for these languages (libstdc++, libgcj,...).
                                More information
                                ================
                                 - Homepage: http://gcc.gnu.org/
                                ]])
                                whatis([[Description: The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,
                                 as well as libraries for these languages (libstdc++, libgcj,...).]])
                                whatis([[Homepage: http://gcc.gnu.org/]])
                                local root = "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0"
                                conflict("gcccore")
                                prepend_path("CPATH", pathJoin(root, "include"))
                                prepend_path("LIBRARY_PATH", pathJoin(root, "lib"))
                                prepend_path("LIBRARY_PATH", pathJoin(root, "lib64"))
                                prepend_path("MANPATH", pathJoin(root, "share/man"))
                                prepend_path("PATH", pathJoin(root, "bin"))
                                setenv("EBROOTGCCCORE", root)
                                setenv("EBVERSIONGCCCORE", "5.4.0")
                                setenv("EBDEVELGCCCORE", pathJoin(root, "easybuild/Core-gcccore-.5.4.0-easybuild-devel"))
                                -- Built with EasyBuild version 3.3.0-re50b70af25207aec9b965a5c4aaa47ba992c9aa6
                              } ModuleFile
                              help(...){
                              } help
                              whatis(Description: The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, and Ada,
 as well as libraries for these languages (libstdc++, libgcj,...).){
                              } whatis
                              whatis(Homepage: http://gcc.gnu.org/){
                              } whatis
                              conflict(gcccore){
                                MasterControl:conflict(mA){
                                  Mname:sn(){
                                  } Mname:sn
                                } MasterControl:conflict
                              }
                              prepend_path(CPATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/include){
                                MasterControl:prepend_path(t){
                                  name:"CPATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/include", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/lib){
                                MasterControl:prepend_path(t){
                                  name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/lib", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/lib64){
                                MasterControl:prepend_path(t){
                                  name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/lib64", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/share/man){
                                MasterControl:prepend_path(t){
                                  name:"MANPATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/share/man", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/bin){
                                MasterControl:prepend_path(t){
                                  name:"PATH", value: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/bin", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              setenv(EBROOTGCCCORE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0){
                                MasterControl:setenv("EBROOTGCCCORE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0", "nil"){
                                } MasterControl:setenv
                              } setenv
                              setenv(EBVERSIONGCCCORE, 5.4.0){
                                MasterControl:setenv("EBVERSIONGCCCORE", "5.4.0", "nil"){
                                } MasterControl:setenv
                              } setenv
                              setenv(EBDEVELGCCCORE, /cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/easybuild/Core-gcccore-.5.4.0-easybuild-devel){
                                MasterControl:setenv("EBDEVELGCCCORE", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/easybuild/Core-gcccore-.5.4.0-easybuild-devel", "nil"){
                                } MasterControl:setenv
                              } setenv
                            } loadModuleFile
                            Marking gcccore/.5.4.0 as active and loaded
                            safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): true
                          } Master:load
                          MasterControl:registerAdminMsg(mA){
                          } MasterControl:registerAdminMsg
                        } MasterControl:load
                        status: true, fn_old: ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua, fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): icc/.2016.4.258
                        adding sn: icc to mA
                        module sn: icc is inactive
                        Master:reloadAll(2): Loading non-active module: "icc/.2016.4.258"
                        MasterControl:load(mA={icc/.2016.4.258}){
                          Master:singleton(safe: nil){
                            s_master: table: 0x115ce70, safe: true
                          } Master:singleton
                          Master:load(mA={icc/.2016.4.258}){
                            Master:load i: 1, userName: icc/.2016.4.258
                            Mname:sn(){
                            } Mname:sn
  (59)(2)Loading: icc/.2016.4.258 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua, using Find-Best)
                            Master:load i: 1 sn: icc fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua
                            Master:loading: "icc/.2016.4.258" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua"
                            loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua){
                              ModuleFile{
                                help([==[
                                Description
                                ===========
                                C and C++ compiler from Intel
                                More information
                                ================
                                 - Homepage: http://software.intel.com/en-us/intel-compilers/
                                ]==])
                                whatis([==[Description: C and C++ compiler from Intel]==])
                                whatis([==[Homepage: http://software.intel.com/en-us/intel-compilers/]==])
                                local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258"
                                conflict("icc")
                                if not isloaded("gcccore/.5.4.0") or mode() == "unload" then
                                    load("gcccore/.5.4.0")
                                end
                                prepend_path("LIBRARY_PATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64"))
                                prepend_path("MANPATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/man/common"))
                                prepend_path("PATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/bin/intel64"))
                                setenv("EBROOTICC", root)
                                setenv("EBVERSIONICC", "2016.4.258")
                                setenv("EBDEVELICC", pathJoin(root, "easybuild/Core-icc-.2016.4.258-easybuild-devel"))
                                prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                                -- Built with EasyBuild version 3.5.0-r9c88db64dba51c4ffd22799c06090d57aaf17e38
                              } ModuleFile
                              help(...){
                              } help
                              whatis(Description: C and C++ compiler from Intel){
                              } whatis
                              whatis(Homepage: http://software.intel.com/en-us/intel-compilers/){
                              } whatis
                              conflict(icc){
                                MasterControl:conflict(mA){
                                  Mname:sn(){
                                  } Mname:sn
                                } MasterControl:conflict
                              }
                              isloaded(gcccore/.5.4.0){
                              } isloaded
                              MName:isloaded(){
                                Mname:sn(){
                                } Mname:sn
                              } MName:isloaded
                              prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64){
                                MasterControl:prepend_path(t){
                                  name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/man/common){
                                MasterControl:prepend_path(t){
                                  name:"MANPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/man/common", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64){
                                MasterControl:prepend_path(t){
                                  name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              setenv(EBROOTICC, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258){
                                MasterControl:setenv("EBROOTICC", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258", "nil"){
                                } MasterControl:setenv
                              } setenv
                              setenv(EBVERSIONICC, 2016.4.258){
                                MasterControl:setenv("EBVERSIONICC", "2016.4.258", "nil"){
                                } MasterControl:setenv
                              } setenv
                              setenv(EBDEVELICC, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/easybuild/Core-icc-.2016.4.258-easybuild-devel){
                                MasterControl:setenv("EBDEVELICC", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/easybuild/Core-icc-.2016.4.258-easybuild-devel", "nil"){
                                } MasterControl:setenv
                              } setenv
                              prepend_path(NLSPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/idb/intel64/locale/%l_%t/%N){
                                MasterControl:prepend_path(t){
                                  name:"NLSPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                            } loadModuleFile
                            Marking icc/.2016.4.258 as active and loaded
                            safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): true
                          } Master:load
                          MasterControl:registerAdminMsg(mA){
                          } MasterControl:registerAdminMsg
                        } MasterControl:load
                        status: true, fn_old: ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua, fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): ifort/.2016.4.258
                        adding sn: ifort to mA
                        module sn: ifort is inactive
                        Master:reloadAll(2): Loading non-active module: "ifort/.2016.4.258"
                        MasterControl:load(mA={ifort/.2016.4.258}){
                          Master:singleton(safe: nil){
                            s_master: table: 0x115ce70, safe: true
                          } Master:singleton
                          Master:load(mA={ifort/.2016.4.258}){
                            Master:load i: 1, userName: ifort/.2016.4.258
                            Mname:sn(){
                            } Mname:sn
  (60)(2)Loading: ifort/.2016.4.258 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua, using Find-Best)
                            Master:load i: 1 sn: ifort fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua
                            Master:loading: "ifort/.2016.4.258" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua"
                            loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua){
                              ModuleFile{
                                help([==[
                                Description
                                ===========
                                Fortran compiler from Intel
                                More information
                                ================
                                 - Homepage: http://software.intel.com/en-us/intel-compilers/
                                ]==])
                                whatis([==[Description: Fortran compiler from Intel]==])
                                whatis([==[Homepage: http://software.intel.com/en-us/intel-compilers/]==])
                                local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258"
                                conflict("ifort")
                                if not isloaded("gcccore/.5.4.0") or mode() == "unload" then
                                    load("gcccore/.5.4.0")
                                end
                                prepend_path("LIBRARY_PATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64"))
                                prepend_path("MANPATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/man/common"))
                                prepend_path("PATH", pathJoin(root, "compilers_and_libraries_2016.4.258/linux/bin/intel64"))
                                setenv("EBROOTIFORT", root)
                                setenv("EBVERSIONIFORT", "2016.4.258")
                                setenv("EBDEVELIFORT", pathJoin(root, "easybuild/Core-ifort-.2016.4.258-easybuild-devel"))
                                prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                                -- Built with EasyBuild version 3.5.0-r9c88db64dba51c4ffd22799c06090d57aaf17e38
                              } ModuleFile
                              help(...){
                              } help
                              whatis(Description: Fortran compiler from Intel){
                              } whatis
                              whatis(Homepage: http://software.intel.com/en-us/intel-compilers/){
                              } whatis
                              conflict(ifort){
                                MasterControl:conflict(mA){
                                  Mname:sn(){
                                  } Mname:sn
                                } MasterControl:conflict
                              }
                              isloaded(gcccore/.5.4.0){
                              } isloaded
                              MName:isloaded(){
                                Mname:sn(){
                                } Mname:sn
                              } MName:isloaded
                              prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64){
                                MasterControl:prepend_path(t){
                                  name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/man/common){
                                MasterControl:prepend_path(t){
                                  name:"MANPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/man/common", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64){
                                MasterControl:prepend_path(t){
                                  name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              setenv(EBROOTIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258){
                                MasterControl:setenv("EBROOTIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258", "nil"){
                                } MasterControl:setenv
                              } setenv
                              setenv(EBVERSIONIFORT, 2016.4.258){
                                MasterControl:setenv("EBVERSIONIFORT", "2016.4.258", "nil"){
                                } MasterControl:setenv
                              } setenv
                              setenv(EBDEVELIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/easybuild/Core-ifort-.2016.4.258-easybuild-devel){
                                MasterControl:setenv("EBDEVELIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/easybuild/Core-ifort-.2016.4.258-easybuild-devel", "nil"){
                                } MasterControl:setenv
                              } setenv
                              prepend_path(NLSPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/idb/intel64/locale/%l_%t/%N){
                                MasterControl:prepend_path(t){
                                  name:"NLSPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                            } loadModuleFile
                            Marking ifort/.2016.4.258 as active and loaded
                            safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): true
                          } Master:load
                          MasterControl:registerAdminMsg(mA){
                          } MasterControl:registerAdminMsg
                        } MasterControl:load
                        status: true, fn_old: ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua, fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): imkl/11.3.4.258
                        adding sn: imkl to mA
                        module sn: imkl is inactive
                        Master:reloadAll(2): Loading non-active module: "imkl/11.3.4.258"
                        MasterControl:load(mA={imkl/11.3.4.258}){
                          Master:singleton(safe: nil){
                            s_master: table: 0x115ce70, safe: true
                          } Master:singleton
                          Master:load(mA={imkl/11.3.4.258}){
                            Master:load i: 1, userName: imkl/11.3.4.258
                            Mname:sn(){
                            } Mname:sn
  (61)(2)Loading: imkl/11.3.4.258 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua, using Find-Best)
                            Master:load i: 1 sn: imkl fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua
                            Master:loading: "imkl/11.3.4.258" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua"
                            loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua){
                              ModuleFile{
                                help([==[
                                Description
                                ===========
                                Intel Math Kernel Library is a library of highly optimized,
                                 extensively threaded math routines for science, engineering, and financial
                                 applications that require maximum performance. Core math functions include
                                 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.
                                More information
                                ================
                                 - Homepage: http://software.intel.com/en-us/intel-mkl/
                                ]==])
                                whatis([==[Description: Intel Math Kernel Library is a library of highly optimized,
                                 extensively threaded math routines for science, engineering, and financial
                                 applications that require maximum performance. Core math functions include
                                 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.]==])
                                whatis([==[Homepage: http://software.intel.com/en-us/intel-mkl/]==])
                                local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258"
                                conflict("imkl")
                                prepend_path("CPATH", pathJoin(root, "mkl/include"))
                                prepend_path("CPATH", pathJoin(root, "mkl/include/fftw"))
                                prepend_path("LIBRARY_PATH", pathJoin(root, "lib/intel64"))
                                prepend_path("LIBRARY_PATH", pathJoin(root, "mkl/lib/intel64"))
                                prepend_path("MIC_LD_LIBRARY_PATH", pathJoin(root, "lib/intel64_lin_mic"))
                                prepend_path("MIC_LD_LIBRARY_PATH", pathJoin(root, "mkl/lib/mic"))
                                prepend_path("PATH", pathJoin(root, "bin"))
                                prepend_path("PATH", pathJoin(root, "mkl/bin"))
                                setenv("EBROOTIMKL", root)
                                setenv("EBVERSIONIMKL", "11.3.4.258")
                                setenv("EBDEVELIMKL", pathJoin(root, "easybuild/Core-imkl-11.3.4.258-easybuild-devel"))
                                setenv("MKL_ENABLE_INSTRUCTIONS", "AVX512")
                                setenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/")
                                prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                                setenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl")
                                -- Built with EasyBuild version 3.6.2-r7ac096157987d9f8fad6490e41038c31790fa6ee
                              } ModuleFile
                              help(...){
                              } help
                              whatis(Description: Intel Math Kernel Library is a library of highly optimized,
 extensively threaded math routines for science, engineering, and financial
 applications that require maximum performance. Core math functions include
 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.){
                              } whatis
                              whatis(Homepage: http://software.intel.com/en-us/intel-mkl/){
                              } whatis
                              conflict(imkl){
                                MasterControl:conflict(mA){
                                  Mname:sn(){
                                  } Mname:sn
                                } MasterControl:conflict
                              }
                              prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include){
                                MasterControl:prepend_path(t){
                                  name:"CPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include/fftw){
                                MasterControl:prepend_path(t){
                                  name:"CPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include/fftw", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64){
                                MasterControl:prepend_path(t){
                                  name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/intel64){
                                MasterControl:prepend_path(t){
                                  name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/intel64", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              prepend_path(MIC_LD_LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64_lin_mic){
                                MasterControl:prepend_path(t){
                                  name:"MIC_LD_LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64_lin_mic", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              prepend_path(MIC_LD_LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/mic){
                                MasterControl:prepend_path(t){
                                  name:"MIC_LD_LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/mic", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/bin){
                                MasterControl:prepend_path(t){
                                  name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/bin", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/bin){
                                MasterControl:prepend_path(t){
                                  name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/bin", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              setenv(EBROOTIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258){
                                MasterControl:setenv("EBROOTIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258", "nil"){
                                } MasterControl:setenv
                              } setenv
                              setenv(EBVERSIONIMKL, 11.3.4.258){
                                MasterControl:setenv("EBVERSIONIMKL", "11.3.4.258", "nil"){
                                } MasterControl:setenv
                              } setenv
                              setenv(EBDEVELIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/easybuild/Core-imkl-11.3.4.258-easybuild-devel){
                                MasterControl:setenv("EBDEVELIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/easybuild/Core-imkl-11.3.4.258-easybuild-devel", "nil"){
                                } MasterControl:setenv
                              } setenv
                              setenv(MKL_ENABLE_INSTRUCTIONS, AVX512){
                                MasterControl:setenv("MKL_ENABLE_INSTRUCTIONS", "AVX512", "nil"){
                                } MasterControl:setenv
                              } setenv
                              setenv(MKL_EXAMPLES, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/){
                                MasterControl:setenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/", "nil"){
                                } MasterControl:setenv
                              } setenv
                              prepend_path(NLSPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/idb/intel64/locale/%l_%t/%N){
                                MasterControl:prepend_path(t){
                                  name:"NLSPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              setenv(MKLROOT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl){
                                MasterControl:setenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl", "nil"){
                                } MasterControl:setenv
                              } setenv
                            } loadModuleFile
                            Marking imkl/11.3.4.258 as active and loaded
                            safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): true
                          } Master:load
                          MasterControl:registerAdminMsg(mA){
                          } MasterControl:registerAdminMsg
                        } MasterControl:load
                        status: true, fn_old: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua, fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): intel/2016.4
                        adding sn: intel to mA
                        module sn: intel is inactive
                        Master:reloadAll(2): Loading non-active module: "intel/2016.4"
                        MasterControl:load(mA={intel/2016.4}){
                          Master:singleton(safe: nil){
                            s_master: table: 0x115ce70, safe: true
                          } Master:singleton
                          Master:load(mA={intel/2016.4}){
                            Master:load i: 1, userName: intel/2016.4
                            Mname:sn(){
                            } Mname:sn
  (62)(2)Loading: intel/2016.4 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua, using Find-Best)
                            Master:load i: 1 sn: intel fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua
                            Master:loading: "intel/2016.4" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua"
                            loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua){
                              ModuleFile{
                                help([==[
                                Description
                                ===========
                                Intel Cluster Toolkit Compiler Edition provides Intel C,C++ and fortran compilers, Intel MPI and Intel MKL
                                More information
                                ================
                                 - Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/
                                ]==])
                                whatis([==[Description: Intel Cluster Toolkit Compiler Edition provides Intel C,C++ and fortran compilers, Intel MPI and Intel MKL]==])
                                whatis([==[Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/]==])
                                local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4"
                                conflict("intel")
                                if not isloaded("icc/.2016.4.258") or mode() == "unload" then
                                    load("icc/.2016.4.258")
                                end
                                if not isloaded("ifort/.2016.4.258") or mode() == "unload" then
                                    load("ifort/.2016.4.258")
                                end
                                setenv("EBROOTICCIFORT", root)
                                setenv("EBVERSIONICCIFORT", "2016.4")
                                setenv("EBDEVELICCIFORT", pathJoin(root, "easybuild/Core-intel-2016.4-easybuild-devel"))
                                if isloaded("imkl") then
                                    always_load("imkl/11.3.4.258")
                                end
                                prepend_path("INTEL_LICENSE_FILE", pathJoin("/cvmfs/soft.computecanada.ca/config/licenses/intel", os.getenv("CC_CLUSTER") .. ".lic"))
                                local mroot = os.getenv("MODULEPATH_ROOT")
                                prepend_path("MODULEPATH", pathJoin(pathJoin(mroot, os.getenv("RSNT_ARCH"), "Compiler/intel2016.4")))
                                family("compiler")
                                -- Built with EasyBuild version 3.5.0-r9c88db64dba51c4ffd22799c06090d57aaf17e38
                              } ModuleFile
                              help(...){
                              } help
                              whatis(Description: Intel Cluster Toolkit Compiler Edition provides Intel C,C++ and fortran compilers, Intel MPI and Intel MKL){
                              } whatis
                              whatis(Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/){
                              } whatis
                              conflict(intel){
                                MasterControl:conflict(mA){
                                  Mname:sn(){
                                  } Mname:sn
                                } MasterControl:conflict
                              }
                              isloaded(icc/.2016.4.258){
                              } isloaded
                              MName:isloaded(){
                                Mname:sn(){
                                } Mname:sn
                              } MName:isloaded
                              isloaded(ifort/.2016.4.258){
                              } isloaded
                              MName:isloaded(){
                                Mname:sn(){
                                } Mname:sn
                              } MName:isloaded
                              setenv(EBROOTICCIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4){
                                MasterControl:setenv("EBROOTICCIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4", "nil"){
                                } MasterControl:setenv
                              } setenv
                              setenv(EBVERSIONICCIFORT, 2016.4){
                                MasterControl:setenv("EBVERSIONICCIFORT", "2016.4", "nil"){
                                } MasterControl:setenv
                              } setenv
                              setenv(EBDEVELICCIFORT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4/easybuild/Core-intel-2016.4-easybuild-devel){
                                MasterControl:setenv("EBDEVELICCIFORT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4/easybuild/Core-intel-2016.4-easybuild-devel", "nil"){
                                } MasterControl:setenv
                              } setenv
                              isloaded(imkl){
                              } isloaded
                              MName:isloaded(){
                                Mname:sn(){
                                } Mname:sn
                              } MName:isloaded
                              always_load(imkl/11.3.4.258){
                                cmd: always_load argA.n: 1
                                MasterControl:load_usr(mA={imkl/11.3.4.258}){
                                  registerUserLoads(mA){
                                    userName: imkl/11.3.4.258
                                  } registerUserLoads
                                  MasterControl:load(mA={imkl/11.3.4.258}){
                                    Master:singleton(safe: nil){
                                      s_master: table: 0x115ce70, safe: true
                                    } Master:singleton
                                    Master:load(mA={imkl/11.3.4.258}){
                                      Master:load i: 1, userName: imkl/11.3.4.258
                                      Mname:sn(){
                                      } Mname:sn
    (63)(2)Loading: imkl/11.3.4.258 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua, using Find-Best)
                                      Master:load i: 1 sn: imkl fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua
                                      mnV: 11.3.4.258, mtV: 11.3.4.258
                                      Setting mcp to MC_Load
                                      Master:singleton(safe: nil){
                                        s_master: table: 0x115ce70, safe: true
                                      } Master:singleton
                                      MasterControl:unload(mA={imkl}){
                                        unRegisterUserLoads(mA){
                                          userName: imkl
                                        } unRegisterUserLoads
                                        Master:unload(mA={imkl}){
                                          MasterControl:_setMode("unload"){
                                          } MasterControl:_setMode
                                          Setting mcp to MC_Unload
                                          Setting mcp to MC_Unload
                                          Mname:fullName(){
                                          } Mname:fullName
    (64)(2)Unloading: imkl (status: active) (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua)
                                          Trying to unload: imkl sn: imkl
                                          Master:unload: "imkl" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua"
                                          loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua){
                                            ModuleFile{
                                              help([==[
                                              Description
                                              ===========
                                              Intel Math Kernel Library is a library of highly optimized,
                                               extensively threaded math routines for science, engineering, and financial
                                               applications that require maximum performance. Core math functions include
                                               BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.
                                              More information
                                              ================
                                               - Homepage: http://software.intel.com/en-us/intel-mkl/
                                              ]==])
                                              whatis([==[Description: Intel Math Kernel Library is a library of highly optimized,
                                               extensively threaded math routines for science, engineering, and financial
                                               applications that require maximum performance. Core math functions include
                                               BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.]==])
                                              whatis([==[Homepage: http://software.intel.com/en-us/intel-mkl/]==])
                                              local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258"
                                              conflict("imkl")
                                              prepend_path("CPATH", pathJoin(root, "mkl/include"))
                                              prepend_path("CPATH", pathJoin(root, "mkl/include/fftw"))
                                              prepend_path("LIBRARY_PATH", pathJoin(root, "lib/intel64"))
                                              prepend_path("LIBRARY_PATH", pathJoin(root, "mkl/lib/intel64"))
                                              prepend_path("MIC_LD_LIBRARY_PATH", pathJoin(root, "lib/intel64_lin_mic"))
                                              prepend_path("MIC_LD_LIBRARY_PATH", pathJoin(root, "mkl/lib/mic"))
                                              prepend_path("PATH", pathJoin(root, "bin"))
                                              prepend_path("PATH", pathJoin(root, "mkl/bin"))
                                              setenv("EBROOTIMKL", root)
                                              setenv("EBVERSIONIMKL", "11.3.4.258")
                                              setenv("EBDEVELIMKL", pathJoin(root, "easybuild/Core-imkl-11.3.4.258-easybuild-devel"))
                                              setenv("MKL_ENABLE_INSTRUCTIONS", "AVX512")
                                              setenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/")
                                              prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                                              setenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl")
                                              -- Built with EasyBuild version 3.6.2-r7ac096157987d9f8fad6490e41038c31790fa6ee
                                            } ModuleFile
                                            help(...){
                                            } help
                                            whatis(Description: Intel Math Kernel Library is a library of highly optimized,
 extensively threaded math routines for science, engineering, and financial
 applications that require maximum performance. Core math functions include
 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.){
                                            } whatis
                                            whatis(Homepage: http://software.intel.com/en-us/intel-mkl/){
                                            } whatis
                                            conflict(imkl){
                                            }
                                            prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include){
                                              MasterControl:remove_path{"CPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include/fftw){
                                              MasterControl:remove_path{"CPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include/fftw", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64){
                                              MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/intel64){
                                              MasterControl:remove_path{"LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/intel64", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            prepend_path(MIC_LD_LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64_lin_mic){
                                              MasterControl:remove_path{"MIC_LD_LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64_lin_mic", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            prepend_path(MIC_LD_LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/mic){
                                              MasterControl:remove_path{"MIC_LD_LIBRARY_PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/mic", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/bin){
                                              MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/bin){
                                              MasterControl:remove_path{"PATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/bin", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            setenv(EBROOTIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258){
                                              MasterControl:unsetenv("EBROOTIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258"){
                                              } MasterControl:unsetenv
                                            } setenv
                                            setenv(EBVERSIONIMKL, 11.3.4.258){
                                              MasterControl:unsetenv("EBVERSIONIMKL", "11.3.4.258"){
                                              } MasterControl:unsetenv
                                            } setenv
                                            setenv(EBDEVELIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/easybuild/Core-imkl-11.3.4.258-easybuild-devel){
                                              MasterControl:unsetenv("EBDEVELIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/easybuild/Core-imkl-11.3.4.258-easybuild-devel"){
                                              } MasterControl:unsetenv
                                            } setenv
                                            setenv(MKL_ENABLE_INSTRUCTIONS, AVX512){
                                              MasterControl:unsetenv("MKL_ENABLE_INSTRUCTIONS", "AVX512"){
                                              } MasterControl:unsetenv
                                            } setenv
                                            setenv(MKL_EXAMPLES, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/){
                                              MasterControl:unsetenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/"){
                                              } MasterControl:unsetenv
                                            } setenv
                                            prepend_path(NLSPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/idb/intel64/locale/%l_%t/%N){
                                              MasterControl:remove_path{"NLSPATH", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0, where=first, force=nil}{
                                              } MasterControl:remove_path
                                            } prepend_path
                                            setenv(MKLROOT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl){
                                              MasterControl:unsetenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl"){
                                              } MasterControl:unsetenv
                                            } setenv
                                          } loadModuleFile
                                          safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                          Setting mcp to MC_Load
                                        } Master:unload
                                      } MasterControl:unload
                                      MasterControl:load_usr(mA={imkl/11.3.4.258}){
                                        registerUserLoads(mA){
                                          userName: imkl/11.3.4.258
                                        } registerUserLoads
                                        MasterControl:load(mA={imkl/11.3.4.258}){
                                          Master:singleton(safe: nil){
                                            s_master: table: 0x115ce70, safe: true
                                          } Master:singleton
                                          Master:load(mA={imkl/11.3.4.258}){
                                            Master:load i: 1, userName: imkl/11.3.4.258
                                            Mname:sn(){
                                            } Mname:sn
    (65)(2)Loading: imkl/11.3.4.258 (fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua, using Find-Best)
                                            Master:load i: 1 sn: imkl fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua
                                            Master:loading: "imkl/11.3.4.258" from file: "ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua"
                                            loadModuleFile(ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua){
                                              ModuleFile{
                                                help([==[
                                                Description
                                                ===========
                                                Intel Math Kernel Library is a library of highly optimized,
                                                 extensively threaded math routines for science, engineering, and financial
                                                 applications that require maximum performance. Core math functions include
                                                 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.
                                                More information
                                                ================
                                                 - Homepage: http://software.intel.com/en-us/intel-mkl/
                                                ]==])
                                                whatis([==[Description: Intel Math Kernel Library is a library of highly optimized,
                                                 extensively threaded math routines for science, engineering, and financial
                                                 applications that require maximum performance. Core math functions include
                                                 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.]==])
                                                whatis([==[Homepage: http://software.intel.com/en-us/intel-mkl/]==])
                                                local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258"
                                                conflict("imkl")
                                                prepend_path("CPATH", pathJoin(root, "mkl/include"))
                                                prepend_path("CPATH", pathJoin(root, "mkl/include/fftw"))
                                                prepend_path("LIBRARY_PATH", pathJoin(root, "lib/intel64"))
                                                prepend_path("LIBRARY_PATH", pathJoin(root, "mkl/lib/intel64"))
                                                prepend_path("MIC_LD_LIBRARY_PATH", pathJoin(root, "lib/intel64_lin_mic"))
                                                prepend_path("MIC_LD_LIBRARY_PATH", pathJoin(root, "mkl/lib/mic"))
                                                prepend_path("PATH", pathJoin(root, "bin"))
                                                prepend_path("PATH", pathJoin(root, "mkl/bin"))
                                                setenv("EBROOTIMKL", root)
                                                setenv("EBVERSIONIMKL", "11.3.4.258")
                                                setenv("EBDEVELIMKL", pathJoin(root, "easybuild/Core-imkl-11.3.4.258-easybuild-devel"))
                                                setenv("MKL_ENABLE_INSTRUCTIONS", "AVX512")
                                                setenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/")
                                                prepend_path("NLSPATH", pathJoin(root, "idb/intel64/locale/%l_%t/%N"))
                                                setenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl")
                                                -- Built with EasyBuild version 3.6.2-r7ac096157987d9f8fad6490e41038c31790fa6ee
                                              } ModuleFile
                                              help(...){
                                              } help
                                              whatis(Description: Intel Math Kernel Library is a library of highly optimized,
 extensively threaded math routines for science, engineering, and financial
 applications that require maximum performance. Core math functions include
 BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more.){
                                              } whatis
                                              whatis(Homepage: http://software.intel.com/en-us/intel-mkl/){
                                              } whatis
                                              conflict(imkl){
                                                MasterControl:conflict(mA){
                                                  Mname:sn(){
                                                  } Mname:sn
                                                } MasterControl:conflict
                                              }
                                              prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include){
                                                MasterControl:prepend_path(t){
                                                  name:"CPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include/fftw){
                                                MasterControl:prepend_path(t){
                                                  name:"CPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include/fftw", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64){
                                                MasterControl:prepend_path(t){
                                                  name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/intel64){
                                                MasterControl:prepend_path(t){
                                                  name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/intel64", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(MIC_LD_LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64_lin_mic){
                                                MasterControl:prepend_path(t){
                                                  name:"MIC_LD_LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64_lin_mic", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(MIC_LD_LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/mic){
                                                MasterControl:prepend_path(t){
                                                  name:"MIC_LD_LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/mic", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/bin){
                                                MasterControl:prepend_path(t){
                                                  name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/bin", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/bin){
                                                MasterControl:prepend_path(t){
                                                  name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/bin", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              setenv(EBROOTIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258){
                                                MasterControl:setenv("EBROOTIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(EBVERSIONIMKL, 11.3.4.258){
                                                MasterControl:setenv("EBVERSIONIMKL", "11.3.4.258", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(EBDEVELIMKL, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/easybuild/Core-imkl-11.3.4.258-easybuild-devel){
                                                MasterControl:setenv("EBDEVELIMKL", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/easybuild/Core-imkl-11.3.4.258-easybuild-devel", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(MKL_ENABLE_INSTRUCTIONS, AVX512){
                                                MasterControl:setenv("MKL_ENABLE_INSTRUCTIONS", "AVX512", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              setenv(MKL_EXAMPLES, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/){
                                                MasterControl:setenv("MKL_EXAMPLES", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                              prepend_path(NLSPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/idb/intel64/locale/%l_%t/%N){
                                                MasterControl:prepend_path(t){
                                                  name:"NLSPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/idb/intel64/locale/%l_%t/%N", delim=":", nodups="true", priority=0
                                                } MasterControl:prepend_path
                                              } prepend_path
                                              setenv(MKLROOT, /cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl){
                                                MasterControl:setenv("MKLROOT", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl", "nil"){
                                                } MasterControl:setenv
                                              } setenv
                                            } loadModuleFile
                                            Marking imkl/11.3.4.258 as active and loaded
                                            safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                          } Master:load
                                          MasterControl:registerAdminMsg(mA){
                                          } MasterControl:registerAdminMsg
                                        } MasterControl:load
                                      } MasterControl:load_usr
                                      Setting mcp to MC_Load
                                      safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): false
                                    } Master:load
                                    MasterControl:registerAdminMsg(mA){
                                    } MasterControl:registerAdminMsg
                                  } MasterControl:load
                                } MasterControl:load_usr
                              } always_load
                              prepend_path(INTEL_LICENSE_FILE, /cvmfs/soft.computecanada.ca/config/licenses/intel/computecanada.lic){
                                MasterControl:prepend_path(t){
                                  name:"INTEL_LICENSE_FILE", value: "/cvmfs/soft.computecanada.ca/config/licenses/intel/computecanada.lic", delim=":", nodups="true", priority=0
                                } MasterControl:prepend_path
                              } prepend_path
                              prepend_path(MODULEPATH, ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4){
                                MasterControl:prepend_path(t){
                                  name:"MODULEPATH", value: "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4", delim=":", nodups="true", priority=0
    Prepending: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4 to MODULEPATH
                                  chkMP("MODULEPATH", value: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4:ProjectDIR/rt/cc/cc_mf/Core-avx512:ProjectDIR/rt/cc/cc_mf/modules-avx512:ProjectDIR/rt/cc/cc_mf/modules, adding:true){
                                    MT:set_MPATH_change_flag(self)
                                    ModuleA:update(spider_cache=false){
                                      building mpath: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4
                                      ModuleA:__new(){
                                        calling DirTree:new()
                                        ModuleA build(){
                                          #dirA: 1
                                          mpath: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4
                                        } ModuleA build
                                        ["moduleA:"]  = {
                                          {
                                            T = {
                                              openmpi = {
                                                defaultT = {},
                                                dirT = {},
                                                fileT = {
                                                  ["openmpi/2.1.1"]  = {
                                                    ["canonical"] = "2.1.1",
                                                    ["fn"] = "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua",
                                                    ["luaExt"] = 6,
                                                    ["mpath"] = "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4",
                                                    ["pV"] = "000000002.000000001.000000001.*zfinal",
                                                    ["wV"] = "000000002.000000001.000000001.*zfinal",
                                                  },
                                                },
                                              },
                                            },
                                            ["mpath"] = "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4",
                                          },
                                        }
                                        isNVV: false
                                      } ModuleA:__new
                                      Reusing mpath: ProjectDIR/rt/cc/cc_mf/Core-avx512
                                      Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules-avx512
                                      Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules
                                    } ModuleA:update
                                  } chkMP
                                } MasterControl:prepend_path
                              } prepend_path
                              family(compiler){
                                MasterControl:family(compiler){
                                  Mname:sn(){
                                  } Mname:sn
                                  MasterControl:setenv("LMOD_FAMILY_COMPILER", "intel", "nil"){
                                  } MasterControl:setenv
                                  MasterControl:setenv("LMOD_FAMILY_COMPILER_VERSION", "2016.4", "nil"){
                                  } MasterControl:setenv
                                  MasterControl:setenv("LMOD_FAMILY_COMPILER", "intel", "nil"){
                                  } MasterControl:setenv
                                  MasterControl:setenv("LMOD_FAMILY_COMPILER_VERSION", "2016.4", "nil"){
                                  } MasterControl:setenv
                                } MasterControl:family
                              } family
                            } loadModuleFile
                            Marking intel/2016.4 as active and loaded
                            safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): true
                            Master:load calling reloadAll()
                            Master:reloadAll(count: 3){
                              Setting mcp to MC_Load
  reloadAll(3)(arch/avx512, StdEnv, nixpkgs/16.09, gcccore/.5.4.0, icc/.2016.4.258, ifort/.2016.4.258, imkl/11.3.4.258, intel/2016.4, openmpi/2.1.1)
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): arch/avx512
                              adding sn: arch to mA
                              module sn: arch is active
                              userName(2):  arch/avx512
                              Mname:fn(){
                                LocationT:new(moduleA){
                                  LocationT build(moduleA){
                                  } LocationT build
                                } LocationT:new
                              } Mname:fn
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): StdEnv
                              adding sn: StdEnv to mA
                              module sn: StdEnv is active
                              userName(2):  StdEnv
                              Mname:fn(){
                              } Mname:fn
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): nixpkgs/16.09
                              adding sn: nixpkgs to mA
                              module sn: nixpkgs is active
                              userName(2):  nixpkgs/16.09
                              Mname:fn(){
                              } Mname:fn
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): gcccore/.5.4.0
                              adding sn: gcccore to mA
                              module sn: gcccore is active
                              userName(2):  gcccore/.5.4.0
                              Mname:fn(){
                              } Mname:fn
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): icc/.2016.4.258
                              adding sn: icc to mA
                              module sn: icc is active
                              userName(2):  icc/.2016.4.258
                              Mname:fn(){
                              } Mname:fn
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): ifort/.2016.4.258
                              adding sn: ifort to mA
                              module sn: ifort is active
                              userName(2):  ifort/.2016.4.258
                              Mname:fn(){
                              } Mname:fn
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): imkl/11.3.4.258
                              adding sn: imkl to mA
                              module sn: imkl is active
                              userName(2):  imkl/11.3.4.258
                              Mname:fn(){
                              } Mname:fn
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): intel/2016.4
                              adding sn: intel to mA
                              module sn: intel is active
                              userName(2):  intel/2016.4
                              Mname:fn(){
                              } Mname:fn
                              Mname:sn(){
                              } Mname:sn
                              a[i].userName(1): openmpi/2.1.1
                              adding sn: openmpi to mA
                              module sn: openmpi is inactive
                              Master:reloadAll(3): Loading non-active module: "openmpi/2.1.1"
                              MasterControl:load(mA={openmpi/2.1.1}){
                                Master:singleton(safe: nil){
                                  s_master: table: 0x115ce70, safe: true
                                } Master:singleton
                                Master:load(mA={openmpi/2.1.1}){
                                  Master:load i: 1, userName: openmpi/2.1.1
                                  Mname:sn(){
                                  } Mname:sn
  (66)(3)Loading: openmpi/2.1.1 (fn: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua, using Find-Best)
                                  Master:load i: 1 sn: openmpi fn: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua
                                  Master:loading: "openmpi/2.1.1" from file: "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua"
                                  loadModuleFile(ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua){
                                    ModuleFile{
                                      help([==[
                                      Description
                                      ===========
                                      The Open MPI Project is an open source MPI-2 implementation.
                                      More information
                                      ================
                                       - Homepage: http://www.open-mpi.org/
                                      ]==])
                                      whatis([==[Description: The Open MPI Project is an open source MPI-2 implementation.]==])
                                      whatis([==[Homepage: http://www.open-mpi.org/]==])
                                      local root = "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1"
                                      conflict("openmpi")
                                      local mroot = os.getenv("MODULEPATH_ROOT")
                                      prepend_path("MODULEPATH", pathJoin(mroot,"avx512/MPI/intel2016.4/openmpi2.1"))
                                      prepend_path("CPATH", pathJoin(root, "include"))
                                      prepend_path("LIBRARY_PATH", pathJoin(root, "lib"))
                                      prepend_path("MANPATH", pathJoin(root, "share/man"))
                                      prepend_path("PATH", pathJoin(root, "bin"))
                                      prepend_path("PKG_CONFIG_PATH", pathJoin(root, "lib/pkgconfig"))
                                      setenv("EBROOTOPENMPI", root)
                                      setenv("EBVERSIONOPENMPI", "2.1.1")
                                      setenv("EBDEVELOPENMPI", pathJoin(root, "easybuild/avx512-Compiler-intel2016.4-openmpi-2.1.1-easybuild-devel"))
                                      if os.getenv("RSNT_INTERCONNECT") == "omnipath" then
                                              setenv("OMPI_MCA_mtl", "^mxm")
                                              setenv("OMPI_MCA_pml", "^yalla")
                                      end
                                      family("mpi")
                                      -- Built with EasyBuild version 3.6.0
                                    } ModuleFile
                                    help(...){
                                    } help
                                    whatis(Description: The Open MPI Project is an open source MPI-2 implementation.){
                                    } whatis
                                    whatis(Homepage: http://www.open-mpi.org/){
                                    } whatis
                                    conflict(openmpi){
                                      MasterControl:conflict(mA){
                                        Mname:sn(){
                                        } Mname:sn
                                      } MasterControl:conflict
                                    }
                                    prepend_path(MODULEPATH, ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1){
                                      MasterControl:prepend_path(t){
                                        name:"MODULEPATH", value: "ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1", delim=":", nodups="true", priority=0
    Prepending: ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1 to MODULEPATH
                                        chkMP("MODULEPATH", value: ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1:ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4:ProjectDIR/rt/cc/cc_mf/Core-avx512:ProjectDIR/rt/cc/cc_mf/modules-avx512:ProjectDIR/rt/cc/cc_mf/modules, adding:true){
                                          MT:set_MPATH_change_flag(self)
                                          ModuleA:update(spider_cache=false){
                                            Reusing mpath: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4
                                            Reusing mpath: ProjectDIR/rt/cc/cc_mf/Core-avx512
                                            Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules-avx512
                                            Reusing mpath: ProjectDIR/rt/cc/cc_mf/modules
                                          } ModuleA:update
                                        } chkMP
                                      } MasterControl:prepend_path
                                    } prepend_path
                                    prepend_path(CPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/include){
                                      MasterControl:prepend_path(t){
                                        name:"CPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/include", delim=":", nodups="true", priority=0
                                      } MasterControl:prepend_path
                                    } prepend_path
                                    prepend_path(LIBRARY_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/lib){
                                      MasterControl:prepend_path(t){
                                        name:"LIBRARY_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/lib", delim=":", nodups="true", priority=0
                                      } MasterControl:prepend_path
                                    } prepend_path
                                    prepend_path(MANPATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/share/man){
                                      MasterControl:prepend_path(t){
                                        name:"MANPATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/share/man", delim=":", nodups="true", priority=0
                                      } MasterControl:prepend_path
                                    } prepend_path
                                    prepend_path(PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/bin){
                                      MasterControl:prepend_path(t){
                                        name:"PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/bin", delim=":", nodups="true", priority=0
                                      } MasterControl:prepend_path
                                    } prepend_path
                                    prepend_path(PKG_CONFIG_PATH, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/lib/pkgconfig){
                                      MasterControl:prepend_path(t){
                                        name:"PKG_CONFIG_PATH", value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/lib/pkgconfig", delim=":", nodups="true", priority=0
                                      } MasterControl:prepend_path
                                    } prepend_path
                                    setenv(EBROOTOPENMPI, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1){
                                      MasterControl:setenv("EBROOTOPENMPI", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1", "nil"){
                                      } MasterControl:setenv
                                    } setenv
                                    setenv(EBVERSIONOPENMPI, 2.1.1){
                                      MasterControl:setenv("EBVERSIONOPENMPI", "2.1.1", "nil"){
                                      } MasterControl:setenv
                                    } setenv
                                    setenv(EBDEVELOPENMPI, /cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/easybuild/avx512-Compiler-intel2016.4-openmpi-2.1.1-easybuild-devel){
                                      MasterControl:setenv("EBDEVELOPENMPI", "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/easybuild/avx512-Compiler-intel2016.4-openmpi-2.1.1-easybuild-devel", "nil"){
                                      } MasterControl:setenv
                                    } setenv
                                    family(mpi){
                                      MasterControl:family(mpi){
                                        Mname:sn(){
                                        } Mname:sn
                                        MasterControl:setenv("LMOD_FAMILY_MPI", "openmpi", "nil"){
                                        } MasterControl:setenv
                                        MasterControl:setenv("LMOD_FAMILY_MPI_VERSION", "2.1.1", "nil"){
                                        } MasterControl:setenv
                                        MasterControl:setenv("LMOD_FAMILY_MPI", "openmpi", "nil"){
                                        } MasterControl:setenv
                                        MasterControl:setenv("LMOD_FAMILY_MPI_VERSION", "2.1.1", "nil"){
                                        } MasterControl:setenv
                                      } MasterControl:family
                                    } family
                                  } loadModuleFile
                                  Marking openmpi/2.1.1 as active and loaded
                                  safeToUpdate(): true,  changeMPATH: true, frameStk:empty(): true
                                  Master:load calling reloadAll()
                                  Master:reloadAll(count: 4){
                                    Setting mcp to MC_Load
  reloadAll(4)(arch/avx512, StdEnv, nixpkgs/16.09, gcccore/.5.4.0, icc/.2016.4.258, ifort/.2016.4.258, imkl/11.3.4.258, intel/2016.4, openmpi/2.1.1)
                                    Mname:sn(){
                                    } Mname:sn
                                    a[i].userName(1): arch/avx512
                                    adding sn: arch to mA
                                    module sn: arch is active
                                    userName(2):  arch/avx512
                                    Mname:fn(){
                                      LocationT:new(moduleA){
                                        LocationT build(moduleA){
                                        } LocationT build
                                      } LocationT:new
                                    } Mname:fn
                                    Mname:sn(){
                                    } Mname:sn
                                    a[i].userName(1): StdEnv
                                    adding sn: StdEnv to mA
                                    module sn: StdEnv is active
                                    userName(2):  StdEnv
                                    Mname:fn(){
                                    } Mname:fn
                                    Mname:sn(){
                                    } Mname:sn
                                    a[i].userName(1): nixpkgs/16.09
                                    adding sn: nixpkgs to mA
                                    module sn: nixpkgs is active
                                    userName(2):  nixpkgs/16.09
                                    Mname:fn(){
                                    } Mname:fn
                                    Mname:sn(){
                                    } Mname:sn
                                    a[i].userName(1): gcccore/.5.4.0
                                    adding sn: gcccore to mA
                                    module sn: gcccore is active
                                    userName(2):  gcccore/.5.4.0
                                    Mname:fn(){
                                    } Mname:fn
                                    Mname:sn(){
                                    } Mname:sn
                                    a[i].userName(1): icc/.2016.4.258
                                    adding sn: icc to mA
                                    module sn: icc is active
                                    userName(2):  icc/.2016.4.258
                                    Mname:fn(){
                                    } Mname:fn
                                    Mname:sn(){
                                    } Mname:sn
                                    a[i].userName(1): ifort/.2016.4.258
                                    adding sn: ifort to mA
                                    module sn: ifort is active
                                    userName(2):  ifort/.2016.4.258
                                    Mname:fn(){
                                    } Mname:fn
                                    Mname:sn(){
                                    } Mname:sn
                                    a[i].userName(1): imkl/11.3.4.258
                                    adding sn: imkl to mA
                                    module sn: imkl is active
                                    userName(2):  imkl/11.3.4.258
                                    Mname:fn(){
                                    } Mname:fn
                                    Mname:sn(){
                                    } Mname:sn
                                    a[i].userName(1): intel/2016.4
                                    adding sn: intel to mA
                                    module sn: intel is active
                                    userName(2):  intel/2016.4
                                    Mname:fn(){
                                    } Mname:fn
                                    Mname:sn(){
                                    } Mname:sn
                                    a[i].userName(1): openmpi/2.1.1
                                    adding sn: openmpi to mA
                                    module sn: openmpi is active
                                    userName(2):  openmpi/2.1.1
                                    Mname:fn(){
                                    } Mname:fn
                                    checking sn: arch
                                    checking sn: StdEnv
                                    checking sn: nixpkgs
                                    checking sn: gcccore
                                    checking sn: icc
                                    checking sn: ifort
                                    checking sn: imkl
                                    checking sn: intel
                                    checking sn: openmpi
                                    Setting mpc to MC_Load
                                  } Master:reloadAll
                                  RTM: same: true
                                } Master:load
                                MasterControl:registerAdminMsg(mA){
                                } MasterControl:registerAdminMsg
                              } MasterControl:load
                              status: true, fn_old: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua, fn: ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua
                              checking sn: arch
                              checking sn: StdEnv
                              checking sn: nixpkgs
                              checking sn: gcccore
                              checking sn: icc
                              checking sn: ifort
                              checking sn: imkl
                              checking sn: intel
                              checking sn: openmpi
                              Setting mpc to MC_Load
                            } Master:reloadAll
                            RTM: same: false
                            setting s_same: false
                          } Master:load
                          MasterControl:registerAdminMsg(mA){
                          } MasterControl:registerAdminMsg
                        } MasterControl:load
                        status: true, fn_old: ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua, fn: ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua
                        Mname:sn(){
                        } Mname:sn
                        a[i].userName(1): openmpi/2.1.1
                        adding sn: openmpi to mA
                        module sn: openmpi is active
                        userName(2):  openmpi/2.1.1
                        Mname:fn(){
                        } Mname:fn
                        checking sn: arch
                        checking sn: StdEnv
                        checking sn: nixpkgs
                        checking sn: gcccore
                        checking sn: icc
                        checking sn: ifort
                        checking sn: imkl
                        checking sn: intel
                        checking sn: openmpi
                        Setting mpc to MC_Load
                      } Master:reloadAll
                      RTM: same: false
                      setting s_same: false
                    } Master:load
                    MasterControl:registerAdminMsg(mA){
                    } MasterControl:registerAdminMsg
                  } MasterControl:load
                } MasterControl:load_usr
                Setting mcp to MC_Load
                safeToUpdate(): true,  changeMPATH: false, frameStk:empty(): true
              } Master:load
              MasterControl:registerAdminMsg(mA){
              } MasterControl:registerAdminMsg
            } MasterControl:load
            status false, fn_old: ProjectDIR/rt/cc/cc_mf/modules/nixpkgs/16.09.lua, fn: ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua
            Mname:sn(){
            } Mname:sn
            a[i].userName(1): gcccore/.5.4.0
            adding sn: gcccore to mA
            module sn: gcccore is active
            userName(2):  gcccore/.5.4.0
            Mname:fn(){
            } Mname:fn
            Mname:sn(){
            } Mname:sn
            a[i].userName(1): icc/.2016.4.258
            adding sn: icc to mA
            module sn: icc is active
            userName(2):  icc/.2016.4.258
            Mname:fn(){
            } Mname:fn
            Mname:sn(){
            } Mname:sn
            a[i].userName(1): ifort/.2016.4.258
            adding sn: ifort to mA
            module sn: ifort is active
            userName(2):  ifort/.2016.4.258
            Mname:fn(){
            } Mname:fn
            Mname:sn(){
            } Mname:sn
            a[i].userName(1): imkl/11.3.4.258
            adding sn: imkl to mA
            module sn: imkl is active
            userName(2):  imkl/11.3.4.258
            Mname:fn(){
            } Mname:fn
            Mname:sn(){
            } Mname:sn
            a[i].userName(1): intel/2016.4
            adding sn: intel to mA
            module sn: intel is active
            userName(2):  intel/2016.4
            Mname:fn(){
            } Mname:fn
            Mname:sn(){
            } Mname:sn
            a[i].userName(1): openmpi/2.1.1
            adding sn: openmpi to mA
            module sn: openmpi is active
            userName(2):  openmpi/2.1.1
            Mname:fn(){
            } Mname:fn
            Mname:sn(){
            } Mname:sn
            a[i].userName(1): StdEnv
            adding sn: StdEnv to mA
            module sn: StdEnv is active
            userName(2):  StdEnv
            Mname:fn(){
            } Mname:fn
            Mname:sn(){
            } Mname:sn
            a[i].userName(1): arch/avx512
            adding sn: arch to mA
            module sn: arch is active
            userName(2):  arch/avx512
            Mname:fn(){
            } Mname:fn
            checking sn: nixpkgs
            checking sn: gcccore
            checking sn: icc
            checking sn: ifort
            checking sn: imkl
            checking sn: intel
            checking sn: openmpi
            checking sn: StdEnv
            checking sn: arch
            Setting mpc to MC_Load
          } Master:reloadAll
          RTM: same: true
        } Master:load
        MasterControl:registerAdminMsg(mA){
        } MasterControl:registerAdminMsg
      } MasterControl:load
    } MasterControl:load_usr
    MasterControl:mustLoad(){
      compareRequestedLoadsWithActual(){
      } compareRequestedLoadsWithActual
    } MasterControl:mustLoad
  } Load_Usr
  MasterControl:reportAdminMsgs(){
  } MasterControl:reportAdminMsgs
  MT:reportChanges(){
Due to MODULEPATH changes, the following have been reloaded:
    ColumnTable:new(){
      dim: 1
      ColumnTable:_number_of_columns_rows(){
        width: 80 imin: 17,17 imax: 22, 22
        ncols: 3 sumWrt: 60 sumPrt: 60
        ncols: 3, nrows: 2
        self.ncols: 3
        ncols: 3
      }
    } ColumnTable:new
  1) gcccore/.5.4.0      3) ifort/.2016.4.258     5) intel/2016.4
  2) icc/.2016.4.258     4) imkl/11.3.4.258       6) nixpkgs/16.09
The following have been reloaded with a version change:
    ColumnTable:new(){
      dim: 1
      ColumnTable:_number_of_columns_rows(){
        width: 80 imin: 35,35 imax: 35, 35
        ncols: 1 sumWrt: 35 sumPrt: 35
        ncols: 1, nrows: 1
        self.ncols: 1
        ncols: 1
      }
    } ColumnTable:new
  1) StdEnv/2016.4 => StdEnv/2018.3
  } MT:reportChanges
  Var:prt("nil"){
    name:   "PATH"
    nodups: true
    imin:   -30
    imax:   15
    value: "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/bin:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/bin:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/bin:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64:/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/bin:/cvmfs/soft.computecanada.ca/easybuild/bin:/cvmfs/soft.computecanada.ca/custom/bin:/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin:/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/sbin:ProjectDIR/proj_mgmt:PATH_to_TM:/bin"
    tbl:
       "/bin(1)": {15, 0}
       "/cvmfs/soft.computecanada.ca/custom/bin(1)": {-21, 0}
       "/cvmfs/soft.computecanada.ca/easybuild/bin(1)": {-22, 0}
       "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64(1)": {-24, 0}
       "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64(1)": {-25, 0}
       "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/bin(1)": {-28, 0}
       "/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/bin(1)": {-29, 0}
       "/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/bin(1)": {-30, 0}
       "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin(1)": {-20, 0}
       "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/sbin(1)": {-19, 0}
       "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/bin(1)": {-23, 0}
       "PATH_to_TM(1)": {13, 0}
       "ProjectDIR/src(1)": {11, 0}
       "/opt/apps/lua/lua/bin(1)": {12, 0}
       "/usr/bin(1)": {14, 0}
  } Var:prt
} lmod
BaseShell:expand(tbl){
  ACLOCAL_PATH=/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/aclocal;
  export ACLOCAL_PATH;
  CC_PROJECT=OutputDIR/project;
  export CC_PROJECT;
  CPATH=/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/include:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include/fftw:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/include:/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/include;
  export CPATH;
  CPLUS_INCLUDE_PATH=/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include;
  export CPLUS_INCLUDE_PATH;
  CURL_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt;
  export CURL_CA_BUNDLE;
  C_INCLUDE_PATH=/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include;
  export C_INCLUDE_PATH;
  EASYBUILD_BUILDPATH=/dev/shm/mclay;
  export EASYBUILD_BUILDPATH;
  EASYBUILD_CONFIGFILES=/cvmfs/soft.computecanada.ca/easybuild/config.cfg;
  export EASYBUILD_CONFIGFILES;
  EBDEVELGCCCORE=/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/easybuild/Core-gcccore-.5.4.0-easybuild-devel;
  export EBDEVELGCCCORE;
  EBDEVELICC=/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/easybuild/Core-icc-.2016.4.258-easybuild-devel;
  export EBDEVELICC;
  EBDEVELICCIFORT=/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4/easybuild/Core-intel-2016.4-easybuild-devel;
  export EBDEVELICCIFORT;
  EBDEVELIFORT=/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/easybuild/Core-ifort-.2016.4.258-easybuild-devel;
  export EBDEVELIFORT;
  EBDEVELIMKL=/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/easybuild/Core-imkl-11.3.4.258-easybuild-devel;
  export EBDEVELIMKL;
  EBDEVELOPENMPI=/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/easybuild/avx512-Compiler-intel2016.4-openmpi-2.1.1-easybuild-devel;
  export EBDEVELOPENMPI;
  EBROOTGCCCORE=/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0;
  export EBROOTGCCCORE;
  EBROOTICC=/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258;
  export EBROOTICC;
  EBROOTICCIFORT=/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/intel/2016.4;
  export EBROOTICCIFORT;
  EBROOTIFORT=/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258;
  export EBROOTIFORT;
  EBROOTIMKL=/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258;
  export EBROOTIMKL;
  EBROOTNIXPKGS=/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09;
  export EBROOTNIXPKGS;
  EBROOTOPENMPI=/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1;
  export EBROOTOPENMPI;
  EBVERSIONGCCCORE=5.4.0;
  export EBVERSIONGCCCORE;
  EBVERSIONICC=2016.4.258;
  export EBVERSIONICC;
  EBVERSIONICCIFORT=2016.4;
  export EBVERSIONICCIFORT;
  EBVERSIONIFORT=2016.4.258;
  export EBVERSIONIFORT;
  EBVERSIONIMKL=11.3.4.258;
  export EBVERSIONIMKL;
  EBVERSIONNIXPKGS=16.09;
  export EBVERSIONNIXPKGS;
  EBVERSIONOPENMPI=2.1.1;
  export EBVERSIONOPENMPI;
  FONTCONFIG_FILE=/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/etc/fonts/fonts.conf;
  export FONTCONFIG_FILE;
  INTEL_LICENSE_FILE=/cvmfs/soft.computecanada.ca/config/licenses/intel/computecanada.lic;
  export INTEL_LICENSE_FILE;
  unset INTEL_PYTHONHOME;
  LESSOPEN=\|/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/lesspipe.sh\ %s;
  export LESSOPEN;
  LIBRARY_PATH=/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/lib:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/intel64:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/compiler/lib/intel64:/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/lib64:/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/lib:/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib;
  export LIBRARY_PATH;
  LMOD_FAMILY_COMPILER=intel;
  export LMOD_FAMILY_COMPILER;
  LMOD_FAMILY_COMPILER_VERSION=2016.4;
  export LMOD_FAMILY_COMPILER_VERSION;
  LMOD_FAMILY_MPI=openmpi;
  export LMOD_FAMILY_MPI;
  LMOD_FAMILY_MPI_VERSION=2.1.1;
  export LMOD_FAMILY_MPI_VERSION;
  __LMOD_REF_COUNT_LOADEDMODULES=arch/avx512:1\;StdEnv/2018.3:1\;nixpkgs/16.09:1\;gcccore/.5.4.0:1\;icc/.2016.4.258:1\;ifort/.2016.4.258:1\;imkl/11.3.4.258:1\;intel/2016.4:1\;openmpi/2.1.1:1;
  export __LMOD_REF_COUNT_LOADEDMODULES;
  LOADEDMODULES=arch/avx512:StdEnv/2018.3:nixpkgs/16.09:gcccore/.5.4.0:icc/.2016.4.258:ifort/.2016.4.258:imkl/11.3.4.258:intel/2016.4:openmpi/2.1.1;
  export LOADEDMODULES;
  LOCALE_ARCHIVE=/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/locale/locale-archive;
  export LOCALE_ARCHIVE;
  MANPATH=/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/share/man:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/man/common:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/man/common:/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/share/man:/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/man;
  export MANPATH;
  MIC_LD_LIBRARY_PATH=/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/lib/mic:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/lib/intel64_lin_mic;
  export MIC_LD_LIBRARY_PATH;
  MKLROOT=/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl;
  export MKLROOT;
  MKL_ENABLE_INSTRUCTIONS=AVX512;
  export MKL_ENABLE_INSTRUCTIONS;
  MKL_EXAMPLES=/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/examples/;
  export MKL_EXAMPLES;
  __LMOD_REF_COUNT_MODULEPATH=ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1:1\;ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4:1\;ProjectDIR/rt/cc/cc_mf/Core-avx512:1\;ProjectDIR/rt/cc/cc_mf/modules-avx512:1\;ProjectDIR/rt/cc/cc_mf/modules:1;
  export __LMOD_REF_COUNT_MODULEPATH;
  MODULEPATH=ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1:ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4:ProjectDIR/rt/cc/cc_mf/Core-avx512:ProjectDIR/rt/cc/cc_mf/modules-avx512:ProjectDIR/rt/cc/cc_mf/modules;
  export MODULEPATH;
  MXM_LOG_LEVEL=error;
  export MXM_LOG_LEVEL;
  NIXUSER_PROFILE=/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09;
  export NIXUSER_PROFILE;
  NLSPATH=/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/idb/intel64/locale/%l_%t/%N:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/idb/intel64/locale/%l_%t/%N:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/idb/intel64/locale/%l_%t/%N;
  export NLSPATH;
  unset OMPI_MCA_mtl;
  unset OMPI_MCA_pml;
  PAGER=less\ -R;
  export PAGER;
  PATH=/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/bin:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/mkl/bin:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/imkl/11.3.4.258/bin:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/ifort/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64:/cvmfs/soft.computecanada.ca/easybuild/software/2017/Core/icc/2016.4.258/compilers_and_libraries_2016.4.258/linux/bin/intel64:/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-5.4.0/bin:/cvmfs/soft.computecanada.ca/easybuild/bin:/cvmfs/soft.computecanada.ca/custom/bin:/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin:/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/sbin:ProjectDIR/proj_mgmt:PATH_to_TM;
  export PATH;
  PERL5LIB=/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5:/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5/site_perl;
  export PERL5LIB;
  PERL5OPT=-I/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5\ -I/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/perl5/site_perl;
  export PERL5OPT;
  PIP_CONFIG_FILE=/cvmfs/soft.computecanada.ca/config/python/pip-avx512.conf;
  export PIP_CONFIG_FILE;
  PKG_CONFIG_PATH=/cvmfs/soft.computecanada.ca/easybuild/software/2017/avx512/Compiler/intel2016.4/openmpi/2.1.1/lib/pkgconfig:/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/lib/pkgconfig;
  export PKG_CONFIG_PATH;
  PROJECT=OutputDIR/project;
  export PROJECT;
  PYTHONPATH=/cvmfs/soft.computecanada.ca/custom/python/site-packages;
  export PYTHONPATH;
  RSNT_ARCH=avx512;
  export RSNT_ARCH;
  RSNT_INTERCONNECT=infiniband;
  export RSNT_INTERCONNECT;
  unset SLURM_MPI_TYPE;
  SSL_CERT_FILE=/etc/pki/tls/certs/ca-bundle.crt;
  export SSL_CERT_FILE;
  unset TBBROOT;
  TZDIR=/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/share/zoneinfo;
  export TZDIR;
  __LMOD_REF_COUNT__LMFILES_=ProjectDIR/rt/cc/cc_mf/modules/arch/avx512.lua:1\;ProjectDIR/rt/cc/cc_mf/modules-avx512/StdEnv/2018.3.lua:1\;ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua:1\;ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua:1\;ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua:1\;ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua:1\;ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua:1\;ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua:1\;ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua:1;
  export __LMOD_REF_COUNT__LMFILES_;
  _LMFILES_=ProjectDIR/rt/cc/cc_mf/modules/arch/avx512.lua:ProjectDIR/rt/cc/cc_mf/modules-avx512/StdEnv/2018.3.lua:ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua:ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua:ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua:ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua:ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua:ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua:ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua;
  export _LMFILES_;
  BaseShell:expandMT(vstr){
    _ModuleTable_ = {
      ["MTversion"] = 3,
      ["c_rebuildTime"] = false,
      ["c_shortTime"] = false,
      depthT = {},
      family = {
        ["compiler"] = "intel",
        ["mpi"] = "openmpi",
      },
      mT = {
        StdEnv = {
          ["fn"] = "ProjectDIR/rt/cc/cc_mf/modules-avx512/StdEnv/2018.3.lua",
          ["fullName"] = "StdEnv/2018.3",
          ["loadOrder"] = 18,
          propT = {},
          ["stackDepth"] = 0,
          ["status"] = "active",
          ["userName"] = "StdEnv",
        },
        arch = {
          ["fn"] = "ProjectDIR/rt/cc/cc_mf/modules/arch/avx512.lua",
          ["fullName"] = "arch/avx512",
          ["loadOrder"] = 9,
          propT = {},
          ["stackDepth"] = 0,
          ["status"] = "active",
          ["userName"] = "arch/avx512",
        },
        gcccore = {
          ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/gcccore/.5.4.0.lua",
          ["fullName"] = "gcccore/.5.4.0",
          ["loadOrder"] = 26,
          propT = {},
          ["stackDepth"] = 0,
          ["status"] = "active",
          ["userName"] = "gcccore/.5.4.0",
        },
        icc = {
          ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/icc/.2016.4.258.lua",
          ["fullName"] = "icc/.2016.4.258",
          ["loadOrder"] = 27,
          propT = {},
          ["stackDepth"] = 0,
          ["status"] = "active",
          ["userName"] = "icc/.2016.4.258",
        },
        ifort = {
          ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/ifort/.2016.4.258.lua",
          ["fullName"] = "ifort/.2016.4.258",
          ["loadOrder"] = 28,
          propT = {},
          ["stackDepth"] = 0,
          ["status"] = "active",
          ["userName"] = "ifort/.2016.4.258",
        },
        imkl = {
          ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/imkl/11.3.4.258.lua",
          ["fullName"] = "imkl/11.3.4.258",
          ["loadOrder"] = 30,
          propT = {},
          ["stackDepth"] = 1,
          ["status"] = "active",
          ["userName"] = "imkl/11.3.4.258",
        },
        intel = {
          ["fn"] = "ProjectDIR/rt/cc/cc_mf/Core-avx512/intel/2016.4.lua",
          ["fullName"] = "intel/2016.4",
          ["loadOrder"] = 31,
          propT = {},
          ["stackDepth"] = 0,
          ["status"] = "active",
          ["userName"] = "intel/2016.4",
        },
        nixpkgs = {
          ["fn"] = "ProjectDIR/rt/cc/cc_mf/modules-avx512/nixpkgs/16.09.lua",
          ["fullName"] = "nixpkgs/16.09",
          ["loadOrder"] = 25,
          propT = {},
          ["stackDepth"] = 0,
          ["status"] = "active",
          ["userName"] = "nixpkgs/16.09",
        },
        openmpi = {
          ["fn"] = "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4/openmpi/2.1.1.lua",
          ["fullName"] = "openmpi/2.1.1",
          ["loadOrder"] = 32,
          propT = {},
          ["stackDepth"] = 0,
          ["status"] = "active",
          ["userName"] = "openmpi/2.1.1",
        },
      },
      mpathA = {
        "ProjectDIR/rt/cc/cc_mf/avx512/MPI/intel2016.4/openmpi2.1", "ProjectDIR/rt/cc/cc_mf/avx512/Compiler/intel2016.4", "ProjectDIR/rt/cc/cc_mf/Core-avx512", "ProjectDIR/rt/cc/cc_mf/modules-avx512", "ProjectDIR/rt/cc/cc_mf/modules",
      },
      ["systemBaseMPATH"] = "ProjectDIR/rt/cc/cc_mf/modules",
    }
  } BaseShell:expandMT
  alias quota=diskusage_report;
} BaseShell:expand
Exec:exec(){
} Exec:exec
===========================
step 6
lua ProjectDIR/src/lmod.in.lua bash --regression_testing list
===========================
Currently Loaded Modules:
  1) arch/avx512     4) gcccore/.5.4.0    (H)   7) imkl/11.3.4.258
  2) StdEnv/2018.3   5) icc/.2016.4.258   (H)   8) intel/2016.4
  3) nixpkgs/16.09   6) ifort/.2016.4.258 (H)   9) openmpi/2.1.1
  Where:
   H:  Hidden Module
===========================
step 7
lua ProjectDIR/src/lmod.in.lua bash --regression_testing load StdEnv
===========================
The following have been reloaded with a version change:
  1) gcccore/.5.4.0 => gcccore/.7.3.0
  2) icc/.2016.4.258 => icc/.2018.3.222
  3) ifort/.2016.4.258 => ifort/.2018.3.222
  4) imkl/11.3.4.258 => imkl/2018.3.222
  5) intel/2016.4 => intel/2018.3
  6) openmpi/2.1.1 => openmpi/3.1.2
===========================
step 8
lua ProjectDIR/src/lmod.in.lua bash --regression_testing list
===========================
Currently Loaded Modules:
  1) arch/avx512          4) icc/.2018.3.222   (H)   7) intel/2018.3
  2) nixpkgs/16.09        5) ifort/.2018.3.222 (H)   8) openmpi/3.1.2
  3) gcccore/.7.3.0 (H)   6) imkl/2018.3.222         9) StdEnv/2018.3
  Where:
   H:  Hidden Module
